
rsense-micro-adc-dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db74  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013950  0800dd34  0800dd34  0001dd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021684  08021684  000401f8  2**0
                  CONTENTS
  4 .ARM          00000008  08021684  08021684  00031684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802168c  0802168c  000401f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802168c  0802168c  0003168c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021690  08021690  00031690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08021694  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f1c  200001f8  0802188c  000401f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002114  0802188c  00042114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b43  00000000  00000000  00040228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000425b  00000000  00000000  00060d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001538  00000000  00000000  00064fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a8  00000000  00000000  00066500  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035bb0  00000000  00000000  000678a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015cfc  00000000  00000000  0009d458  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00136820  00000000  00000000  000b3154  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001e9974  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c60  00000000  00000000  001e9a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003452  00000000  00000000  001ef6c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800dd1c 	.word	0x0800dd1c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	0800dd1c 	.word	0x0800dd1c

08000200 <arm_bitreversal_32>:
 8000200:	1c4b      	adds	r3, r1, #1
 8000202:	2b01      	cmp	r3, #1
 8000204:	bf98      	it	ls
 8000206:	4770      	bxls	lr
 8000208:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800020c:	1c91      	adds	r1, r2, #2
 800020e:	089b      	lsrs	r3, r3, #2

08000210 <arm_bitreversal_32_0>:
 8000210:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000214:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000218:	880a      	ldrh	r2, [r1, #0]
 800021a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800021e:	4480      	add	r8, r0
 8000220:	4481      	add	r9, r0
 8000222:	4402      	add	r2, r0
 8000224:	4484      	add	ip, r0
 8000226:	f8d9 7000 	ldr.w	r7, [r9]
 800022a:	f8d8 6000 	ldr.w	r6, [r8]
 800022e:	6815      	ldr	r5, [r2, #0]
 8000230:	f8dc 4000 	ldr.w	r4, [ip]
 8000234:	f8c9 6000 	str.w	r6, [r9]
 8000238:	f8c8 7000 	str.w	r7, [r8]
 800023c:	f8cc 5000 	str.w	r5, [ip]
 8000240:	6014      	str	r4, [r2, #0]
 8000242:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000246:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800024a:	6855      	ldr	r5, [r2, #4]
 800024c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000250:	f8c9 6004 	str.w	r6, [r9, #4]
 8000254:	f8c8 7004 	str.w	r7, [r8, #4]
 8000258:	f8cc 5004 	str.w	r5, [ip, #4]
 800025c:	6054      	str	r4, [r2, #4]
 800025e:	3108      	adds	r1, #8
 8000260:	3b01      	subs	r3, #1
 8000262:	d1d5      	bne.n	8000210 <arm_bitreversal_32_0>
 8000264:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000268:	4770      	bx	lr

0800026a <arm_bitreversal_16>:
 800026a:	1c4b      	adds	r3, r1, #1
 800026c:	2b01      	cmp	r3, #1
 800026e:	bf98      	it	ls
 8000270:	4770      	bxls	lr
 8000272:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000276:	1c91      	adds	r1, r2, #2
 8000278:	089b      	lsrs	r3, r3, #2

0800027a <arm_bitreversal_16_0>:
 800027a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800027e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000282:	880a      	ldrh	r2, [r1, #0]
 8000284:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000288:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800028c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000290:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000294:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000298:	f8d9 7000 	ldr.w	r7, [r9]
 800029c:	f8d8 6000 	ldr.w	r6, [r8]
 80002a0:	6815      	ldr	r5, [r2, #0]
 80002a2:	f8dc 4000 	ldr.w	r4, [ip]
 80002a6:	f8c9 6000 	str.w	r6, [r9]
 80002aa:	f8c8 7000 	str.w	r7, [r8]
 80002ae:	f8cc 5000 	str.w	r5, [ip]
 80002b2:	6014      	str	r4, [r2, #0]
 80002b4:	3108      	adds	r1, #8
 80002b6:	3b01      	subs	r3, #1
 80002b8:	d1df      	bne.n	800027a <arm_bitreversal_16_0>
 80002ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <AUDIO_FFT_Init>:
* @brief  Initialize the FFT processing depending on the desired configuration
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @retval None
*/
int32_t AUDIO_FFT_Init(AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Initialize FFT ARM structure */
  arm_rfft_fast_init_f32(&(AUDIO_FFT_instance->context.S), AUDIO_FFT_instance->FFT_len);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f103 0214 	add.w	r2, r3, #20
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	f00a fcc2 	bl	800b928 <arm_rfft_fast_init_f32>

  /*Compute indexes to be used for overlap */
  AUDIO_FFT_instance->context.new_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) *  (1.0f - (float)(AUDIO_FFT_instance->overlap)));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	ee07 3a90 	vmov	s15, r3
 8000fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000fba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc6:	ee17 2a90 	vmov	r2, s15
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  AUDIO_FFT_instance->context.old_data_len = (uint32_t)((float)(AUDIO_FFT_instance->FFT_len) -  AUDIO_FFT_instance->context.new_data_len);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fee:	ee17 2a90 	vmov	r2, s15
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize scratch buffer index */
  AUDIO_FFT_instance->context.scratch_idx = 0;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Memory allocation */
  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d009      	beq.n	8001018 <AUDIO_FFT_Init+0x90>
  {
    AUDIO_FFT_instance->context.win = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2104      	movs	r1, #4
 800100a:	4618      	mov	r0, r3
 800100c:	f00b fd8e 	bl	800cb2c <calloc>
 8001010:	4603      	mov	r3, r0
 8001012:	461a      	mov	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	639a      	str	r2, [r3, #56]	; 0x38
  }
  AUDIO_FFT_instance->context.scratch = (float * )calloc(AUDIO_FFT_instance->context.new_data_len, sizeof(float));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2104      	movs	r1, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f00b fd84 	bl	800cb2c <calloc>
 8001024:	4603      	mov	r3, r0
 8001026:	461a      	mov	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	63da      	str	r2, [r3, #60]	; 0x3c
  AUDIO_FFT_instance->context.dataIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2104      	movs	r1, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f00b fd7a 	bl	800cb2c <calloc>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	641a      	str	r2, [r3, #64]	; 0x40
  AUDIO_FFT_instance->context.fftIn = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2104      	movs	r1, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f00b fd70 	bl	800cb2c <calloc>
 800104c:	4603      	mov	r3, r0
 800104e:	461a      	mov	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	645a      	str	r2, [r3, #68]	; 0x44
  if(AUDIO_FFT_instance->output == MAGNITUDE || AUDIO_FFT_instance->output == PHASE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d003      	beq.n	8001064 <AUDIO_FFT_Init+0xdc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d109      	bne.n	8001078 <AUDIO_FFT_Init+0xf0>
  {
  AUDIO_FFT_instance->context.fftOut = (float * )calloc(AUDIO_FFT_instance->FFT_len, sizeof(float));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2104      	movs	r1, #4
 800106a:	4618      	mov	r0, r3
 800106c:	f00b fd5e 	bl	800cb2c <calloc>
 8001070:	4603      	mov	r3, r0
 8001072:	461a      	mov	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Create window depending on the user choice */
  switch(AUDIO_FFT_instance->win_type)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d847      	bhi.n	8001110 <AUDIO_FFT_Init+0x188>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <AUDIO_FFT_Init+0x100>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	08001111 	.word	0x08001111
 800108c:	080010a1 	.word	0x080010a1
 8001090:	080010b5 	.word	0x080010b5
 8001094:	080010cd 	.word	0x080010cd
 8001098:	080010e1 	.word	0x080010e1
 800109c:	080010f9 	.word	0x080010f9
  {
  case AUDIO_FTT_RECT_WIN:
    break;
  case AUDIO_FTT_HAMMING_WIN:
    HammingWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010aa:	4619      	mov	r1, r3
 80010ac:	4610      	mov	r0, r2
 80010ae:	f000 f9eb 	bl	8001488 <HammingWin>
    break;
 80010b2:	e02d      	b.n	8001110 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_HANNING_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 1.0f, AUDIO_FFT_instance->context.win);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010be:	4619      	mov	r1, r3
 80010c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010c4:	4610      	mov	r0, r2
 80010c6:	f000 f8df 	bl	8001288 <TukeyWin>
    break;
 80010ca:	e021      	b.n	8001110 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_BLACKMAN_HARRIS_WIN:
    BlackmanHarrisWin(AUDIO_FFT_instance->FFT_len, AUDIO_FFT_instance->context.win);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	4619      	mov	r1, r3
 80010d8:	4610      	mov	r0, r2
 80010da:	f000 fa39 	bl	8001550 <BlackmanHarrisWin>
    break;
 80010de:	e017      	b.n	8001110 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_25_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.25f, AUDIO_FFT_instance->context.win);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ea:	4619      	mov	r1, r3
 80010ec:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010f0:	4610      	mov	r0, r2
 80010f2:	f000 f8c9 	bl	8001288 <TukeyWin>
    break;
 80010f6:	e00b      	b.n	8001110 <AUDIO_FFT_Init+0x188>
  case AUDIO_FTT_TUKEY_0_75_WIN:
    TukeyWin(AUDIO_FFT_instance->FFT_len, 0.75f, AUDIO_FFT_instance->context.win);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001102:	4619      	mov	r1, r3
 8001104:	eeb6 0a08 	vmov.f32	s0, #104	; 0x3f400000  0.750
 8001108:	4610      	mov	r0, r2
 800110a:	f000 f8bd 	bl	8001288 <TukeyWin>
    break;
 800110e:	bf00      	nop
  }

  return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop

0800111c <AUDIO_FFT_Data_Input>:
* @param  data: input data buffer
* @param  len: length of input data buffer
* @retval None
*/
int32_t AUDIO_FFT_Data_Input(int16_t * data, uint32_t len, AUDIO_FFT_instance_t* AUDIO_FFT_instance)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	; 0x30
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t index = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t s_idx = AUDIO_FFT_instance->context.scratch_idx;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t new_data_len = AUDIO_FFT_instance->context.new_data_len;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	61fb      	str	r3, [r7, #28]

  float * scratch_ptr = &AUDIO_FFT_instance->context.scratch[s_idx];
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	623b      	str	r3, [r7, #32]

  for (index = 0; index < len; index ++)
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	; 0x28
 800114c:	e041      	b.n	80011d2 <AUDIO_FFT_Data_Input+0xb6>
  {
    *scratch_ptr++ = (float)data[index]/32768.0f;
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4413      	add	r3, r2
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	ee07 3a90 	vmov	s15, r3
 800115e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	1d1a      	adds	r2, r3, #4
 8001166:	623a      	str	r2, [r7, #32]
 8001168:	eddf 6a20 	vldr	s13, [pc, #128]	; 80011ec <AUDIO_FFT_Data_Input+0xd0>
 800116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001170:	edc3 7a00 	vstr	s15, [r3]
    s_idx++;
 8001174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001176:	3301      	adds	r3, #1
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    if (s_idx == new_data_len)
 800117a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	429a      	cmp	r2, r3
 8001180:	d124      	bne.n	80011cc <AUDIO_FFT_Data_Input+0xb0>
    {
      float * data_in = AUDIO_FFT_instance->context.dataIn;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	61bb      	str	r3, [r7, #24]
      uint32_t old_data_len = AUDIO_FFT_instance->context.old_data_len;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118c:	617b      	str	r3, [r7, #20]

      memcpy(data_in, &data_in[AUDIO_FFT_instance->FFT_len - old_data_len], old_data_len * sizeof(float));
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	18d1      	adds	r1, r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	69b8      	ldr	r0, [r7, #24]
 80011a4:	f00b fd04 	bl	800cbb0 <memcpy>
      memcpy(&data_in[old_data_len], AUDIO_FFT_instance->context.scratch, new_data_len * sizeof(float));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	18d0      	adds	r0, r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	461a      	mov	r2, r3
 80011ba:	f00b fcf9 	bl	800cbb0 <memcpy>

      ret = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      s_idx = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
      scratch_ptr = &AUDIO_FFT_instance->context.scratch[0];
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	623b      	str	r3, [r7, #32]
  for (index = 0; index < len; index ++)
 80011cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ce:	3301      	adds	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d8b9      	bhi.n	800114e <AUDIO_FFT_Data_Input+0x32>
//      AUDIO_FFT_Process(AUDIO_FFT_instance, FFT_Out);
    }

  }

  AUDIO_FFT_instance->context.scratch_idx = s_idx;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011de:	635a      	str	r2, [r3, #52]	; 0x34

  return ret;
 80011e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3730      	adds	r7, #48	; 0x30
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	47000000 	.word	0x47000000

080011f0 <AUDIO_FFT_Process>:
* @param  AUDIO_FFT_instance_t* AUDIO_FFT_instance
* @param  output: FFT amplitude buffer
* @retval None
*/
int32_t AUDIO_FFT_Process(AUDIO_FFT_instance_t* AUDIO_FFT_instance, float * output)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]

  float * win = AUDIO_FFT_instance->context.win;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	617b      	str	r3, [r7, #20]
  float * dataIn = AUDIO_FFT_instance->context.dataIn;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	613b      	str	r3, [r7, #16]
  float * fftIn = AUDIO_FFT_instance->context.fftIn;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	60fb      	str	r3, [r7, #12]

  if(AUDIO_FFT_instance->win_type != AUDIO_FTT_RECT_WIN)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <AUDIO_FFT_Process+0x34>
  {
  arm_mult_f32(dataIn, win, fftIn, AUDIO_FFT_instance->FFT_len);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	6979      	ldr	r1, [r7, #20]
 800121c:	6938      	ldr	r0, [r7, #16]
 800121e:	f00b f95d 	bl	800c4dc <arm_mult_f32>
 8001222:	e007      	b.n	8001234 <AUDIO_FFT_Process+0x44>
  }
  else
  {
    memcpy(fftIn, dataIn, sizeof(float) * AUDIO_FFT_instance->FFT_len);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	461a      	mov	r2, r3
 800122c:	6939      	ldr	r1, [r7, #16]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f00b fcbe 	bl	800cbb0 <memcpy>
  }

  if(AUDIO_FFT_instance->output == COMPLEX)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <AUDIO_FFT_Process+0x5c>
  {
  arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, output, 0);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f103 0014 	add.w	r0, r3, #20
 8001242:	2300      	movs	r3, #0
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	68f9      	ldr	r1, [r7, #12]
 8001248:	f00a fbf2 	bl	800ba30 <arm_rfft_fast_f32>
  }

  if(AUDIO_FFT_instance->output == MAGNITUDE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d112      	bne.n	800127a <AUDIO_FFT_Process+0x8a>
  {
    float * fftOut = AUDIO_FFT_instance->context.fftOut;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	60bb      	str	r3, [r7, #8]
    arm_rfft_fast_f32(&AUDIO_FFT_instance->context.S, fftIn, fftOut, 0);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f103 0014 	add.w	r0, r3, #20
 8001260:	2300      	movs	r3, #0
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	68f9      	ldr	r1, [r7, #12]
 8001266:	f00a fbe3 	bl	800ba30 <arm_rfft_fast_f32>
    arm_cmplx_mag_f32(fftOut, output, AUDIO_FFT_instance->FFT_len/ 2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	085b      	lsrs	r3, r3, #1
 8001270:	461a      	mov	r2, r3
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	68b8      	ldr	r0, [r7, #8]
 8001276:	f00b f849 	bl	800c30c <arm_cmplx_mag_f32>
  if(AUDIO_FFT_instance->output == PHASE)
  {
    /*Not implemented in v1.0.0*/
  }

  return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0000      	movs	r0, r0
	...

08001288 <TukeyWin>:


static void TukeyWin(uint16_t len, float ratio, float * dest)
{
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	ed87 0a02 	vstr	s0, [r7, #8]
 8001294:	6079      	str	r1, [r7, #4]
 8001296:	81fb      	strh	r3, [r7, #14]
  uint16_t x = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	82fb      	strh	r3, [r7, #22]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 800129c:	2300      	movs	r3, #0
 800129e:	82fb      	strh	r3, [r7, #22]
 80012a0:	e04f      	b.n	8001342 <TukeyWin+0xba>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - (ratio / 2))));
 80012a2:	68b8      	ldr	r0, [r7, #8]
 80012a4:	f7ff f970 	bl	8000588 <__aeabi_f2d>
 80012a8:	4603      	mov	r3, r0
 80012aa:	460c      	mov	r4, r1
 80012ac:	461a      	mov	r2, r3
 80012ae:	4623      	mov	r3, r4
 80012b0:	a173      	add	r1, pc, #460	; (adr r1, 8001480 <TukeyWin+0x1f8>)
 80012b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012b6:	f7ff fae9 	bl	800088c <__aeabi_ddiv>
 80012ba:	4603      	mov	r3, r0
 80012bc:	460c      	mov	r4, r1
 80012be:	4625      	mov	r5, r4
 80012c0:	461c      	mov	r4, r3
 80012c2:	8afb      	ldrh	r3, [r7, #22]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012e2:	edd7 6a02 	vldr	s13, [r7, #8]
 80012e6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80012ea:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012f2:	ee17 0a90 	vmov	r0, s15
 80012f6:	f7ff f947 	bl	8000588 <__aeabi_f2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4620      	mov	r0, r4
 8001300:	4629      	mov	r1, r5
 8001302:	f7ff f999 	bl	8000638 <__aeabi_dmul>
 8001306:	4603      	mov	r3, r0
 8001308:	460c      	mov	r4, r1
 800130a:	4618      	mov	r0, r3
 800130c:	4621      	mov	r1, r4
 800130e:	f7ff fc6b 	bl	8000be8 <__aeabi_d2f>
 8001312:	4603      	mov	r3, r0
 8001314:	ee00 3a10 	vmov	s0, r3
 8001318:	f00b fd26 	bl	800cd68 <cosf>
 800131c:	eeb0 7a40 	vmov.f32	s14, s0
 8001320:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001328:	8afb      	ldrh	r3, [r7, #22]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001334:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001338:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len * (ratio / 2) ; x++)
 800133c:	8afb      	ldrh	r3, [r7, #22]
 800133e:	3301      	adds	r3, #1
 8001340:	82fb      	strh	r3, [r7, #22]
 8001342:	8afb      	ldrh	r3, [r7, #22]
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001356:	ed97 6a02 	vldr	s12, [r7, #8]
 800135a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800135e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001362:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800136a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136e:	d498      	bmi.n	80012a2 <TukeyWin+0x1a>
  }
  for( ; x <  len - len * (ratio / 2); x++)
 8001370:	e009      	b.n	8001386 <TukeyWin+0xfe>
  {
    dest[x] = 1.0f;
 8001372:	8afb      	ldrh	r3, [r7, #22]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800137e:	601a      	str	r2, [r3, #0]
  for( ; x <  len - len * (ratio / 2); x++)
 8001380:	8afb      	ldrh	r3, [r7, #22]
 8001382:	3301      	adds	r3, #1
 8001384:	82fb      	strh	r3, [r7, #22]
 8001386:	8afb      	ldrh	r3, [r7, #22]
 8001388:	ee07 3a90 	vmov	s15, r3
 800138c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001390:	89fb      	ldrh	r3, [r7, #14]
 8001392:	ee07 3a90 	vmov	s15, r3
 8001396:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800139a:	89fb      	ldrh	r3, [r7, #14]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80013a4:	edd7 5a02 	vldr	s11, [r7, #8]
 80013a8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80013ac:	eec5 7a85 	vdiv.f32	s15, s11, s10
 80013b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80013b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80013b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c0:	d4d7      	bmi.n	8001372 <TukeyWin+0xea>
  }
  for( ; x <  len; x++)
 80013c2:	e053      	b.n	800146c <TukeyWin+0x1e4>
  {
    dest[x] = 0.5f * (1.0f + cosf(2.0f * M_PI / ratio * ( (float)x/(len - 1.0f) - 1 + (ratio / 2))));
 80013c4:	68b8      	ldr	r0, [r7, #8]
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4603      	mov	r3, r0
 80013cc:	460c      	mov	r4, r1
 80013ce:	461a      	mov	r2, r3
 80013d0:	4623      	mov	r3, r4
 80013d2:	a12b      	add	r1, pc, #172	; (adr r1, 8001480 <TukeyWin+0x1f8>)
 80013d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013d8:	f7ff fa58 	bl	800088c <__aeabi_ddiv>
 80013dc:	4603      	mov	r3, r0
 80013de:	460c      	mov	r4, r1
 80013e0:	4625      	mov	r5, r4
 80013e2:	461c      	mov	r4, r3
 80013e4:	8afb      	ldrh	r3, [r7, #22]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001404:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001408:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800140c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001410:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001414:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141c:	ee17 0a90 	vmov	r0, s15
 8001420:	f7ff f8b2 	bl	8000588 <__aeabi_f2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f904 	bl	8000638 <__aeabi_dmul>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4618      	mov	r0, r3
 8001436:	4621      	mov	r1, r4
 8001438:	f7ff fbd6 	bl	8000be8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	ee00 3a10 	vmov	s0, r3
 8001442:	f00b fc91 	bl	800cd68 <cosf>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800144e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001452:	8afb      	ldrh	r3, [r7, #22]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	edc3 7a00 	vstr	s15, [r3]
  for( ; x <  len; x++)
 8001466:	8afb      	ldrh	r3, [r7, #22]
 8001468:	3301      	adds	r3, #1
 800146a:	82fb      	strh	r3, [r7, #22]
 800146c:	8afa      	ldrh	r2, [r7, #22]
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	429a      	cmp	r2, r3
 8001472:	d3a7      	bcc.n	80013c4 <TukeyWin+0x13c>
  }
}
 8001474:	bf00      	nop
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bdb0      	pop	{r4, r5, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	54442d18 	.word	0x54442d18
 8001484:	401921fb 	.word	0x401921fb

08001488 <HammingWin>:

static void HammingWin(uint16_t len, float * dest)
{
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.53836f;
 8001498:	4b2b      	ldr	r3, [pc, #172]	; (8001548 <HammingWin+0xc0>)
 800149a:	613b      	str	r3, [r7, #16]
  float alpha1 = 1.0f - alpha0;
 800149c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a8:	edc7 7a03 	vstr	s15, [r7, #12]

  for ( x = 0; x < len ; x++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	82fb      	strh	r3, [r7, #22]
 80014b0:	e03e      	b.n	8001530 <HammingWin+0xa8>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len);
 80014b2:	8afb      	ldrh	r3, [r7, #22]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014bc:	ee17 0a90 	vmov	r0, s15
 80014c0:	f7ff f862 	bl	8000588 <__aeabi_f2d>
 80014c4:	a31e      	add	r3, pc, #120	; (adr r3, 8001540 <HammingWin+0xb8>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f7ff f8b5 	bl	8000638 <__aeabi_dmul>
 80014ce:	4603      	mov	r3, r0
 80014d0:	460c      	mov	r4, r1
 80014d2:	4625      	mov	r5, r4
 80014d4:	461c      	mov	r4, r3
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	ee17 0a90 	vmov	r0, s15
 80014e4:	f7ff f850 	bl	8000588 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7ff f9cc 	bl	800088c <__aeabi_ddiv>
 80014f4:	4603      	mov	r3, r0
 80014f6:	460c      	mov	r4, r1
 80014f8:	4618      	mov	r0, r3
 80014fa:	4621      	mov	r1, r4
 80014fc:	f7ff fb74 	bl	8000be8 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	ee00 3a10 	vmov	s0, r3
 8001506:	f00b fc2f 	bl	800cd68 <cosf>
 800150a:	eeb0 7a40 	vmov.f32	s14, s0
 800150e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001516:	8afb      	ldrh	r3, [r7, #22]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001526:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 800152a:	8afb      	ldrh	r3, [r7, #22]
 800152c:	3301      	adds	r3, #1
 800152e:	82fb      	strh	r3, [r7, #22]
 8001530:	8afa      	ldrh	r2, [r7, #22]
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	429a      	cmp	r2, r3
 8001536:	d3bc      	bcc.n	80014b2 <HammingWin+0x2a>
  }
}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bdb0      	pop	{r4, r5, r7, pc}
 8001540:	54442d18 	.word	0x54442d18
 8001544:	401921fb 	.word	0x401921fb
 8001548:	3f09d1f6 	.word	0x3f09d1f6
 800154c:	00000000 	.word	0x00000000

08001550 <BlackmanHarrisWin>:

static void BlackmanHarrisWin(uint16_t len, float * dest)
{
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	ed2d 8b02 	vpush	{d8}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	6039      	str	r1, [r7, #0]
 800155e:	80fb      	strh	r3, [r7, #6]
  uint16_t x = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	82fb      	strh	r3, [r7, #22]
  float alpha0 = 0.42f;
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <BlackmanHarrisWin+0x138>)
 8001566:	613b      	str	r3, [r7, #16]
  float alpha1 = 0.5;
 8001568:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800156c:	60fb      	str	r3, [r7, #12]
  float alpha2 = 0.08f;
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <BlackmanHarrisWin+0x13c>)
 8001570:	60bb      	str	r3, [r7, #8]

  for ( x = 0; x < len ; x++)
 8001572:	2300      	movs	r3, #0
 8001574:	82fb      	strh	r3, [r7, #22]
 8001576:	e074      	b.n	8001662 <BlackmanHarrisWin+0x112>
  {
    dest[x] = alpha0 - alpha1 * cosf(2.0f * M_PI * (float)x / (float)len) + - alpha2 * cosf(4.0f * M_PI * (float)x / (float)len);
 8001578:	8afb      	ldrh	r3, [r7, #22]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	ee17 0a90 	vmov	r0, s15
 8001586:	f7fe ffff 	bl	8000588 <__aeabi_f2d>
 800158a:	a33b      	add	r3, pc, #236	; (adr r3, 8001678 <BlackmanHarrisWin+0x128>)
 800158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001590:	f7ff f852 	bl	8000638 <__aeabi_dmul>
 8001594:	4603      	mov	r3, r0
 8001596:	460c      	mov	r4, r1
 8001598:	4625      	mov	r5, r4
 800159a:	461c      	mov	r4, r3
 800159c:	88fb      	ldrh	r3, [r7, #6]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a6:	ee17 0a90 	vmov	r0, s15
 80015aa:	f7fe ffed 	bl	8000588 <__aeabi_f2d>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7ff f969 	bl	800088c <__aeabi_ddiv>
 80015ba:	4603      	mov	r3, r0
 80015bc:	460c      	mov	r4, r1
 80015be:	4618      	mov	r0, r3
 80015c0:	4621      	mov	r1, r4
 80015c2:	f7ff fb11 	bl	8000be8 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	ee00 3a10 	vmov	s0, r3
 80015cc:	f00b fbcc 	bl	800cd68 <cosf>
 80015d0:	eeb0 7a40 	vmov.f32	s14, s0
 80015d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80015e0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80015e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80015e8:	eef1 8a67 	vneg.f32	s17, s15
 80015ec:	8afb      	ldrh	r3, [r7, #22]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f6:	ee17 0a90 	vmov	r0, s15
 80015fa:	f7fe ffc5 	bl	8000588 <__aeabi_f2d>
 80015fe:	a320      	add	r3, pc, #128	; (adr r3, 8001680 <BlackmanHarrisWin+0x130>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7ff f818 	bl	8000638 <__aeabi_dmul>
 8001608:	4603      	mov	r3, r0
 800160a:	460c      	mov	r4, r1
 800160c:	4625      	mov	r5, r4
 800160e:	461c      	mov	r4, r3
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4620      	mov	r0, r4
 8001628:	4629      	mov	r1, r5
 800162a:	f7ff f92f 	bl	800088c <__aeabi_ddiv>
 800162e:	4603      	mov	r3, r0
 8001630:	460c      	mov	r4, r1
 8001632:	4618      	mov	r0, r3
 8001634:	4621      	mov	r1, r4
 8001636:	f7ff fad7 	bl	8000be8 <__aeabi_d2f>
 800163a:	4603      	mov	r3, r0
 800163c:	ee00 3a10 	vmov	s0, r3
 8001640:	f00b fb92 	bl	800cd68 <cosf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
 8001648:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001658:	edc3 7a00 	vstr	s15, [r3]
  for ( x = 0; x < len ; x++)
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	3301      	adds	r3, #1
 8001660:	82fb      	strh	r3, [r7, #22]
 8001662:	8afa      	ldrh	r2, [r7, #22]
 8001664:	88fb      	ldrh	r3, [r7, #6]
 8001666:	429a      	cmp	r2, r3
 8001668:	d386      	bcc.n	8001578 <BlackmanHarrisWin+0x28>
  }
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	ecbd 8b02 	vpop	{d8}
 8001674:	bdb0      	pop	{r4, r5, r7, pc}
 8001676:	bf00      	nop
 8001678:	54442d18 	.word	0x54442d18
 800167c:	401921fb 	.word	0x401921fb
 8001680:	54442d18 	.word	0x54442d18
 8001684:	402921fb 	.word	0x402921fb
 8001688:	3ed70a3d 	.word	0x3ed70a3d
 800168c:	3da3d70a 	.word	0x3da3d70a

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	estado = apagados;
 8001698:	4bc2      	ldr	r3, [pc, #776]	; (80019a4 <main+0x314>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800169e:	f001 f898 	bl	80027d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a2:	f000 fa8f 	bl	8001bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016a6:	f000 fbdf 	bl	8001e68 <MX_GPIO_Init>
  MX_DMA_Init();
 80016aa:	f000 fbab 	bl	8001e04 <MX_DMA_Init>
  MX_ADC1_Init();
 80016ae:	f000 faf7 	bl	8001ca0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80016b2:	f000 fb5b 	bl	8001d6c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80016b6:	f009 fb49 	bl	800ad4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	//	HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
	HAL_ADC_Start_DMA(&hadc1, (int32_t*)adc_buf, ADC_BUF_LEN);
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	49ba      	ldr	r1, [pc, #744]	; (80019a8 <main+0x318>)
 80016c0:	48ba      	ldr	r0, [pc, #744]	; (80019ac <main+0x31c>)
 80016c2:	f001 fc8f 	bl	8002fe4 <HAL_ADC_Start_DMA>

	audio_fft_M1.sampling_frequency = 133333; 					//66667; //
 80016c6:	4bba      	ldr	r3, [pc, #744]	; (80019b0 <main+0x320>)
 80016c8:	4aba      	ldr	r2, [pc, #744]	; (80019b4 <main+0x324>)
 80016ca:	601a      	str	r2, [r3, #0]
	audio_fft_M1.FFT_len = 1024;
 80016cc:	4bb8      	ldr	r3, [pc, #736]	; (80019b0 <main+0x320>)
 80016ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016d2:	605a      	str	r2, [r3, #4]
	audio_fft_M1.overlap = 0.5f;
 80016d4:	4bb6      	ldr	r3, [pc, #728]	; (80019b0 <main+0x320>)
 80016d6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80016da:	609a      	str	r2, [r3, #8]
	audio_fft_M1.win_type = AUDIO_FTT_HANNING_WIN;
 80016dc:	4bb4      	ldr	r3, [pc, #720]	; (80019b0 <main+0x320>)
 80016de:	2202      	movs	r2, #2
 80016e0:	60da      	str	r2, [r3, #12]
	audio_fft_M1.output = MAGNITUDE;
 80016e2:	4bb3      	ldr	r3, [pc, #716]	; (80019b0 <main+0x320>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	611a      	str	r2, [r3, #16]
	AUDIO_FFT_Init(&audio_fft_M1);
 80016e8:	48b1      	ldr	r0, [pc, #708]	; (80019b0 <main+0x320>)
 80016ea:	f7ff fc4d 	bl	8000f88 <AUDIO_FFT_Init>

	/* Allocate output buffer */
	FFT_Out = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 80016ee:	4bb0      	ldr	r3, [pc, #704]	; (80019b0 <main+0x320>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	085b      	lsrs	r3, r3, #1
 80016f4:	2104      	movs	r1, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00b fa18 	bl	800cb2c <calloc>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	4bad      	ldr	r3, [pc, #692]	; (80019b8 <main+0x328>)
 8001702:	601a      	str	r2, [r3, #0]
	FFT_Average = calloc(audio_fft_M1.FFT_len / 2, sizeof(float));
 8001704:	4baa      	ldr	r3, [pc, #680]	; (80019b0 <main+0x320>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	085b      	lsrs	r3, r3, #1
 800170a:	2104      	movs	r1, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f00b fa0d 	bl	800cb2c <calloc>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4ba9      	ldr	r3, [pc, #676]	; (80019bc <main+0x32c>)
 8001718:	601a      	str	r2, [r3, #0]
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (completo==1)
 800171a:	4ba9      	ldr	r3, [pc, #676]	; (80019c0 <main+0x330>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d1fb      	bne.n	800171a <main+0x8a>
		{

			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f003 f8b0 	bl	8004890 <HAL_GPIO_WritePin>

			HAL_ADC_Stop_DMA(&hadc1);
 8001730:	489e      	ldr	r0, [pc, #632]	; (80019ac <main+0x31c>)
 8001732:	f001 fcdb 	bl	80030ec <HAL_ADC_Stop_DMA>
			AUDIO_FFT_Data_Input(adc_buf, ADC_BUF_LEN, &audio_fft_M1);
 8001736:	4a9e      	ldr	r2, [pc, #632]	; (80019b0 <main+0x320>)
 8001738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800173c:	489a      	ldr	r0, [pc, #616]	; (80019a8 <main+0x318>)
 800173e:	f7ff fced 	bl	800111c <AUDIO_FFT_Data_Input>
			AUDIO_FFT_Process(&audio_fft_M1, FFT_Out);
 8001742:	4b9d      	ldr	r3, [pc, #628]	; (80019b8 <main+0x328>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4619      	mov	r1, r3
 8001748:	4899      	ldr	r0, [pc, #612]	; (80019b0 <main+0x320>)
 800174a:	f7ff fd51 	bl	80011f0 <AUDIO_FFT_Process>

			float suma = 0.0;
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001756:	6013      	str	r3, [r2, #0]
			int j=0;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
			for (int i = 0; i<(ADC_BUF_LEN); i++){
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 8001764:	e043      	b.n	80017ee <main+0x15e>
				prueba[i] = 20 * log(FFT_Out[i]/256);
 8001766:	4b94      	ldr	r3, [pc, #592]	; (80019b8 <main+0x328>)
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80019c4 <main+0x334>
 800177a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800177e:	ee16 0a90 	vmov	r0, s13
 8001782:	f7fe ff01 	bl	8000588 <__aeabi_f2d>
 8001786:	4603      	mov	r3, r0
 8001788:	460c      	mov	r4, r1
 800178a:	ec44 3b10 	vmov	d0, r3, r4
 800178e:	f00b fb2b 	bl	800cde8 <log>
 8001792:	ec51 0b10 	vmov	r0, r1, d0
 8001796:	f04f 0200 	mov.w	r2, #0
 800179a:	4b8b      	ldr	r3, [pc, #556]	; (80019c8 <main+0x338>)
 800179c:	f7fe ff4c 	bl	8000638 <__aeabi_dmul>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	4618      	mov	r0, r3
 80017a6:	4621      	mov	r1, r4
 80017a8:	f7ff f9f6 	bl	8000b98 <__aeabi_d2iz>
 80017ac:	4603      	mov	r3, r0
 80017ae:	b219      	sxth	r1, r3
 80017b0:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80017b4:	f8d7 2828 	ldr.w	r2, [r7, #2088]	; 0x828
 80017b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				suma = suma + prueba[i];
 80017bc:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80017c0:	f8d7 2828 	ldr.w	r2, [r7, #2088]	; 0x828
 80017c4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d0:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80017d4:	ed93 7a00 	vldr	s14, [r3]
 80017d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017dc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80017e0:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i<(ADC_BUF_LEN); i++){
 80017e4:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80017e8:	3301      	adds	r3, #1
 80017ea:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828
 80017ee:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 80017f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017f6:	dbb6      	blt.n	8001766 <main+0xd6>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001802:	f003 f845 	bl	8004890 <HAL_GPIO_WritePin>

			//media = (suma + suma_ant) / 2;
			//suma_ant = suma;

			switch (estado){
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <main+0x314>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b04      	cmp	r3, #4
 800180c:	f200 8196 	bhi.w	8001b3c <main+0x4ac>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <main+0x188>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	0800182d 	.word	0x0800182d
 800181c:	080018fd 	.word	0x080018fd
 8001820:	080019fd 	.word	0x080019fd
 8001824:	08001a4d 	.word	0x08001a4d
 8001828:	08001af1 	.word	0x08001af1
			case apagados:
				if ((suma<-107000.0f) & (suma>-110000.0f)){
 800182c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001830:	edd3 7a00 	vldr	s15, [r3]
 8001834:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80019cc <main+0x33c>
 8001838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	bf4c      	ite	mi
 8001842:	2301      	movmi	r3, #1
 8001844:	2300      	movpl	r3, #0
 8001846:	b2da      	uxtb	r2, r3
 8001848:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80019d0 <main+0x340>
 8001854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	bfcc      	ite	gt
 800185e:	2301      	movgt	r3, #1
 8001860:	2300      	movle	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4013      	ands	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00f      	beq.n	800188c <main+0x1fc>
					estado = principal_normal;
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <main+0x314>)
 800186e:	2201      	movs	r2, #1
 8001870:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Principal Normal\r\n");
 8001872:	463b      	mov	r3, r7
 8001874:	4a57      	ldr	r2, [pc, #348]	; (80019d4 <main+0x344>)
 8001876:	461c      	mov	r4, r3
 8001878:	4615      	mov	r5, r2
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	8022      	strh	r2, [r4, #0]
 8001884:	3402      	adds	r4, #2
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7023      	strb	r3, [r4, #0]
					estado = alimentacion_normal;
					strcpy(msg, "Alimentacion Normal\r\n");
				}
				else
					strcpy(msg, "Apagados\r\n");
				break;
 800188a:	e157      	b.n	8001b3c <main+0x4ac>
				else if ((suma<-120000.0f) & (suma>-123000.0f)){
 800188c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80019d8 <main+0x348>
 8001898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800189c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a0:	bf4c      	ite	mi
 80018a2:	2301      	movmi	r3, #1
 80018a4:	2300      	movpl	r3, #0
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80019dc <main+0x34c>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	bfcc      	ite	gt
 80018be:	2301      	movgt	r3, #1
 80018c0:	2300      	movle	r3, #0
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4013      	ands	r3, r2
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00e      	beq.n	80018ea <main+0x25a>
					estado = alimentacion_normal;
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <main+0x314>)
 80018ce:	2203      	movs	r2, #3
 80018d0:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Alimentacion Normal\r\n");
 80018d2:	463b      	mov	r3, r7
 80018d4:	4a42      	ldr	r2, [pc, #264]	; (80019e0 <main+0x350>)
 80018d6:	461c      	mov	r4, r3
 80018d8:	4615      	mov	r5, r2
 80018da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018e2:	6020      	str	r0, [r4, #0]
 80018e4:	3404      	adds	r4, #4
 80018e6:	8021      	strh	r1, [r4, #0]
				break;
 80018e8:	e128      	b.n	8001b3c <main+0x4ac>
					strcpy(msg, "Apagados\r\n");
 80018ea:	463b      	mov	r3, r7
 80018ec:	4a3d      	ldr	r2, [pc, #244]	; (80019e4 <main+0x354>)
 80018ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80018f0:	c303      	stmia	r3!, {r0, r1}
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	3302      	adds	r3, #2
 80018f6:	0c12      	lsrs	r2, r2, #16
 80018f8:	701a      	strb	r2, [r3, #0]
				break;
 80018fa:	e11f      	b.n	8001b3c <main+0x4ac>

			case principal_normal:
				if ((suma<-97000.0f) & (suma>-102000.0f)){
 80018fc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80019e8 <main+0x358>
 8001908:	eef4 7ac7 	vcmpe.f32	s15, s14
 800190c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001910:	bf4c      	ite	mi
 8001912:	2301      	movmi	r3, #1
 8001914:	2300      	movpl	r3, #0
 8001916:	b2da      	uxtb	r2, r3
 8001918:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800191c:	edd3 7a00 	vldr	s15, [r3]
 8001920:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80019ec <main+0x35c>
 8001924:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800192c:	bfcc      	ite	gt
 800192e:	2301      	movgt	r3, #1
 8001930:	2300      	movle	r3, #0
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4013      	ands	r3, r2
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00f      	beq.n	800195c <main+0x2cc>
					estado = principal_maximo;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <main+0x314>)
 800193e:	2202      	movs	r2, #2
 8001940:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Principal Maximo\r\n");
 8001942:	463b      	mov	r3, r7
 8001944:	4a2a      	ldr	r2, [pc, #168]	; (80019f0 <main+0x360>)
 8001946:	461c      	mov	r4, r3
 8001948:	4615      	mov	r5, r2
 800194a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800194c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800194e:	682b      	ldr	r3, [r5, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	8022      	strh	r2, [r4, #0]
 8001954:	3402      	adds	r4, #2
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	7023      	strb	r3, [r4, #0]
					estado = apagados;
					strcpy(msg, "Apagados\r\n");
				}
				else
					strcpy(msg, "Principal Normal\r\n");
				break;
 800195a:	e0ef      	b.n	8001b3c <main+0x4ac>
				else if (suma<-130000.0f){
 800195c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001960:	edd3 7a00 	vldr	s15, [r3]
 8001964:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80019f4 <main+0x364>
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d50b      	bpl.n	800198a <main+0x2fa>
					estado = apagados;
 8001972:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <main+0x314>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Apagados\r\n");
 8001978:	463b      	mov	r3, r7
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <main+0x354>)
 800197c:	ca07      	ldmia	r2, {r0, r1, r2}
 800197e:	c303      	stmia	r3!, {r0, r1}
 8001980:	801a      	strh	r2, [r3, #0]
 8001982:	3302      	adds	r3, #2
 8001984:	0c12      	lsrs	r2, r2, #16
 8001986:	701a      	strb	r2, [r3, #0]
				break;
 8001988:	e0d8      	b.n	8001b3c <main+0x4ac>
					strcpy(msg, "Principal Normal\r\n");
 800198a:	463b      	mov	r3, r7
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <main+0x344>)
 800198e:	461c      	mov	r4, r3
 8001990:	4615      	mov	r5, r2
 8001992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001996:	682b      	ldr	r3, [r5, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	8022      	strh	r2, [r4, #0]
 800199c:	3402      	adds	r4, #2
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	7023      	strb	r3, [r4, #0]
				break;
 80019a2:	e0cb      	b.n	8001b3c <main+0x4ac>
 80019a4:	20000228 	.word	0x20000228
 80019a8:	200003a8 	.word	0x200003a8
 80019ac:	2000022c 	.word	0x2000022c
 80019b0:	20000358 	.word	0x20000358
 80019b4:	000208d5 	.word	0x000208d5
 80019b8:	200003a4 	.word	0x200003a4
 80019bc:	200002f4 	.word	0x200002f4
 80019c0:	20000214 	.word	0x20000214
 80019c4:	43800000 	.word	0x43800000
 80019c8:	40340000 	.word	0x40340000
 80019cc:	c7d0fc00 	.word	0xc7d0fc00
 80019d0:	c7d6d800 	.word	0xc7d6d800
 80019d4:	0800dd34 	.word	0x0800dd34
 80019d8:	c7ea6000 	.word	0xc7ea6000
 80019dc:	c7f03c00 	.word	0xc7f03c00
 80019e0:	0800dd48 	.word	0x0800dd48
 80019e4:	0800dd60 	.word	0x0800dd60
 80019e8:	c7bd7400 	.word	0xc7bd7400
 80019ec:	c7c73800 	.word	0xc7c73800
 80019f0:	0800dd6c 	.word	0x0800dd6c
 80019f4:	c7fde800 	.word	0xc7fde800
 80019f8:	c7d4e400 	.word	0xc7d4e400

			case principal_maximo:
				if (suma<-109000.0f){
 80019fc:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001a00:	edd3 7a00 	vldr	s15, [r3]
 8001a04:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80019f8 <main+0x368>
 8001a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d50f      	bpl.n	8001a32 <main+0x3a2>
					estado = principal_normal;
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <main+0x4f8>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Principal Normal\r\n");
 8001a18:	463b      	mov	r3, r7
 8001a1a:	4a5c      	ldr	r2, [pc, #368]	; (8001b8c <main+0x4fc>)
 8001a1c:	461c      	mov	r4, r3
 8001a1e:	4615      	mov	r5, r2
 8001a20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	461a      	mov	r2, r3
 8001a28:	8022      	strh	r2, [r4, #0]
 8001a2a:	3402      	adds	r4, #2
 8001a2c:	0c1b      	lsrs	r3, r3, #16
 8001a2e:	7023      	strb	r3, [r4, #0]
				}
				else
					strcpy(msg, "Principal Maximo\r\n");
				break;
 8001a30:	e084      	b.n	8001b3c <main+0x4ac>
					strcpy(msg, "Principal Maximo\r\n");
 8001a32:	463b      	mov	r3, r7
 8001a34:	4a56      	ldr	r2, [pc, #344]	; (8001b90 <main+0x500>)
 8001a36:	461c      	mov	r4, r3
 8001a38:	4615      	mov	r5, r2
 8001a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a3e:	682b      	ldr	r3, [r5, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	8022      	strh	r2, [r4, #0]
 8001a44:	3402      	adds	r4, #2
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	7023      	strb	r3, [r4, #0]
				break;
 8001a4a:	e077      	b.n	8001b3c <main+0x4ac>

			case alimentacion_normal:
				if ((suma<-103000.0f) & (suma>-106000.0f)){
 8001a4c:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001a50:	edd3 7a00 	vldr	s15, [r3]
 8001a54:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001b94 <main+0x504>
 8001a58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a60:	bf4c      	ite	mi
 8001a62:	2301      	movmi	r3, #1
 8001a64:	2300      	movpl	r3, #0
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8001b98 <main+0x508>
 8001a74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a7c:	bfcc      	ite	gt
 8001a7e:	2301      	movgt	r3, #1
 8001a80:	2300      	movle	r3, #0
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <main+0x41a>
					estado = alimentacion_maximo;
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <main+0x4f8>)
 8001a8e:	2204      	movs	r2, #4
 8001a90:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Alimentacion Maximo\r\n");
 8001a92:	463b      	mov	r3, r7
 8001a94:	4a41      	ldr	r2, [pc, #260]	; (8001b9c <main+0x50c>)
 8001a96:	461c      	mov	r4, r3
 8001a98:	4615      	mov	r5, r2
 8001a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001aa2:	6020      	str	r0, [r4, #0]
 8001aa4:	3404      	adds	r4, #4
 8001aa6:	8021      	strh	r1, [r4, #0]
					estado = apagados;
					strcpy(msg, "Apagados\r\n");
				}
				else
					strcpy(msg, "Alimentacion Normal\r\n");
				break;
 8001aa8:	e048      	b.n	8001b3c <main+0x4ac>
				else if (suma<-130000.0f){
 8001aaa:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001ba0 <main+0x510>
 8001ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001abe:	d50b      	bpl.n	8001ad8 <main+0x448>
					estado = apagados;
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <main+0x4f8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Apagados\r\n");
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <main+0x514>)
 8001aca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001acc:	c303      	stmia	r3!, {r0, r1}
 8001ace:	801a      	strh	r2, [r3, #0]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	0c12      	lsrs	r2, r2, #16
 8001ad4:	701a      	strb	r2, [r3, #0]
				break;
 8001ad6:	e031      	b.n	8001b3c <main+0x4ac>
					strcpy(msg, "Alimentacion Normal\r\n");
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4a33      	ldr	r2, [pc, #204]	; (8001ba8 <main+0x518>)
 8001adc:	461c      	mov	r4, r3
 8001ade:	4615      	mov	r5, r2
 8001ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ae8:	6020      	str	r0, [r4, #0]
 8001aea:	3404      	adds	r4, #4
 8001aec:	8021      	strh	r1, [r4, #0]
				break;
 8001aee:	e025      	b.n	8001b3c <main+0x4ac>

			case alimentacion_maximo:
				if (suma<-120000.0f){
 8001af0:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001bac <main+0x51c>
 8001afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d50e      	bpl.n	8001b24 <main+0x494>
					estado = alimentacion_normal;
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <main+0x4f8>)
 8001b08:	2203      	movs	r2, #3
 8001b0a:	701a      	strb	r2, [r3, #0]
					strcpy(msg, "Alimentacion Normal\r\n");
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <main+0x518>)
 8001b10:	461c      	mov	r4, r3
 8001b12:	4615      	mov	r5, r2
 8001b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b1c:	6020      	str	r0, [r4, #0]
 8001b1e:	3404      	adds	r4, #4
 8001b20:	8021      	strh	r1, [r4, #0]
				}
				else
					strcpy(msg, "Alimentacion Maximo\r\n");
				break;
 8001b22:	e00a      	b.n	8001b3a <main+0x4aa>
					strcpy(msg, "Alimentacion Maximo\r\n");
 8001b24:	463b      	mov	r3, r7
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <main+0x50c>)
 8001b28:	461c      	mov	r4, r3
 8001b2a:	4615      	mov	r5, r2
 8001b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b30:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b34:	6020      	str	r0, [r4, #0]
 8001b36:	3404      	adds	r4, #4
 8001b38:	8021      	strh	r1, [r4, #0]
				break;
 8001b3a:	bf00      	nop

			}

			//HAL_UART_Transmit(&huart2, &msg, strlen(msg), 100000000);

			toSend[0] = 0x3e3e;
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	f643 623e 	movw	r2, #15934	; 0x3e3e
 8001b44:	801a      	strh	r2, [r3, #0]
			memcpy(&toSend[1], &prueba, sizeof(prueba));
 8001b46:	f107 0320 	add.w	r3, r7, #32
 8001b4a:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001b4e:	3302      	adds	r3, #2
 8001b50:	4611      	mov	r1, r2
 8001b52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b56:	4618      	mov	r0, r3
 8001b58:	f00b f82a 	bl	800cbb0 <memcpy>
			HAL_UART_Transmit(&huart2, &toSend, sizeof(toSend), 100000000);
 8001b5c:	f107 0120 	add.w	r1, r7, #32
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <main+0x520>)
 8001b62:	f240 4202 	movw	r2, #1026	; 0x402
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <main+0x524>)
 8001b68:	f005 fcb8 	bl	80074dc <HAL_UART_Transmit>
			HAL_Delay(100);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f000 fea5 	bl	80028bc <HAL_Delay>
//			HAL_Delay(1);

			//MX_USB_DEVICE_Init();
			//CDC_Transmit_FS(&toSend, sizeof(toSend));

			HAL_ADC_Start_DMA(&hadc1, (int32_t*)adc_buf, ADC_BUF_LEN);
 8001b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b76:	4910      	ldr	r1, [pc, #64]	; (8001bb8 <main+0x528>)
 8001b78:	4810      	ldr	r0, [pc, #64]	; (8001bbc <main+0x52c>)
 8001b7a:	f001 fa33 	bl	8002fe4 <HAL_ADC_Start_DMA>
//			HAL_Delay(10);
			completo = 0;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <main+0x530>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
		if (completo==1)
 8001b84:	e5c9      	b.n	800171a <main+0x8a>
 8001b86:	bf00      	nop
 8001b88:	20000228 	.word	0x20000228
 8001b8c:	0800dd34 	.word	0x0800dd34
 8001b90:	0800dd6c 	.word	0x0800dd6c
 8001b94:	c7c92c00 	.word	0xc7c92c00
 8001b98:	c7cf0800 	.word	0xc7cf0800
 8001b9c:	0800dd80 	.word	0x0800dd80
 8001ba0:	c7fde800 	.word	0xc7fde800
 8001ba4:	0800dd60 	.word	0x0800dd60
 8001ba8:	0800dd48 	.word	0x0800dd48
 8001bac:	c7ea6000 	.word	0xc7ea6000
 8001bb0:	05f5e100 	.word	0x05f5e100
 8001bb4:	200007a8 	.word	0x200007a8
 8001bb8:	200003a8 	.word	0x200003a8
 8001bbc:	2000022c 	.word	0x2000022c
 8001bc0:	20000214 	.word	0x20000214

08001bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0be      	sub	sp, #248	; 0xf8
 8001bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bca:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bce:	2244      	movs	r2, #68	; 0x44
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f00a fff7 	bl	800cbc6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	229c      	movs	r2, #156	; 0x9c
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f00a ffe9 	bl	800cbc6 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001bf4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001bf8:	f003 ff22 	bl	8005a40 <HAL_PWREx_ControlVoltageScaling>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SystemClock_Config+0x42>
  {
    Error_Handler();
 8001c02:	f000 fc03 	bl	800240c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c06:	2322      	movs	r3, #34	; 0x22
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c14:	2301      	movs	r3, #1
 8001c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c1a:	2340      	movs	r3, #64	; 0x40
 8001c1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c26:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 ffcc 	bl	8005bc8 <HAL_RCC_OscConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001c36:	f000 fbe9 	bl	800240c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c40:	2301      	movs	r3, #1
 8001c42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 fbd8 	bl	8006414 <HAL_RCC_ClockConfig>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001c6a:	f000 fbcf 	bl	800240c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB
 8001c6e:	f246 0302 	movw	r3, #24578	; 0x6002
 8001c72:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001c78:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c80:	2300      	movs	r3, #0
 8001c82:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fe70 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c92:	f000 fbbb 	bl	800240c <Error_Handler>
  }
}
 8001c96:	bf00      	nop
 8001c98:	37f8      	adds	r7, #248	; 0xf8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ca6:	463b      	mov	r3, r7
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cb8:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <MX_ADC1_Init+0xc0>)
 8001cba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001cc2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd6:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cd8:	2204      	movs	r2, #4
 8001cda:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf6:	4b19      	ldr	r3, [pc, #100]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d18:	4810      	ldr	r0, [pc, #64]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001d1a:	f001 f819 	bl	8002d50 <HAL_ADC_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001d24:	f000 fb72 	bl	800240c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_ADC1_Init+0xc4>)
 8001d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d2c:	2306      	movs	r3, #6
 8001d2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_ADC1_Init+0xc8>)
 8001d36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d38:	2304      	movs	r3, #4
 8001d3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_ADC1_Init+0xbc>)
 8001d46:	f001 fa3d 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001d50:	f000 fb5c 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2000022c 	.word	0x2000022c
 8001d60:	50040000 	.word	0x50040000
 8001d64:	04300002 	.word	0x04300002
 8001d68:	407f0000 	.word	0x407f0000

08001d6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d72:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <MX_USART2_UART_Init+0x94>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da8:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dae:	4b13      	ldr	r3, [pc, #76]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db4:	4811      	ldr	r0, [pc, #68]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001db6:	f005 fb41 	bl	800743c <HAL_UART_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dc0:	f000 fb24 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	480d      	ldr	r0, [pc, #52]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001dc8:	f006 f895 	bl	8007ef6 <HAL_UARTEx_SetTxFifoThreshold>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dd2:	f000 fb1b 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4808      	ldr	r0, [pc, #32]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001dda:	f006 f8ca 	bl	8007f72 <HAL_UARTEx_SetRxFifoThreshold>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001de4:	f000 fb12 	bl	800240c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <MX_USART2_UART_Init+0x90>)
 8001dea:	f006 f84b 	bl	8007e84 <HAL_UARTEx_DisableFifoMode>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001df4:	f000 fb0a 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200007a8 	.word	0x200007a8
 8001e00:	40004400 	.word	0x40004400

08001e04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6493      	str	r3, [r2, #72]	; 0x48
 8001e16:	4b13      	ldr	r3, [pc, #76]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6493      	str	r3, [r2, #72]	; 0x48
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <MX_DMA_Init+0x60>)
 8001e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	200b      	movs	r0, #11
 8001e40:	f002 f88f 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001e44:	200b      	movs	r0, #11
 8001e46:	f002 f8a8 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	200c      	movs	r0, #12
 8001e50:	f002 f887 	bl	8003f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001e54:	200c      	movs	r0, #12
 8001e56:	f002 f8a0 	bl	8003f9a <HAL_NVIC_EnableIRQ>

}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000

08001e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e7e:	4bb5      	ldr	r3, [pc, #724]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4ab4      	ldr	r2, [pc, #720]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001e84:	f043 0310 	orr.w	r3, r3, #16
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4bb2      	ldr	r3, [pc, #712]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0310 	and.w	r3, r3, #16
 8001e92:	623b      	str	r3, [r7, #32]
 8001e94:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	4baf      	ldr	r3, [pc, #700]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	4aae      	ldr	r2, [pc, #696]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea2:	4bac      	ldr	r3, [pc, #688]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eae:	4ba9      	ldr	r3, [pc, #676]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	4aa8      	ldr	r2, [pc, #672]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eba:	4ba6      	ldr	r3, [pc, #664]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	4ba3      	ldr	r3, [pc, #652]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	4aa2      	ldr	r2, [pc, #648]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ed2:	4ba0      	ldr	r3, [pc, #640]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	4b9d      	ldr	r3, [pc, #628]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	4a9c      	ldr	r2, [pc, #624]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eea:	4b9a      	ldr	r3, [pc, #616]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b97      	ldr	r3, [pc, #604]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a96      	ldr	r2, [pc, #600]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001efc:	f043 0308 	orr.w	r3, r3, #8
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b94      	ldr	r3, [pc, #592]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f0e:	4b91      	ldr	r3, [pc, #580]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f12:	4a90      	ldr	r2, [pc, #576]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001f26:	f003 fe3f 	bl	8005ba8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f2a:	4b8a      	ldr	r3, [pc, #552]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a89      	ldr	r2, [pc, #548]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f30:	f043 0320 	orr.w	r3, r3, #32
 8001f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f36:	4b87      	ldr	r3, [pc, #540]	; (8002154 <MX_GPIO_Init+0x2ec>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15|BLE_RST_Pin, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8001f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4c:	f002 fca0 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f242 0102 	movw	r1, #8194	; 0x2002
 8001f56:	4880      	ldr	r0, [pc, #512]	; (8002158 <MX_GPIO_Init+0x2f0>)
 8001f58:	f002 fc9a 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f648 0181 	movw	r1, #34945	; 0x8881
 8001f62:	487e      	ldr	r0, [pc, #504]	; (800215c <MX_GPIO_Init+0x2f4>)
 8001f64:	f002 fc94 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|BLE_SPI_CS_Pin
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f241 6121 	movw	r1, #5665	; 0x1621
 8001f6e:	487c      	ldr	r0, [pc, #496]	; (8002160 <MX_GPIO_Init+0x2f8>)
 8001f70:	f002 fc8e 	bl	8004890 <HAL_GPIO_WritePin>
                          |SEL1_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	487a      	ldr	r0, [pc, #488]	; (8002164 <MX_GPIO_Init+0x2fc>)
 8001f7a:	f002 fc89 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f247 5128 	movw	r1, #29992	; 0x7528
 8001f84:	4878      	ldr	r0, [pc, #480]	; (8002168 <MX_GPIO_Init+0x300>)
 8001f86:	f002 fc83 	bl	8004890 <HAL_GPIO_WritePin>
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001f90:	4876      	ldr	r0, [pc, #472]	; (800216c <MX_GPIO_Init+0x304>)
 8001f92:	f002 fc7d 	bl	8004890 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 8001f96:	f240 4301 	movw	r3, #1025	; 0x401
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	4619      	mov	r1, r3
 8001faa:	486b      	ldr	r0, [pc, #428]	; (8002158 <MX_GPIO_Init+0x2f0>)
 8001fac:	f002 fade 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 8001fb0:	f244 3301 	movw	r3, #17153	; 0x4301
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4869      	ldr	r0, [pc, #420]	; (800216c <MX_GPIO_Init+0x304>)
 8001fc6:	f002 fad1 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 8001fca:	2308      	movs	r3, #8
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4864      	ldr	r0, [pc, #400]	; (8002170 <MX_GPIO_Init+0x308>)
 8001fde:	f002 fac5 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI3_MISO_Pin SPI3_MOSI_Pin SPI3_CLK_Pin */
  GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001fe2:	2338      	movs	r3, #56	; 0x38
 8001fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ff2:	2306      	movs	r3, #6
 8001ff4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	485b      	ldr	r0, [pc, #364]	; (800216c <MX_GPIO_Init+0x304>)
 8001ffe:	f002 fab5 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 8002002:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002014:	230c      	movs	r3, #12
 8002016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800201c:	4619      	mov	r1, r3
 800201e:	4851      	ldr	r0, [pc, #324]	; (8002164 <MX_GPIO_Init+0x2fc>)
 8002020:	f002 faa4 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8002024:	f64c 1308 	movw	r3, #51464	; 0xc908
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800202a:	4b52      	ldr	r3, [pc, #328]	; (8002174 <MX_GPIO_Init+0x30c>)
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	4847      	ldr	r0, [pc, #284]	; (8002158 <MX_GPIO_Init+0x2f0>)
 800203a:	f002 fa97 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 800203e:	2302      	movs	r3, #2
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800204e:	2305      	movs	r3, #5
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8002052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002056:	4619      	mov	r1, r3
 8002058:	4840      	ldr	r0, [pc, #256]	; (800215c <MX_GPIO_Init+0x2f4>)
 800205a:	f002 fa87 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 BLE_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_15|BLE_RST_Pin;
 800205e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002062:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	4619      	mov	r1, r3
 8002076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207a:	f002 fa77 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 800207e:	23f4      	movs	r3, #244	; 0xf4
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208a:	2300      	movs	r3, #0
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800208e:	230d      	movs	r3, #13
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002096:	4619      	mov	r1, r3
 8002098:	482f      	ldr	r0, [pc, #188]	; (8002158 <MX_GPIO_Init+0x2f0>)
 800209a:	f002 fa67 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 800209e:	f242 0302 	movw	r3, #8194	; 0x2002
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b4:	4619      	mov	r1, r3
 80020b6:	4828      	ldr	r0, [pc, #160]	; (8002158 <MX_GPIO_Init+0x2f0>)
 80020b8:	f002 fa58 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 80020bc:	f648 0381 	movw	r3, #34945	; 0x8881
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	2300      	movs	r3, #0
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4821      	ldr	r0, [pc, #132]	; (800215c <MX_GPIO_Init+0x2f4>)
 80020d6:	f002 fa49 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 80020da:	f240 6313 	movw	r3, #1555	; 0x613
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020e0:	2303      	movs	r3, #3
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f2:	f002 fa3b 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80020f6:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002100:	2302      	movs	r3, #2
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	2303      	movs	r3, #3
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002108:	2306      	movs	r3, #6
 800210a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800210c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002110:	4619      	mov	r1, r3
 8002112:	4816      	ldr	r0, [pc, #88]	; (800216c <MX_GPIO_Init+0x304>)
 8002114:	f002 fa2a 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12 PG10 PG9 BLE_SPI_CS_Pin
                           SEL1_2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9|BLE_SPI_CS_Pin
 8002118:	f241 6321 	movw	r3, #5665	; 0x1621
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
                          |SEL1_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800212a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212e:	4619      	mov	r1, r3
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <MX_GPIO_Init+0x2f8>)
 8002132:	f002 fa1b 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002136:	2304      	movs	r3, #4
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213a:	2302      	movs	r3, #2
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002146:	230c      	movs	r3, #12
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214e:	4619      	mov	r1, r3
 8002150:	e012      	b.n	8002178 <MX_GPIO_Init+0x310>
 8002152:	bf00      	nop
 8002154:	40021000 	.word	0x40021000
 8002158:	48001000 	.word	0x48001000
 800215c:	48000c00 	.word	0x48000c00
 8002160:	48001800 	.word	0x48001800
 8002164:	48000800 	.word	0x48000800
 8002168:	48001400 	.word	0x48001400
 800216c:	48000400 	.word	0x48000400
 8002170:	48001c00 	.word	0x48001c00
 8002174:	10110000 	.word	0x10110000
 8002178:	4890      	ldr	r0, [pc, #576]	; (80023bc <MX_GPIO_Init+0x554>)
 800217a:	f002 f9f7 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 800217e:	2340      	movs	r3, #64	; 0x40
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	488a      	ldr	r0, [pc, #552]	; (80023c0 <MX_GPIO_Init+0x558>)
 8002196:	f002 f9e9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 800219a:	2307      	movs	r3, #7
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800219e:	2312      	movs	r3, #18
 80021a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a2:	2301      	movs	r3, #1
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a6:	2303      	movs	r3, #3
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021aa:	2304      	movs	r3, #4
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021b2:	4619      	mov	r1, r3
 80021b4:	4883      	ldr	r0, [pc, #524]	; (80023c4 <MX_GPIO_Init+0x55c>)
 80021b6:	f002 f9d9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin CS_DHC_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80021ba:	f247 5328 	movw	r3, #29992	; 0x7528
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|CS_DHC_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	487c      	ldr	r0, [pc, #496]	; (80023c4 <MX_GPIO_Init+0x55c>)
 80021d4:	f002 f9ca 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80021d8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e2:	2301      	movs	r3, #1
 80021e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ea:	2304      	movs	r3, #4
 80021ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f2:	4619      	mov	r1, r3
 80021f4:	4874      	ldr	r0, [pc, #464]	; (80023c8 <MX_GPIO_Init+0x560>)
 80021f6:	f002 f9b9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 80021fa:	2340      	movs	r3, #64	; 0x40
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002206:	2302      	movs	r3, #2
 8002208:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800220a:	2302      	movs	r3, #2
 800220c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002212:	4619      	mov	r1, r3
 8002214:	486b      	ldr	r0, [pc, #428]	; (80023c4 <MX_GPIO_Init+0x55c>)
 8002216:	f002 f9a9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 800221a:	f44f 7324 	mov.w	r3, #656	; 0x290
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <MX_GPIO_Init+0x564>)
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222c:	4619      	mov	r1, r3
 800222e:	4865      	ldr	r0, [pc, #404]	; (80023c4 <MX_GPIO_Init+0x55c>)
 8002230:	f002 f99c 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8002234:	231c      	movs	r3, #28
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002240:	2303      	movs	r3, #3
 8002242:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002244:	2305      	movs	r3, #5
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800224c:	4619      	mov	r1, r3
 800224e:	485e      	ldr	r0, [pc, #376]	; (80023c8 <MX_GPIO_Init+0x560>)
 8002250:	f002 f98c 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8002254:	2342      	movs	r3, #66	; 0x42
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <MX_GPIO_Init+0x564>)
 800225a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002264:	4619      	mov	r1, r3
 8002266:	4858      	ldr	r0, [pc, #352]	; (80023c8 <MX_GPIO_Init+0x560>)
 8002268:	f002 f980 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 800226c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002272:	2312      	movs	r3, #18
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002276:	2301      	movs	r3, #1
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227a:	2303      	movs	r3, #3
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800227e:	2304      	movs	r3, #4
 8002280:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002286:	4619      	mov	r1, r3
 8002288:	484c      	ldr	r0, [pc, #304]	; (80023bc <MX_GPIO_Init+0x554>)
 800228a:	f002 f96f 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800228e:	230c      	movs	r3, #12
 8002290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002292:	2302      	movs	r3, #2
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002296:	2300      	movs	r3, #0
 8002298:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800229a:	2303      	movs	r3, #3
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800229e:	2305      	movs	r3, #5
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a6:	4619      	mov	r1, r3
 80022a8:	4845      	ldr	r0, [pc, #276]	; (80023c0 <MX_GPIO_Init+0x558>)
 80022aa:	f002 f95f 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 80022ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4843      	ldr	r0, [pc, #268]	; (80023d0 <MX_GPIO_Init+0x568>)
 80022c4:	f002 f952 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 80022c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ce:	2300      	movs	r3, #0
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022da:	4619      	mov	r1, r3
 80022dc:	4839      	ldr	r0, [pc, #228]	; (80023c4 <MX_GPIO_Init+0x55c>)
 80022de:	f002 f945 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 80022e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <MX_GPIO_Init+0x564>)
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f4:	4619      	mov	r1, r3
 80022f6:	4831      	ldr	r0, [pc, #196]	; (80023bc <MX_GPIO_Init+0x554>)
 80022f8:	f002 f938 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 80022fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800230e:	2307      	movs	r3, #7
 8002310:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002316:	4619      	mov	r1, r3
 8002318:	4828      	ldr	r0, [pc, #160]	; (80023bc <MX_GPIO_Init+0x554>)
 800231a:	f002 f927 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 800231e:	f242 0302 	movw	r3, #8194	; 0x2002
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800232c:	2303      	movs	r3, #3
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002330:	2307      	movs	r3, #7
 8002332:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002338:	4619      	mov	r1, r3
 800233a:	4825      	ldr	r0, [pc, #148]	; (80023d0 <MX_GPIO_Init+0x568>)
 800233c:	f002 f916 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8002340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800234a:	2302      	movs	r3, #2
 800234c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8002352:	2306      	movs	r3, #6
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8002356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235a:	4619      	mov	r1, r3
 800235c:	481d      	ldr	r0, [pc, #116]	; (80023d4 <MX_GPIO_Init+0x56c>)
 800235e:	f002 f905 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 8002362:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002368:	2301      	movs	r3, #1
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002378:	4619      	mov	r1, r3
 800237a:	4815      	ldr	r0, [pc, #84]	; (80023d0 <MX_GPIO_Init+0x568>)
 800237c:	f002 f8f6 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 8002380:	2304      	movs	r3, #4
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_GPIO_Init+0x564>)
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 800238c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002390:	4619      	mov	r1, r3
 8002392:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002396:	f002 f8e9 	bl	800456c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 800239a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a0:	2303      	movs	r3, #3
 80023a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	4809      	ldr	r0, [pc, #36]	; (80023d4 <MX_GPIO_Init+0x56c>)
 80023b0:	f002 f8dc 	bl	800456c <HAL_GPIO_Init>

}
 80023b4:	bf00      	nop
 80023b6:	3738      	adds	r7, #56	; 0x38
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	48000c00 	.word	0x48000c00
 80023c0:	48000800 	.word	0x48000800
 80023c4:	48001400 	.word	0x48001400
 80023c8:	48001800 	.word	0x48001800
 80023cc:	10110000 	.word	0x10110000
 80023d0:	48000400 	.word	0x48000400
 80023d4:	48001000 	.word	0x48001000

080023d8 <HAL_ADC_ConvHalfCpltCallback>:

	// Toggle LD2
	HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
}
//Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	// Toggle LD2

//	completo = 1;
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ADC_ConvCpltCallback>:

//Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	// Toggle LD2
	//HAL_GPIO_TogglePin(GPIOE, LED1_Pin);
	completo = 1;
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <HAL_ADC_ConvCpltCallback+0x1c>)
 80023f6:	2201      	movs	r2, #1
 80023f8:	701a      	strb	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000214 	.word	0x20000214

0800240c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002410:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002412:	e7fe      	b.n	8002412 <Error_Handler+0x6>

08002414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_MspInit+0x44>)
 800241c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_MspInit+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6613      	str	r3, [r2, #96]	; 0x60
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_MspInit+0x44>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	4b09      	ldr	r3, [pc, #36]	; (8002458 <HAL_MspInit+0x44>)
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	4a08      	ldr	r2, [pc, #32]	; (8002458 <HAL_MspInit+0x44>)
 8002438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243c:	6593      	str	r3, [r2, #88]	; 0x58
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_MspInit+0x44>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2a      	ldr	r2, [pc, #168]	; (8002524 <HAL_ADC_MspInit+0xc8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d14e      	bne.n	800251c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800247e:	4b2a      	ldr	r3, [pc, #168]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 8002480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002482:	4a29      	ldr	r2, [pc, #164]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 8002484:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800248a:	4b27      	ldr	r3, [pc, #156]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 8002498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249a:	4a23      	ldr	r2, [pc, #140]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 800249c:	f043 0304 	orr.w	r3, r3, #4
 80024a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024a2:	4b21      	ldr	r3, [pc, #132]	; (8002528 <HAL_ADC_MspInit+0xcc>)
 80024a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin;
 80024ae:	2303      	movs	r3, #3
 80024b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80024b2:	230b      	movs	r3, #11
 80024b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	481a      	ldr	r0, [pc, #104]	; (800252c <HAL_ADC_MspInit+0xd0>)
 80024c2:	f002 f853 	bl	800456c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_ADC_MspInit+0xd8>)
 80024ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80024cc:	4b18      	ldr	r3, [pc, #96]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024ce:	2205      	movs	r2, #5
 80024d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80024de:	4b14      	ldr	r3, [pc, #80]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024e0:	2280      	movs	r2, #128	; 0x80
 80024e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024ec:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024f6:	2220      	movs	r2, #32
 80024f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 8002502:	f001 fd65 	bl	8003fd0 <HAL_DMA_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800250c:	f7ff ff7e 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a07      	ldr	r2, [pc, #28]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 8002514:	651a      	str	r2, [r3, #80]	; 0x50
 8002516:	4a06      	ldr	r2, [pc, #24]	; (8002530 <HAL_ADC_MspInit+0xd4>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800251c:	bf00      	nop
 800251e:	3728      	adds	r7, #40	; 0x28
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	50040000 	.word	0x50040000
 8002528:	40021000 	.word	0x40021000
 800252c:	48000800 	.word	0x48000800
 8002530:	200002f8 	.word	0x200002f8
 8002534:	40020008 	.word	0x40020008

08002538 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08a      	sub	sp, #40	; 0x28
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0314 	add.w	r3, r7, #20
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_UART_MspInit+0xcc>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d150      	bne.n	80025fc <HAL_UART_MspInit+0xc4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_UART_MspInit+0xd0>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a2a      	ldr	r2, [pc, #168]	; (8002608 <HAL_UART_MspInit+0xd0>)
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
 8002566:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_UART_MspInit+0xd0>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002572:	4b25      	ldr	r3, [pc, #148]	; (8002608 <HAL_UART_MspInit+0xd0>)
 8002574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002576:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_UART_MspInit+0xd0>)
 8002578:	f043 0308 	orr.w	r3, r3, #8
 800257c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <HAL_UART_MspInit+0xd0>)
 8002580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 800258a:	2370      	movs	r3, #112	; 0x70
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258e:	2302      	movs	r3, #2
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800259a:	2307      	movs	r3, #7
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	4819      	ldr	r0, [pc, #100]	; (800260c <HAL_UART_MspInit+0xd4>)
 80025a6:	f001 ffe1 	bl	800456c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_UART_MspInit+0xdc>)
 80025ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025b2:	221b      	movs	r2, #27
 80025b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025b8:	2210      	movs	r2, #16
 80025ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025c4:	2280      	movs	r2, #128	; 0x80
 80025c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80025e0:	480b      	ldr	r0, [pc, #44]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025e2:	f001 fcf5 	bl	8003fd0 <HAL_DMA_Init>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 80025ec:	f7ff ff0e 	bl	800240c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025f4:	675a      	str	r2, [r3, #116]	; 0x74
 80025f6:	4a06      	ldr	r2, [pc, #24]	; (8002610 <HAL_UART_MspInit+0xd8>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025fc:	bf00      	nop
 80025fe:	3728      	adds	r7, #40	; 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40004400 	.word	0x40004400
 8002608:	40021000 	.word	0x40021000
 800260c:	48000c00 	.word	0x48000c00
 8002610:	20000294 	.word	0x20000294
 8002614:	4002001c 	.word	0x4002001c

08002618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800261c:	e7fe      	b.n	800261c <NMI_Handler+0x4>

0800261e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <HardFault_Handler+0x4>

08002624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <MemManage_Handler+0x4>

0800262a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262e:	e7fe      	b.n	800262e <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	e7fe      	b.n	8002634 <UsageFault_Handler+0x4>

08002636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002664:	f000 f90a 	bl	800287c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	bd80      	pop	{r7, pc}

0800266c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <DMA1_Channel1_IRQHandler+0x10>)
 8002672:	f001 fe2c 	bl	80042ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200002f8 	.word	0x200002f8

08002680 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <DMA1_Channel2_IRQHandler+0x10>)
 8002686:	f001 fe22 	bl	80042ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000294 	.word	0x20000294

08002694 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002698:	4802      	ldr	r0, [pc, #8]	; (80026a4 <OTG_FS_IRQHandler+0x10>)
 800269a:	f002 fa64 	bl	8004b66 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800269e:	bf00      	nop
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	20001d08 	.word	0x20001d08

080026a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b0:	4a14      	ldr	r2, [pc, #80]	; (8002704 <_sbrk+0x5c>)
 80026b2:	4b15      	ldr	r3, [pc, #84]	; (8002708 <_sbrk+0x60>)
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <_sbrk+0x64>)
 80026c6:	4a12      	ldr	r2, [pc, #72]	; (8002710 <_sbrk+0x68>)
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <_sbrk+0x64>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d207      	bcs.n	80026e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026d8:	f00a fa30 	bl	800cb3c <__errno>
 80026dc:	4602      	mov	r2, r0
 80026de:	230c      	movs	r3, #12
 80026e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	e009      	b.n	80026fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <_sbrk+0x64>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	4a05      	ldr	r2, [pc, #20]	; (800270c <_sbrk+0x64>)
 80026f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fa:	68fb      	ldr	r3, [r7, #12]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	200a0000 	.word	0x200a0000
 8002708:	00000400 	.word	0x00000400
 800270c:	20000218 	.word	0x20000218
 8002710:	20002118 	.word	0x20002118

08002714 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002718:	4b17      	ldr	r3, [pc, #92]	; (8002778 <SystemInit+0x64>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a16      	ldr	r2, [pc, #88]	; (8002778 <SystemInit+0x64>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <SystemInit+0x68>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a13      	ldr	r2, [pc, #76]	; (800277c <SystemInit+0x68>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <SystemInit+0x68>)
 8002736:	2200      	movs	r2, #0
 8002738:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800273a:	4b10      	ldr	r3, [pc, #64]	; (800277c <SystemInit+0x68>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a0f      	ldr	r2, [pc, #60]	; (800277c <SystemInit+0x68>)
 8002740:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002744:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002748:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <SystemInit+0x68>)
 800274c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002750:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002752:	4b0a      	ldr	r3, [pc, #40]	; (800277c <SystemInit+0x68>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a09      	ldr	r2, [pc, #36]	; (800277c <SystemInit+0x68>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800275c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800275e:	4b07      	ldr	r3, [pc, #28]	; (800277c <SystemInit+0x68>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SystemInit+0x64>)
 8002766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800276a:	609a      	str	r2, [r3, #8]
#endif
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00
 800277c:	40021000 	.word	0x40021000

08002780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002784:	f7ff ffc6 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800278a:	e003      	b.n	8002794 <LoopCopyDataInit>

0800278c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800278e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002792:	3104      	adds	r1, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800279a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800279c:	d3f6      	bcc.n	800278c <CopyDataInit>
	ldr	r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	; (80027c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027a0:	e002      	b.n	80027a8 <LoopFillZerobss>

080027a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027a4:	f842 3b04 	str.w	r3, [r2], #4

080027a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027a8:	4b08      	ldr	r3, [pc, #32]	; (80027cc <LoopForever+0x16>)
	cmp	r2, r3
 80027aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027ac:	d3f9      	bcc.n	80027a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f00a f9cb 	bl	800cb48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027b2:	f7fe ff6d 	bl	8001690 <main>

080027b6 <LoopForever>:

LoopForever:
    b LoopForever
 80027b6:	e7fe      	b.n	80027b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027b8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 80027bc:	08021694 	.word	0x08021694
	ldr	r0, =_sdata
 80027c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027c4:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 80027c8:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 80027cc:	20002114 	.word	0x20002114

080027d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC1_IRQHandler>

080027d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027dc:	2003      	movs	r0, #3
 80027de:	f001 fbb5 	bl	8003f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027e2:	2000      	movs	r0, #0
 80027e4:	f000 f80e 	bl	8002804 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	e001      	b.n	80027f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027f4:	f7ff fe0e 	bl	8002414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027f8:	79fb      	ldrb	r3, [r7, #7]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002810:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_InitTick+0x6c>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d023      	beq.n	8002860 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <HAL_InitTick+0x70>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b14      	ldr	r3, [pc, #80]	; (8002870 <HAL_InitTick+0x6c>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	4619      	mov	r1, r3
 8002822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002826:	fbb3 f3f1 	udiv	r3, r3, r1
 800282a:	fbb2 f3f3 	udiv	r3, r2, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fbc1 	bl	8003fb6 <HAL_SYSTICK_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10f      	bne.n	800285a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d809      	bhi.n	8002854 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f001 fb8b 	bl	8003f62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800284c:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <HAL_InitTick+0x74>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e007      	b.n	8002864 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e004      	b.n	8002864 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e001      	b.n	8002864 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002864:	7bfb      	ldrb	r3, [r7, #15]
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000008 	.word	0x20000008
 8002874:	20000000 	.word	0x20000000
 8002878:	20000004 	.word	0x20000004

0800287c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <HAL_IncTick+0x20>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_IncTick+0x24>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <HAL_IncTick+0x24>)
 800288e:	6013      	str	r3, [r2, #0]
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20000008 	.word	0x20000008
 80028a0:	20000834 	.word	0x20000834

080028a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return uwTick;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <HAL_GetTick+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000834 	.word	0x20000834

080028bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c4:	f7ff ffee 	bl	80028a4 <HAL_GetTick>
 80028c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d005      	beq.n	80028e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <HAL_Delay+0x40>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028e2:	bf00      	nop
 80028e4:	f7ff ffde 	bl	80028a4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d8f7      	bhi.n	80028e4 <HAL_Delay+0x28>
  {
  }
}
 80028f4:	bf00      	nop
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000008 	.word	0x20000008

08002900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	431a      	orrs	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3360      	adds	r3, #96	; 0x60
 800297a:	461a      	mov	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <LL_ADC_SetOffset+0x44>)
 800298a:	4013      	ands	r3, r2
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	4313      	orrs	r3, r2
 8002998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029a0:	bf00      	nop
 80029a2:	371c      	adds	r7, #28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	03fff000 	.word	0x03fff000

080029b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3360      	adds	r3, #96	; 0x60
 80029be:	461a      	mov	r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	3360      	adds	r3, #96	; 0x60
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a06:	bf00      	nop
 8002a08:	371c      	adds	r7, #28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	615a      	str	r2, [r3, #20]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b087      	sub	sp, #28
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3330      	adds	r3, #48	; 0x30
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	f003 030c 	and.w	r3, r3, #12
 8002a7a:	4413      	add	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 031f 	and.w	r3, r3, #31
 8002a88:	211f      	movs	r1, #31
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0e9b      	lsrs	r3, r3, #26
 8002a96:	f003 011f 	and.w	r1, r3, #31
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3314      	adds	r3, #20
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	0e5b      	lsrs	r3, r3, #25
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	4413      	add	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	0d1b      	lsrs	r3, r3, #20
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2107      	movs	r1, #7
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	401a      	ands	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0d1b      	lsrs	r3, r3, #20
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	431a      	orrs	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f003 0318 	and.w	r3, r3, #24
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002b30:	40d9      	lsrs	r1, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	400b      	ands	r3, r1
 8002b36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	0007ffff 	.word	0x0007ffff

08002b54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6093      	str	r3, [r2, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b8c:	d101      	bne.n	8002b92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002bb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c04:	f043 0201 	orr.w	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c2c:	f043 0202 	orr.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f003 0301 	and.w	r3, r3, #1
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <LL_ADC_IsEnabled+0x18>
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <LL_ADC_IsEnabled+0x1a>
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d101      	bne.n	8002c7e <LL_ADC_IsDisableOngoing+0x18>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <LL_ADC_IsDisableOngoing+0x1a>
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca0:	f043 0204 	orr.w	r2, r3, #4
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc8:	f043 0210 	orr.w	r2, r3, #16
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d101      	bne.n	8002cf4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d101      	bne.n	8002d42 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e12d      	b.n	8002fc6 <HAL_ADC_Init+0x276>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff fb6f 	bl	800245c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fef1 	bl	8002b78 <LL_ADC_IsDeepPowerDownEnabled>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fed7 	bl	8002b54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff0c 	bl	8002bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d113      	bne.n	8002dde <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fef0 	bl	8002ba0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002dc0:	4b83      	ldr	r3, [pc, #524]	; (8002fd0 <HAL_ADC_Init+0x280>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	099b      	lsrs	r3, r3, #6
 8002dc6:	4a83      	ldr	r2, [pc, #524]	; (8002fd4 <HAL_ADC_Init+0x284>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dd0:	e002      	b.n	8002dd8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f9      	bne.n	8002dd2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fef0 	bl	8002bc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10d      	bne.n	8002e0a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df2:	f043 0210 	orr.w	r2, r3, #16
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	f043 0201 	orr.w	r2, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff64 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 8002e14:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1a:	f003 0310 	and.w	r3, r3, #16
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f040 80c8 	bne.w	8002fb4 <HAL_ADC_Init+0x264>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 80c4 	bne.w	8002fb4 <HAL_ADC_Init+0x264>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e30:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e34:	f043 0202 	orr.w	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fefd 	bl	8002c40 <LL_ADC_IsEnabled>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10b      	bne.n	8002e64 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4c:	4862      	ldr	r0, [pc, #392]	; (8002fd8 <HAL_ADC_Init+0x288>)
 8002e4e:	f7ff fef7 	bl	8002c40 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d105      	bne.n	8002e64 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	485f      	ldr	r0, [pc, #380]	; (8002fdc <HAL_ADC_Init+0x28c>)
 8002e60:	f7ff fd4e 	bl	8002900 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	7e5b      	ldrb	r3, [r3, #25]
 8002e68:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e6e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002e74:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002e7a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e82:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	3b01      	subs	r3, #1
 8002e98:	045b      	lsls	r3, r3, #17
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d009      	beq.n	8002ebc <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eac:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_ADC_Init+0x290>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff01 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 8002eda:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff22 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 8002ee6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d140      	bne.n	8002f70 <HAL_ADC_Init+0x220>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d13d      	bne.n	8002f70 <HAL_ADC_Init+0x220>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
 8002efc:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002efe:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f06:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f16:	f023 0306 	bic.w	r3, r3, #6
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	69b9      	ldr	r1, [r7, #24]
 8002f20:	430b      	orrs	r3, r1
 8002f22:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d118      	bne.n	8002f60 <HAL_ADC_Init+0x210>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f50:	430a      	orrs	r2, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	e007      	b.n	8002f70 <HAL_ADC_Init+0x220>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0201 	bic.w	r2, r2, #1
 8002f6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <HAL_ADC_Init+0x242>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	f023 010f 	bic.w	r1, r3, #15
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	1e5a      	subs	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f90:	e007      	b.n	8002fa2 <HAL_ADC_Init+0x252>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 020f 	bic.w	r2, r2, #15
 8002fa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	f023 0303 	bic.w	r3, r3, #3
 8002faa:	f043 0201 	orr.w	r2, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	659a      	str	r2, [r3, #88]	; 0x58
 8002fb2:	e007      	b.n	8002fc4 <HAL_ADC_Init+0x274>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	053e2d63 	.word	0x053e2d63
 8002fd8:	50040000 	.word	0x50040000
 8002fdc:	50040300 	.word	0x50040300
 8002fe0:	fff0c007 	.word	0xfff0c007

08002fe4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fe71 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d167      	bne.n	80030d0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_ADC_Start_DMA+0x2a>
 800300a:	2302      	movs	r3, #2
 800300c:	e063      	b.n	80030d6 <HAL_ADC_Start_DMA+0xf2>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 fd82 	bl	8003b20 <ADC_Enable>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d14f      	bne.n	80030c6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800302e:	f023 0301 	bic.w	r3, r3, #1
 8003032:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f023 0206 	bic.w	r2, r3, #6
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	65da      	str	r2, [r3, #92]	; 0x5c
 8003052:	e002      	b.n	800305a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <HAL_ADC_Start_DMA+0xfc>)
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	4a1f      	ldr	r2, [pc, #124]	; (80030e4 <HAL_ADC_Start_DMA+0x100>)
 8003068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800306e:	4a1e      	ldr	r2, [pc, #120]	; (80030e8 <HAL_ADC_Start_DMA+0x104>)
 8003070:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	221c      	movs	r2, #28
 8003078:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0210 	orr.w	r2, r2, #16
 8003090:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3340      	adds	r3, #64	; 0x40
 80030ac:	4619      	mov	r1, r3
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f001 f835 	bl	8004120 <HAL_DMA_Start_IT>
 80030b6:	4603      	mov	r3, r0
 80030b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fde4 	bl	8002c8c <LL_ADC_REG_StartConversion>
 80030c4:	e006      	b.n	80030d4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80030ce:	e001      	b.n	80030d4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
 80030d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08003c85 	.word	0x08003c85
 80030e4:	08003d5d 	.word	0x08003d5d
 80030e8:	08003d79 	.word	0x08003d79

080030ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_Stop_DMA+0x16>
 80030fe:	2302      	movs	r3, #2
 8003100:	e051      	b.n	80031a6 <HAL_ADC_Stop_DMA+0xba>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800310a:	2103      	movs	r1, #3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fc53 	bl	80039b8 <ADC_ConversionStop>
 8003112:	4603      	mov	r3, r0
 8003114:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13f      	bne.n	800319c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b02      	cmp	r3, #2
 8003138:	d10f      	bne.n	800315a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f869 	bl	8004216 <HAL_DMA_Abort>
 8003144:	4603      	mov	r3, r0
 8003146:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d005      	beq.n	800315a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0210 	bic.w	r2, r2, #16
 8003168:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800316a:	7bfb      	ldrb	r3, [r7, #15]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 fd2f 	bl	8003bd4 <ADC_Disable>
 8003176:	4603      	mov	r3, r0
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	e002      	b.n	8003182 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fd29 	bl	8003bd4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d109      	bne.n	800319c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	f043 0201 	orr.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b0b6      	sub	sp, #216	; 0xd8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x22>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e3d4      	b.n	8003990 <HAL_ADC_ConfigChannel+0x7cc>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fd72 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 83b9 	bne.w	8003972 <HAL_ADC_ConfigChannel+0x7ae>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d824      	bhi.n	8003252 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	3b02      	subs	r3, #2
 800320e:	2b03      	cmp	r3, #3
 8003210:	d81b      	bhi.n	800324a <HAL_ADC_ConfigChannel+0x86>
 8003212:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_ADC_ConfigChannel+0x54>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	08003231 	.word	0x08003231
 8003220:	08003239 	.word	0x08003239
 8003224:	08003241 	.word	0x08003241
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	220c      	movs	r2, #12
 800322c:	605a      	str	r2, [r3, #4]
          break;
 800322e:	e011      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2212      	movs	r2, #18
 8003234:	605a      	str	r2, [r3, #4]
          break;
 8003236:	e00d      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2218      	movs	r2, #24
 800323c:	605a      	str	r2, [r3, #4]
          break;
 800323e:	e009      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003246:	605a      	str	r2, [r3, #4]
          break;
 8003248:	e004      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2206      	movs	r2, #6
 800324e:	605a      	str	r2, [r3, #4]
          break;
 8003250:	e000      	b.n	8003254 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003252:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	461a      	mov	r2, r3
 8003262:	f7ff fbfc 	bl	8002a5e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fd36 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 8003270:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fd56 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 800327e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003282:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003286:	2b00      	cmp	r3, #0
 8003288:	f040 81c1 	bne.w	800360e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800328c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003290:	2b00      	cmp	r3, #0
 8003292:	f040 81bc 	bne.w	800360e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800329e:	d10f      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2200      	movs	r2, #0
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7ff fc03 	bl	8002ab6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fbaa 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonConfig>
 80032be:	e00e      	b.n	80032de <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6818      	ldr	r0, [r3, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	461a      	mov	r2, r3
 80032ce:	f7ff fbf2 	bl	8002ab6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2100      	movs	r1, #0
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fb9a 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	08db      	lsrs	r3, r3, #3
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d00a      	beq.n	8003316 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6919      	ldr	r1, [r3, #16]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003310:	f7ff fb2a 	bl	8002968 <LL_ADC_SetOffset>
 8003314:	e17b      	b.n	800360e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb47 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_ADC_ConfigChannel+0x17e>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2100      	movs	r1, #0
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff fb3c 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	0e9b      	lsrs	r3, r3, #26
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	e01e      	b.n	8003380 <HAL_ADC_ConfigChannel+0x1bc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff fb31 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800334e:	4603      	mov	r3, r0
 8003350:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003360:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e004      	b.n	800337e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8003374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003378:	fab3 f383 	clz	r3, r3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1d4>
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0e9b      	lsrs	r3, r3, #26
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	e018      	b.n	80033ca <HAL_ADC_ConfigChannel+0x206>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80033a4:	fa93 f3a3 	rbit	r3, r3
 80033a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80033ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80033b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e004      	b.n	80033ca <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 80033c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d106      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fb00 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fae4 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10a      	bne.n	8003408 <HAL_ADC_ConfigChannel+0x244>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fad9 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80033fe:	4603      	mov	r3, r0
 8003400:	0e9b      	lsrs	r3, r3, #26
 8003402:	f003 021f 	and.w	r2, r3, #31
 8003406:	e01e      	b.n	8003446 <HAL_ADC_ConfigChannel+0x282>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2101      	movs	r1, #1
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff face 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003414:	4603      	mov	r3, r0
 8003416:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800341e:	fa93 f3a3 	rbit	r3, r3
 8003422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800342a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800342e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e004      	b.n	8003444 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 800343a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_ConfigChannel+0x29a>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	0e9b      	lsrs	r3, r3, #26
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	e018      	b.n	8003490 <HAL_ADC_ConfigChannel+0x2cc>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800347a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8003486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003490:	429a      	cmp	r2, r3
 8003492:	d106      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2200      	movs	r2, #0
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff fa9d 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fa81 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10a      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x30a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2102      	movs	r1, #2
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fa76 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80034c4:	4603      	mov	r3, r0
 80034c6:	0e9b      	lsrs	r3, r3, #26
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	e01e      	b.n	800350c <HAL_ADC_ConfigChannel+0x348>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fa6b 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 80034da:	4603      	mov	r3, r0
 80034dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034e4:	fa93 f3a3 	rbit	r3, r3
 80034e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80034ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80034f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e004      	b.n	800350a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8003500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003504:	fab3 f383 	clz	r3, r3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x360>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	e016      	b.n	8003552 <HAL_ADC_ConfigChannel+0x38e>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003536:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800353c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8003544:	2320      	movs	r3, #32
 8003546:	e004      	b.n	8003552 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8003548:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800354c:	fab3 f383 	clz	r3, r3
 8003550:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003552:	429a      	cmp	r2, r3
 8003554:	d106      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fa3c 	bl	80029dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2103      	movs	r1, #3
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff fa20 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003570:	4603      	mov	r3, r0
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10a      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x3cc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2103      	movs	r1, #3
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fa15 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 8003586:	4603      	mov	r3, r0
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	f003 021f 	and.w	r2, r3, #31
 800358e:	e017      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x3fc>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2103      	movs	r1, #3
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff fa0a 	bl	80029b0 <LL_ADC_GetOffsetChannel>
 800359c:	4603      	mov	r3, r0
 800359e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80035a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035aa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80035ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 80035b2:	2320      	movs	r3, #32
 80035b4:	e003      	b.n	80035be <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 80035b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035b8:	fab3 f383 	clz	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <HAL_ADC_ConfigChannel+0x414>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	0e9b      	lsrs	r3, r3, #26
 80035d2:	f003 031f 	and.w	r3, r3, #31
 80035d6:	e011      	b.n	80035fc <HAL_ADC_ConfigChannel+0x438>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80035e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80035ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 80035f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d106      	bne.n	800360e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2200      	movs	r2, #0
 8003606:	2103      	movs	r1, #3
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f9e7 	bl	80029dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fb14 	bl	8002c40 <LL_ADC_IsEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	f040 8140 	bne.w	80038a0 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	461a      	mov	r2, r3
 800362e:	f7ff fa6d 	bl	8002b0c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	4a8f      	ldr	r2, [pc, #572]	; (8003874 <HAL_ADC_ConfigChannel+0x6b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	f040 8131 	bne.w	80038a0 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <HAL_ADC_ConfigChannel+0x4a2>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	0e9b      	lsrs	r3, r3, #26
 8003654:	3301      	adds	r3, #1
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	2b09      	cmp	r3, #9
 800365c:	bf94      	ite	ls
 800365e:	2301      	movls	r3, #1
 8003660:	2300      	movhi	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	e019      	b.n	800369a <HAL_ADC_ConfigChannel+0x4d6>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800366e:	fa93 f3a3 	rbit	r3, r3
 8003672:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003674:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003676:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 800367e:	2320      	movs	r3, #32
 8003680:	e003      	b.n	800368a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003682:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	b2db      	uxtb	r3, r3
 800368a:	3301      	adds	r3, #1
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2b09      	cmp	r3, #9
 8003692:	bf94      	ite	ls
 8003694:	2301      	movls	r3, #1
 8003696:	2300      	movhi	r3, #0
 8003698:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369a:	2b00      	cmp	r3, #0
 800369c:	d079      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d107      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x4f6>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	0e9b      	lsrs	r3, r3, #26
 80036b0:	3301      	adds	r3, #1
 80036b2:	069b      	lsls	r3, r3, #26
 80036b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036b8:	e015      	b.n	80036e6 <HAL_ADC_ConfigChannel+0x522>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80036cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e003      	b.n	80036de <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 80036d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	069b      	lsls	r3, r3, #26
 80036e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x542>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	0e9b      	lsrs	r3, r3, #26
 80036f8:	3301      	adds	r3, #1
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2101      	movs	r1, #1
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	e017      	b.n	8003736 <HAL_ADC_ConfigChannel+0x572>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003716:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003718:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800371e:	2320      	movs	r3, #32
 8003720:	e003      	b.n	800372a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8003722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	3301      	adds	r3, #1
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	2101      	movs	r1, #1
 8003732:	fa01 f303 	lsl.w	r3, r1, r3
 8003736:	ea42 0103 	orr.w	r1, r2, r3
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_ADC_ConfigChannel+0x598>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	3301      	adds	r3, #1
 800374e:	f003 021f 	and.w	r2, r3, #31
 8003752:	4613      	mov	r3, r2
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	4413      	add	r3, r2
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	e018      	b.n	800378e <HAL_ADC_ConfigChannel+0x5ca>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800376a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800376c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e003      	b.n	8003780 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8003778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f003 021f 	and.w	r2, r3, #31
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800378e:	430b      	orrs	r3, r1
 8003790:	e081      	b.n	8003896 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	2b00      	cmp	r3, #0
 800379c:	d107      	bne.n	80037ae <HAL_ADC_ConfigChannel+0x5ea>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	0e9b      	lsrs	r3, r3, #26
 80037a4:	3301      	adds	r3, #1
 80037a6:	069b      	lsls	r3, r3, #26
 80037a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ac:	e015      	b.n	80037da <HAL_ADC_ConfigChannel+0x616>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e003      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	fab3 f383 	clz	r3, r3
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	069b      	lsls	r3, r3, #26
 80037d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x636>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0e9b      	lsrs	r3, r3, #26
 80037ec:	3301      	adds	r3, #1
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2101      	movs	r1, #1
 80037f4:	fa01 f303 	lsl.w	r3, r1, r3
 80037f8:	e017      	b.n	800382a <HAL_ADC_ConfigChannel+0x666>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	fa93 f3a3 	rbit	r3, r3
 8003806:	61fb      	str	r3, [r7, #28]
  return result;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8003812:	2320      	movs	r3, #32
 8003814:	e003      	b.n	800381e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	3301      	adds	r3, #1
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	2101      	movs	r1, #1
 8003826:	fa01 f303 	lsl.w	r3, r1, r3
 800382a:	ea42 0103 	orr.w	r1, r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10d      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x692>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	0e9b      	lsrs	r3, r3, #26
 8003840:	3301      	adds	r3, #1
 8003842:	f003 021f 	and.w	r2, r3, #31
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	3b1e      	subs	r3, #30
 800384e:	051b      	lsls	r3, r3, #20
 8003850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003854:	e01e      	b.n	8003894 <HAL_ADC_ConfigChannel+0x6d0>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	fa93 f3a3 	rbit	r3, r3
 8003862:	613b      	str	r3, [r7, #16]
  return result;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d104      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800386e:	2320      	movs	r3, #32
 8003870:	e006      	b.n	8003880 <HAL_ADC_ConfigChannel+0x6bc>
 8003872:	bf00      	nop
 8003874:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fab3 f383 	clz	r3, r3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f003 021f 	and.w	r2, r3, #31
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	3b1e      	subs	r3, #30
 800388e:	051b      	lsls	r3, r3, #20
 8003890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003894:	430b      	orrs	r3, r1
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	6892      	ldr	r2, [r2, #8]
 800389a:	4619      	mov	r1, r3
 800389c:	f7ff f90b 	bl	8002ab6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_ADC_ConfigChannel+0x7d4>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d06b      	beq.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038ac:	483b      	ldr	r0, [pc, #236]	; (800399c <HAL_ADC_ConfigChannel+0x7d8>)
 80038ae:	f7ff f84d 	bl	800294c <LL_ADC_GetCommonPathInternalCh>
 80038b2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a39      	ldr	r2, [pc, #228]	; (80039a0 <HAL_ADC_ConfigChannel+0x7dc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d126      	bne.n	800390e <HAL_ADC_ConfigChannel+0x74a>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d120      	bne.n	800390e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <HAL_ADC_ConfigChannel+0x7e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d156      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038de:	4619      	mov	r1, r3
 80038e0:	482e      	ldr	r0, [pc, #184]	; (800399c <HAL_ADC_ConfigChannel+0x7d8>)
 80038e2:	f7ff f820 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_ADC_ConfigChannel+0x7e4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	4a2f      	ldr	r2, [pc, #188]	; (80039ac <HAL_ADC_ConfigChannel+0x7e8>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	099a      	lsrs	r2, r3, #6
 80038f4:	4613      	mov	r3, r2
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038fe:	e002      	b.n	8003906 <HAL_ADC_ConfigChannel+0x742>
          {
            wait_loop_index--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	3b01      	subs	r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f9      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x73c>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800390c:	e03a      	b.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a27      	ldr	r2, [pc, #156]	; (80039b0 <HAL_ADC_ConfigChannel+0x7ec>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d113      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x77c>
 8003918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800391c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x77c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12a      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800392e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003936:	4619      	mov	r1, r3
 8003938:	4818      	ldr	r0, [pc, #96]	; (800399c <HAL_ADC_ConfigChannel+0x7d8>)
 800393a:	f7fe fff4 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800393e:	e021      	b.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a1b      	ldr	r2, [pc, #108]	; (80039b4 <HAL_ADC_ConfigChannel+0x7f0>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d11c      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800394a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d116      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a12      	ldr	r2, [pc, #72]	; (80039a4 <HAL_ADC_ConfigChannel+0x7e0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d111      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003968:	4619      	mov	r1, r3
 800396a:	480c      	ldr	r0, [pc, #48]	; (800399c <HAL_ADC_ConfigChannel+0x7d8>)
 800396c:	f7fe ffdb 	bl	8002926 <LL_ADC_SetCommonPathInternalCh>
 8003970:	e008      	b.n	8003984 <HAL_ADC_ConfigChannel+0x7c0>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800398c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003990:	4618      	mov	r0, r3
 8003992:	37d8      	adds	r7, #216	; 0xd8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	80080000 	.word	0x80080000
 800399c:	50040300 	.word	0x50040300
 80039a0:	c7520000 	.word	0xc7520000
 80039a4:	50040000 	.word	0x50040000
 80039a8:	20000000 	.word	0x20000000
 80039ac:	053e2d63 	.word	0x053e2d63
 80039b0:	cb840000 	.word	0xcb840000
 80039b4:	80000001 	.word	0x80000001

080039b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f984 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 80039d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f9a5 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 80039e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d103      	bne.n	80039f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8090 	beq.w	8003b10 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d02a      	beq.n	8003a54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7e5b      	ldrb	r3, [r3, #25]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d126      	bne.n	8003a54 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	7e1b      	ldrb	r3, [r3, #24]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d122      	bne.n	8003a54 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a12:	e014      	b.n	8003a3e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4a41      	ldr	r2, [pc, #260]	; (8003b1c <ADC_ConversionStop+0x164>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d90d      	bls.n	8003a38 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e06c      	b.n	8003b12 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a48:	2b40      	cmp	r3, #64	; 0x40
 8003a4a:	d1e3      	bne.n	8003a14 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d014      	beq.n	8003a84 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f93c 	bl	8002cdc <LL_ADC_REG_IsConversionOngoing>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00c      	beq.n	8003a84 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff f8f9 	bl	8002c66 <LL_ADC_IsDisableOngoing>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d104      	bne.n	8003a84 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff f918 	bl	8002cb4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d014      	beq.n	8003ab4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff f94b 	bl	8002d2a <LL_ADC_INJ_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff f8e1 	bl	8002c66 <LL_ADC_IsDisableOngoing>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d104      	bne.n	8003ab4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff f927 	bl	8002d02 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d004      	beq.n	8003ac4 <ADC_ConversionStop+0x10c>
 8003aba:	2b03      	cmp	r3, #3
 8003abc:	d105      	bne.n	8003aca <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003abe:	230c      	movs	r3, #12
 8003ac0:	617b      	str	r3, [r7, #20]
        break;
 8003ac2:	e005      	b.n	8003ad0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	617b      	str	r3, [r7, #20]
        break;
 8003ac8:	e002      	b.n	8003ad0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003aca:	2304      	movs	r3, #4
 8003acc:	617b      	str	r3, [r7, #20]
        break;
 8003ace:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003ad0:	f7fe fee8 	bl	80028a4 <HAL_GetTick>
 8003ad4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad6:	e014      	b.n	8003b02 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ad8:	f7fe fee4 	bl	80028a4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	d90d      	bls.n	8003b02 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aea:	f043 0210 	orr.w	r2, r3, #16
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	f043 0201 	orr.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e007      	b.n	8003b12 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1e3      	bne.n	8003ad8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	a33fffff 	.word	0xa33fffff

08003b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7ff f887 	bl	8002c40 <LL_ADC_IsEnabled>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d146      	bne.n	8003bc6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b24      	ldr	r3, [pc, #144]	; (8003bd0 <ADC_Enable+0xb0>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00d      	beq.n	8003b62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	f043 0210 	orr.w	r2, r3, #16
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e032      	b.n	8003bc8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7ff f842 	bl	8002bf0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b6c:	f7fe fe9a 	bl	80028a4 <HAL_GetTick>
 8003b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b72:	e021      	b.n	8003bb8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f861 	bl	8002c40 <LL_ADC_IsEnabled>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d104      	bne.n	8003b8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f831 	bl	8002bf0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b8e:	f7fe fe89 	bl	80028a4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d90d      	bls.n	8003bb8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba0:	f043 0210 	orr.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d1d6      	bne.n	8003b74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	8000003f 	.word	0x8000003f

08003bd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f840 	bl	8002c66 <LL_ADC_IsDisableOngoing>
 8003be6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff f827 	bl	8002c40 <LL_ADC_IsEnabled>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d040      	beq.n	8003c7a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d13d      	bne.n	8003c7a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030d 	and.w	r3, r3, #13
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10c      	bne.n	8003c26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff f801 	bl	8002c18 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c1e:	f7fe fe41 	bl	80028a4 <HAL_GetTick>
 8003c22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c24:	e022      	b.n	8003c6c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	f043 0210 	orr.w	r2, r3, #16
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f043 0201 	orr.w	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e01c      	b.n	8003c7c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c42:	f7fe fe2f 	bl	80028a4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d90d      	bls.n	8003c6c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f043 0210 	orr.w	r2, r3, #16
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f043 0201 	orr.w	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e007      	b.n	8003c7c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e3      	bne.n	8003c42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d14b      	bne.n	8003d36 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d021      	beq.n	8003cfc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe febb 	bl	8002a38 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d032      	beq.n	8003d2e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d12b      	bne.n	8003d2e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d11f      	bne.n	8003d2e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f043 0201 	orr.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	659a      	str	r2, [r3, #88]	; 0x58
 8003cfa:	e018      	b.n	8003d2e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d111      	bne.n	8003d2e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7fe fb5c 	bl	80023ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d34:	e00e      	b.n	8003d54 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d3a:	f003 0310 	and.w	r3, r3, #16
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f7ff fa33 	bl	80031ae <HAL_ADC_ErrorCallback>
}
 8003d48:	e004      	b.n	8003d54 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7fe fb34 	bl	80023d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d84:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	f043 0204 	orr.w	r2, r3, #4
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f7ff fa05 	bl	80031ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dde:	4a04      	ldr	r2, [pc, #16]	; (8003df0 <__NVIC_SetPriorityGrouping+0x44>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	60d3      	str	r3, [r2, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	e000ed00 	.word	0xe000ed00

08003df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <__NVIC_GetPriorityGrouping+0x18>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	0a1b      	lsrs	r3, r3, #8
 8003dfe:	f003 0307 	and.w	r3, r3, #7
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	e000ed00 	.word	0xe000ed00

08003e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	db0b      	blt.n	8003e3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	f003 021f 	and.w	r2, r3, #31
 8003e28:	4907      	ldr	r1, [pc, #28]	; (8003e48 <__NVIC_EnableIRQ+0x38>)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	095b      	lsrs	r3, r3, #5
 8003e30:	2001      	movs	r0, #1
 8003e32:	fa00 f202 	lsl.w	r2, r0, r2
 8003e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	e000e100 	.word	0xe000e100

08003e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	4603      	mov	r3, r0
 8003e54:	6039      	str	r1, [r7, #0]
 8003e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	db0a      	blt.n	8003e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	490c      	ldr	r1, [pc, #48]	; (8003e98 <__NVIC_SetPriority+0x4c>)
 8003e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e6a:	0112      	lsls	r2, r2, #4
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e74:	e00a      	b.n	8003e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	4908      	ldr	r1, [pc, #32]	; (8003e9c <__NVIC_SetPriority+0x50>)
 8003e7c:	79fb      	ldrb	r3, [r7, #7]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	3b04      	subs	r3, #4
 8003e84:	0112      	lsls	r2, r2, #4
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	440b      	add	r3, r1
 8003e8a:	761a      	strb	r2, [r3, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	e000e100 	.word	0xe000e100
 8003e9c:	e000ed00 	.word	0xe000ed00

08003ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	; 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f1c3 0307 	rsb	r3, r3, #7
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	bf28      	it	cs
 8003ebe:	2304      	movcs	r3, #4
 8003ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	2b06      	cmp	r3, #6
 8003ec8:	d902      	bls.n	8003ed0 <NVIC_EncodePriority+0x30>
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3b03      	subs	r3, #3
 8003ece:	e000      	b.n	8003ed2 <NVIC_EncodePriority+0x32>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	43da      	mvns	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	43d9      	mvns	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef8:	4313      	orrs	r3, r2
         );
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3724      	adds	r7, #36	; 0x24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f18:	d301      	bcc.n	8003f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e00f      	b.n	8003f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	; (8003f48 <SysTick_Config+0x40>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f26:	210f      	movs	r1, #15
 8003f28:	f04f 30ff 	mov.w	r0, #4294967295
 8003f2c:	f7ff ff8e 	bl	8003e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f30:	4b05      	ldr	r3, [pc, #20]	; (8003f48 <SysTick_Config+0x40>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f36:	4b04      	ldr	r3, [pc, #16]	; (8003f48 <SysTick_Config+0x40>)
 8003f38:	2207      	movs	r2, #7
 8003f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e010 	.word	0xe000e010

08003f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff29 	bl	8003dac <__NVIC_SetPriorityGrouping>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b086      	sub	sp, #24
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
 8003f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f74:	f7ff ff3e 	bl	8003df4 <__NVIC_GetPriorityGrouping>
 8003f78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f7ff ff8e 	bl	8003ea0 <NVIC_EncodePriority>
 8003f84:	4602      	mov	r2, r0
 8003f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff ff5d 	bl	8003e4c <__NVIC_SetPriority>
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff31 	bl	8003e10 <__NVIC_EnableIRQ>
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f7ff ffa2 	bl	8003f08 <SysTick_Config>
 8003fc4:	4603      	mov	r3, r0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e08d      	b.n	80040fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_DMA_Init+0x138>)
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d80f      	bhi.n	800400e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	4b45      	ldr	r3, [pc, #276]	; (800410c <HAL_DMA_Init+0x13c>)
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a45      	ldr	r2, [pc, #276]	; (8004110 <HAL_DMA_Init+0x140>)
 8003ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	009a      	lsls	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <HAL_DMA_Init+0x144>)
 800400a:	641a      	str	r2, [r3, #64]	; 0x40
 800400c:	e00e      	b.n	800402c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	4b40      	ldr	r3, [pc, #256]	; (8004118 <HAL_DMA_Init+0x148>)
 8004016:	4413      	add	r3, r2
 8004018:	4a3d      	ldr	r2, [pc, #244]	; (8004110 <HAL_DMA_Init+0x140>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	009a      	lsls	r2, r3, #2
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a3c      	ldr	r2, [pc, #240]	; (800411c <HAL_DMA_Init+0x14c>)
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004046:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fa12 	bl	80044a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408c:	d102      	bne.n	8004094 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409c:	b2d2      	uxtb	r2, r2
 800409e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040a8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_DMA_Init+0x104>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d80c      	bhi.n	80040d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fa32 	bl	8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	e008      	b.n	80040e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40020407 	.word	0x40020407
 800410c:	bffdfff8 	.word	0xbffdfff8
 8004110:	cccccccd 	.word	0xcccccccd
 8004114:	40020000 	.word	0x40020000
 8004118:	bffdfbf8 	.word	0xbffdfbf8
 800411c:	40020400 	.word	0x40020400

08004120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_DMA_Start_IT+0x20>
 800413c:	2302      	movs	r3, #2
 800413e:	e066      	b.n	800420e <HAL_DMA_Start_IT+0xee>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d155      	bne.n	8004200 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f957 	bl	800442c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f042 020e 	orr.w	r2, r2, #14
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00f      	b.n	80041b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f042 020a 	orr.w	r2, r2, #10
 80041b6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d007      	beq.n	80041d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f042 0201 	orr.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	e005      	b.n	800420c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004208:	2302      	movs	r3, #2
 800420a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800420c:	7dfb      	ldrb	r3, [r7, #23]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004216:	b480      	push	{r7}
 8004218:	b085      	sub	sp, #20
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d008      	beq.n	8004240 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2204      	movs	r2, #4
 8004232:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e040      	b.n	80042c2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020e 	bic.w	r2, r2, #14
 800424e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800425e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0201 	bic.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f003 021c 	and.w	r2, r3, #28
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	2101      	movs	r1, #1
 800427e:	fa01 f202 	lsl.w	r2, r1, r2
 8004282:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800428c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00c      	beq.n	80042b0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	f003 031c 	and.w	r3, r3, #28
 80042ee:	2204      	movs	r2, #4
 80042f0:	409a      	lsls	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d026      	beq.n	8004348 <HAL_DMA_IRQHandler+0x7a>
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d021      	beq.n	8004348 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d107      	bne.n	8004322 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0204 	bic.w	r2, r2, #4
 8004320:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f003 021c 	and.w	r2, r3, #28
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2104      	movs	r1, #4
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	2b00      	cmp	r3, #0
 800433c:	d071      	beq.n	8004422 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8004346:	e06c      	b.n	8004422 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	f003 031c 	and.w	r3, r3, #28
 8004350:	2202      	movs	r2, #2
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d02e      	beq.n	80043ba <HAL_DMA_IRQHandler+0xec>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d029      	beq.n	80043ba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0320 	and.w	r3, r3, #32
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10b      	bne.n	800438c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 020a 	bic.w	r2, r2, #10
 8004382:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f003 021c 	and.w	r2, r3, #28
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	2102      	movs	r1, #2
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d038      	beq.n	8004422 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80043b8:	e033      	b.n	8004422 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f003 031c 	and.w	r3, r3, #28
 80043c2:	2208      	movs	r2, #8
 80043c4:	409a      	lsls	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02a      	beq.n	8004424 <HAL_DMA_IRQHandler+0x156>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d025      	beq.n	8004424 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 020e 	bic.w	r2, r2, #14
 80043e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f003 021c 	and.w	r2, r3, #28
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f202 	lsl.w	r2, r1, r2
 80043fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004416:	2b00      	cmp	r3, #0
 8004418:	d004      	beq.n	8004424 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004422:	bf00      	nop
 8004424:	bf00      	nop
}
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004442:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004448:	2b00      	cmp	r3, #0
 800444a:	d004      	beq.n	8004456 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004454:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445a:	f003 021c 	and.w	r2, r3, #28
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004462:	2101      	movs	r1, #1
 8004464:	fa01 f202 	lsl.w	r2, r1, r2
 8004468:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b10      	cmp	r3, #16
 8004478:	d108      	bne.n	800448c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800448a:	e007      	b.n	800449c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68ba      	ldr	r2, [r7, #8]
 8004492:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]
}
 800449c:	bf00      	nop
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d80a      	bhi.n	80044d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	089b      	lsrs	r3, r3, #2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6493      	str	r3, [r2, #72]	; 0x48
 80044d0:	e007      	b.n	80044e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	4b0f      	ldr	r3, [pc, #60]	; (8004518 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80044dc:	4413      	add	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	3b08      	subs	r3, #8
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80044ec:	fba2 2303 	umull	r2, r3, r2, r3
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80044f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	2201      	movs	r2, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004508:	bf00      	nop
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40020407 	.word	0x40020407
 8004518:	4002081c 	.word	0x4002081c
 800451c:	cccccccd 	.word	0xcccccccd
 8004520:	40020880 	.word	0x40020880

08004524 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a08      	ldr	r2, [pc, #32]	; (8004568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004546:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3b01      	subs	r3, #1
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	2201      	movs	r2, #1
 8004552:	409a      	lsls	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	1000823f 	.word	0x1000823f
 8004568:	40020940 	.word	0x40020940

0800456c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004576:	2300      	movs	r3, #0
 8004578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800457a:	e166      	b.n	800484a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	2101      	movs	r1, #1
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8158 	beq.w	8004844 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d00b      	beq.n	80045b4 <HAL_GPIO_Init+0x48>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d007      	beq.n	80045b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80045a8:	2b11      	cmp	r3, #17
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b12      	cmp	r3, #18
 80045b2:	d130      	bne.n	8004616 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	2203      	movs	r2, #3
 80045c0:	fa02 f303 	lsl.w	r3, r2, r3
 80045c4:	43db      	mvns	r3, r3
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	68da      	ldr	r2, [r3, #12]
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fa02 f303 	lsl.w	r3, r2, r3
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ea:	2201      	movs	r2, #1
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	43db      	mvns	r3, r3
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4013      	ands	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0201 	and.w	r2, r3, #1
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	2203      	movs	r2, #3
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689a      	ldr	r2, [r3, #8]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	fa02 f303 	lsl.w	r3, r2, r3
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_Init+0xea>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b12      	cmp	r3, #18
 8004654:	d123      	bne.n	800469e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	08da      	lsrs	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3208      	adds	r2, #8
 800465e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004662:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	220f      	movs	r2, #15
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	08da      	lsrs	r2, r3, #3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3208      	adds	r2, #8
 8004698:	6939      	ldr	r1, [r7, #16]
 800469a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	2203      	movs	r2, #3
 80046aa:	fa02 f303 	lsl.w	r3, r2, r3
 80046ae:	43db      	mvns	r3, r3
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	4013      	ands	r3, r2
 80046b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f003 0203 	and.w	r2, r3, #3
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80b2 	beq.w	8004844 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046e0:	4b61      	ldr	r3, [pc, #388]	; (8004868 <HAL_GPIO_Init+0x2fc>)
 80046e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e4:	4a60      	ldr	r2, [pc, #384]	; (8004868 <HAL_GPIO_Init+0x2fc>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6613      	str	r3, [r2, #96]	; 0x60
 80046ec:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_GPIO_Init+0x2fc>)
 80046ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	60bb      	str	r3, [r7, #8]
 80046f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80046f8:	4a5c      	ldr	r2, [pc, #368]	; (800486c <HAL_GPIO_Init+0x300>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3302      	adds	r3, #2
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	220f      	movs	r2, #15
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004722:	d02b      	beq.n	800477c <HAL_GPIO_Init+0x210>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_GPIO_Init+0x304>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d025      	beq.n	8004778 <HAL_GPIO_Init+0x20c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a51      	ldr	r2, [pc, #324]	; (8004874 <HAL_GPIO_Init+0x308>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01f      	beq.n	8004774 <HAL_GPIO_Init+0x208>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a50      	ldr	r2, [pc, #320]	; (8004878 <HAL_GPIO_Init+0x30c>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d019      	beq.n	8004770 <HAL_GPIO_Init+0x204>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a4f      	ldr	r2, [pc, #316]	; (800487c <HAL_GPIO_Init+0x310>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <HAL_GPIO_Init+0x200>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a4e      	ldr	r2, [pc, #312]	; (8004880 <HAL_GPIO_Init+0x314>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00d      	beq.n	8004768 <HAL_GPIO_Init+0x1fc>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a4d      	ldr	r2, [pc, #308]	; (8004884 <HAL_GPIO_Init+0x318>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d007      	beq.n	8004764 <HAL_GPIO_Init+0x1f8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a4c      	ldr	r2, [pc, #304]	; (8004888 <HAL_GPIO_Init+0x31c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d101      	bne.n	8004760 <HAL_GPIO_Init+0x1f4>
 800475c:	2307      	movs	r3, #7
 800475e:	e00e      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004760:	2308      	movs	r3, #8
 8004762:	e00c      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004764:	2306      	movs	r3, #6
 8004766:	e00a      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004768:	2305      	movs	r3, #5
 800476a:	e008      	b.n	800477e <HAL_GPIO_Init+0x212>
 800476c:	2304      	movs	r3, #4
 800476e:	e006      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004770:	2303      	movs	r3, #3
 8004772:	e004      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004774:	2302      	movs	r3, #2
 8004776:	e002      	b.n	800477e <HAL_GPIO_Init+0x212>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_GPIO_Init+0x212>
 800477c:	2300      	movs	r3, #0
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	f002 0203 	and.w	r2, r2, #3
 8004784:	0092      	lsls	r2, r2, #2
 8004786:	4093      	lsls	r3, r2
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800478e:	4937      	ldr	r1, [pc, #220]	; (800486c <HAL_GPIO_Init+0x300>)
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	3302      	adds	r3, #2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800479c:	4b3b      	ldr	r3, [pc, #236]	; (800488c <HAL_GPIO_Init+0x320>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	43db      	mvns	r3, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4013      	ands	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047c0:	4a32      	ldr	r2, [pc, #200]	; (800488c <HAL_GPIO_Init+0x320>)
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80047c6:	4b31      	ldr	r3, [pc, #196]	; (800488c <HAL_GPIO_Init+0x320>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80047ea:	4a28      	ldr	r2, [pc, #160]	; (800488c <HAL_GPIO_Init+0x320>)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047f0:	4b26      	ldr	r3, [pc, #152]	; (800488c <HAL_GPIO_Init+0x320>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	43db      	mvns	r3, r3
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4013      	ands	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004814:	4a1d      	ldr	r2, [pc, #116]	; (800488c <HAL_GPIO_Init+0x320>)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800481a:	4b1c      	ldr	r3, [pc, #112]	; (800488c <HAL_GPIO_Init+0x320>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	43db      	mvns	r3, r3
 8004824:	693a      	ldr	r2, [r7, #16]
 8004826:	4013      	ands	r3, r2
 8004828:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800483e:	4a13      	ldr	r2, [pc, #76]	; (800488c <HAL_GPIO_Init+0x320>)
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	3301      	adds	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fa22 f303 	lsr.w	r3, r2, r3
 8004854:	2b00      	cmp	r3, #0
 8004856:	f47f ae91 	bne.w	800457c <HAL_GPIO_Init+0x10>
  }
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	40010000 	.word	0x40010000
 8004870:	48000400 	.word	0x48000400
 8004874:	48000800 	.word	0x48000800
 8004878:	48000c00 	.word	0x48000c00
 800487c:	48001000 	.word	0x48001000
 8004880:	48001400 	.word	0x48001400
 8004884:	48001800 	.word	0x48001800
 8004888:	48001c00 	.word	0x48001c00
 800488c:	40010400 	.word	0x40010400

08004890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	460b      	mov	r3, r1
 800489a:	807b      	strh	r3, [r7, #2]
 800489c:	4613      	mov	r3, r2
 800489e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048a0:	787b      	ldrb	r3, [r7, #1]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048ac:	e002      	b.n	80048b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ae:	887a      	ldrh	r2, [r7, #2]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048c2:	b08f      	sub	sp, #60	; 0x3c
 80048c4:	af0a      	add	r7, sp, #40	; 0x28
 80048c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e116      	b.n	8004b00 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d106      	bne.n	80048f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f006 fc1d 	bl	800b12c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2203      	movs	r2, #3
 80048f6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4618      	mov	r0, r3
 8004912:	f003 fcd4 	bl	80082be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	603b      	str	r3, [r7, #0]
 800491c:	687e      	ldr	r6, [r7, #4]
 800491e:	466d      	mov	r5, sp
 8004920:	f106 0410 	add.w	r4, r6, #16
 8004924:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004926:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004928:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800492c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004930:	e885 0003 	stmia.w	r5, {r0, r1}
 8004934:	1d33      	adds	r3, r6, #4
 8004936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004938:	6838      	ldr	r0, [r7, #0]
 800493a:	f003 fbc1 	bl	80080c0 <USB_CoreInit>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0d7      	b.n	8004b00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2100      	movs	r1, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f003 fcc2 	bl	80082e0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800495c:	2300      	movs	r3, #0
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e04a      	b.n	80049f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004962:	7bfa      	ldrb	r2, [r7, #15]
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	333d      	adds	r3, #61	; 0x3d
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004976:	7bfa      	ldrb	r2, [r7, #15]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	333c      	adds	r3, #60	; 0x3c
 8004986:	7bfa      	ldrb	r2, [r7, #15]
 8004988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800498a:	7bfa      	ldrb	r2, [r7, #15]
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	b298      	uxth	r0, r3
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	1a9b      	subs	r3, r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	440b      	add	r3, r1
 800499c:	3342      	adds	r3, #66	; 0x42
 800499e:	4602      	mov	r2, r0
 80049a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049a2:	7bfa      	ldrb	r2, [r7, #15]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	333f      	adds	r3, #63	; 0x3f
 80049b2:	2200      	movs	r2, #0
 80049b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	3344      	adds	r3, #68	; 0x44
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	3348      	adds	r3, #72	; 0x48
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	3350      	adds	r3, #80	; 0x50
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	3301      	adds	r3, #1
 80049f6:	73fb      	strb	r3, [r7, #15]
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d3af      	bcc.n	8004962 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
 8004a06:	e044      	b.n	8004a92 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a08:	7bfa      	ldrb	r2, [r7, #15]
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a34:	7bfa      	ldrb	r2, [r7, #15]
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a76:	7bfa      	ldrb	r2, [r7, #15]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	3301      	adds	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	7bfa      	ldrb	r2, [r7, #15]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3b5      	bcc.n	8004a08 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	687e      	ldr	r6, [r7, #4]
 8004aa4:	466d      	mov	r5, sp
 8004aa6:	f106 0410 	add.w	r4, r6, #16
 8004aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004aba:	1d33      	adds	r3, r6, #4
 8004abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004abe:	6838      	ldr	r0, [r7, #0]
 8004ac0:	f003 fc38 	bl	8008334 <USB_DevInit>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d005      	beq.n	8004ad6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e014      	b.n	8004b00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d102      	bne.n	8004af4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 ff62 	bl	80059b8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4618      	mov	r0, r3
 8004afa:	f004 fbba 	bl	8009272 <USB_DevDisconnect>

  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d101      	bne.n	8004b24 <HAL_PCD_Start+0x1c>
 8004b20:	2302      	movs	r3, #2
 8004b22:	e01c      	b.n	8004b5e <HAL_PCD_Start+0x56>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d105      	bne.n	8004b40 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f003 fba9 	bl	800829c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f004 fb6e 	bl	8009230 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b66:	b590      	push	{r4, r7, lr}
 8004b68:	b08d      	sub	sp, #52	; 0x34
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f004 fc2c 	bl	80093da <USB_GetMode>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f040 838f 	bne.w	80052a8 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f004 fb90 	bl	80092b4 <USB_ReadInterrupts>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 8385 	beq.w	80052a6 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f004 fb87 	bl	80092b4 <USB_ReadInterrupts>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d107      	bne.n	8004bc0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695a      	ldr	r2, [r3, #20]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f002 0202 	and.w	r2, r2, #2
 8004bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f004 fb75 	bl	80092b4 <USB_ReadInterrupts>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d161      	bne.n	8004c98 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699a      	ldr	r2, [r3, #24]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f022 0210 	bic.w	r2, r2, #16
 8004be2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 020f 	and.w	r2, r3, #15
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	4413      	add	r3, r2
 8004c00:	3304      	adds	r3, #4
 8004c02:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	0c5b      	lsrs	r3, r3, #17
 8004c08:	f003 030f 	and.w	r3, r3, #15
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d124      	bne.n	8004c5a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004c16:	4013      	ands	r3, r2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d035      	beq.n	8004c88 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6a38      	ldr	r0, [r7, #32]
 8004c30:	f004 f9db 	bl	8008fea <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	68da      	ldr	r2, [r3, #12]
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	091b      	lsrs	r3, r3, #4
 8004c3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c40:	441a      	add	r2, r3
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	091b      	lsrs	r3, r3, #4
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c52:	441a      	add	r2, r3
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	619a      	str	r2, [r3, #24]
 8004c58:	e016      	b.n	8004c88 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	0c5b      	lsrs	r3, r3, #17
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	2b06      	cmp	r3, #6
 8004c64:	d110      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c6c:	2208      	movs	r2, #8
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6a38      	ldr	r0, [r7, #32]
 8004c72:	f004 f9ba 	bl	8008fea <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c82:	441a      	add	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	699a      	ldr	r2, [r3, #24]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0210 	orr.w	r2, r2, #16
 8004c96:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f004 fb09 	bl	80092b4 <USB_ReadInterrupts>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ca8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cac:	d16e      	bne.n	8004d8c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 fb0f 	bl	80092da <USB_ReadDevAllOutEpInterrupt>
 8004cbc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004cbe:	e062      	b.n	8004d86 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d057      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cd0:	b2d2      	uxtb	r2, r2
 8004cd2:	4611      	mov	r1, r2
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f004 fb34 	bl	8009342 <USB_ReadDevOutEPInterrupt>
 8004cda:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	015a      	lsls	r2, r3, #5
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	4413      	add	r3, r2
 8004cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fd82 	bl	8005804 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d16:	461a      	mov	r2, r3
 8004d18:	2308      	movs	r3, #8
 8004d1a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004d1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fdbe 	bl	80058a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	2310      	movs	r3, #16
 8004d3e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d56:	461a      	mov	r2, r3
 8004d58:	2320      	movs	r3, #32
 8004d5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	461a      	mov	r2, r3
 8004d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d78:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d199      	bne.n	8004cc0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f004 fa8f 	bl	80092b4 <USB_ReadInterrupts>
 8004d96:	4603      	mov	r3, r0
 8004d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004da0:	f040 8087 	bne.w	8004eb2 <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f004 fab0 	bl	800930e <USB_ReadDevAllInEpInterrupt>
 8004dae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004db4:	e07a      	b.n	8004eac <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d06f      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f004 fad7 	bl	800937e <USB_ReadDevInEPInterrupt>
 8004dd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d020      	beq.n	8004e1e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	2201      	movs	r2, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	015a      	lsls	r2, r3, #5
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2301      	movs	r3, #1
 8004e10:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	4619      	mov	r1, r3
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f006 fa1a 	bl	800b252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	461a      	mov	r2, r3
 8004e36:	2308      	movs	r3, #8
 8004e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	2310      	movs	r3, #16
 8004e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc29 	bl	80056f2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d181      	bne.n	8004db6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f004 f9fc 	bl	80092b4 <USB_ReadInterrupts>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec6:	d122      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x3a8>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed6:	f023 0301 	bic.w	r3, r3, #1
 8004eda:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d108      	bne.n	8004ef8 <HAL_PCD_IRQHandler+0x392>
      {
        hpcd->LPM_State = LPM_L0;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f006 fcc5 	bl	800b880 <HAL_PCDEx_LPM_Callback>
 8004ef6:	e002      	b.n	8004efe <HAL_PCD_IRQHandler+0x398>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f006 fa17 	bl	800b32c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 f9ce 	bl	80092b4 <USB_ReadInterrupts>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f22:	d112      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x3e4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d102      	bne.n	8004f3a <HAL_PCD_IRQHandler+0x3d4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f006 f9d3 	bl	800b2e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f48:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f004 f9b0 	bl	80092b4 <USB_ReadInterrupts>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f5e:	d121      	bne.n	8004fa4 <HAL_PCD_IRQHandler+0x43e>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004f6e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d111      	bne.n	8004f9e <HAL_PCD_IRQHandler+0x438>
      {
        hpcd->LPM_State = LPM_L1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f88:	089b      	lsrs	r3, r3, #2
 8004f8a:	f003 020f 	and.w	r2, r3, #15
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f94:	2101      	movs	r1, #1
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f006 fc72 	bl	800b880 <HAL_PCDEx_LPM_Callback>
 8004f9c:	e002      	b.n	8004fa4 <HAL_PCD_IRQHandler+0x43e>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f006 f99e 	bl	800b2e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f004 f983 	bl	80092b4 <USB_ReadInterrupts>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb8:	f040 80c5 	bne.w	8005146 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fca:	f023 0301 	bic.w	r3, r3, #1
 8004fce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2110      	movs	r1, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f003 faf8 	bl	80085cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fe0:	e056      	b.n	8005090 <HAL_PCD_IRQHandler+0x52a>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	461a      	mov	r2, r3
 8004ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ff4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	69fa      	ldr	r2, [r7, #28]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005014:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005034:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005042:	461a      	mov	r2, r3
 8005044:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005048:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005064:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005068:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800507a:	0151      	lsls	r1, r2, #5
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	440a      	add	r2, r1
 8005080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005084:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005088:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	3301      	adds	r3, #1
 800508e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005096:	429a      	cmp	r2, r3
 8005098:	d3a3      	bcc.n	8004fe2 <HAL_PCD_IRQHandler+0x47c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050ac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_PCD_IRQHandler+0x57e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c6:	f043 030b 	orr.w	r3, r3, #11
 80050ca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d6:	69fa      	ldr	r2, [r7, #28]
 80050d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050dc:	f043 030b 	orr.w	r3, r3, #11
 80050e0:	6453      	str	r3, [r2, #68]	; 0x44
 80050e2:	e015      	b.n	8005110 <HAL_PCD_IRQHandler+0x5aa>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	69fa      	ldr	r2, [r7, #28]
 80050ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050f6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050fa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800510a:	f043 030b 	orr.w	r3, r3, #11
 800510e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69fa      	ldr	r2, [r7, #28]
 800511a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005122:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f004 f983 	bl	800943c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f004 f8b2 	bl	80092b4 <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d124      	bne.n	80051a6 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f004 f948 	bl	80093f6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f003 fa8f 	bl	800868e <USB_GetDevSpeed>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681c      	ldr	r4, [r3, #0]
 800517c:	f001 fafe 	bl	800677c <HAL_RCC_GetHCLKFreq>
 8005180:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	4620      	mov	r0, r4
 800518c:	f002 ffea 	bl	8008164 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f006 f886 	bl	800b2a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 f882 	bl	80092b4 <USB_ReadInterrupts>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d10a      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f006 f863 	bl	800b286 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f002 0208 	and.w	r2, r2, #8
 80051ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 f86d 	bl	80092b4 <USB_ReadInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051e4:	d10f      	bne.n	8005206 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	4619      	mov	r1, r3
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f006 f8d5 	bl	800b3a0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695a      	ldr	r2, [r3, #20]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005204:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f004 f852 	bl	80092b4 <USB_ReadInterrupts>
 8005210:	4603      	mov	r3, r0
 8005212:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800521a:	d10f      	bne.n	800523c <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	b2db      	uxtb	r3, r3
 8005224:	4619      	mov	r1, r3
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f006 f8a8 	bl	800b37c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800523a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4618      	mov	r0, r3
 8005242:	f004 f837 	bl	80092b4 <USB_ReadInterrupts>
 8005246:	4603      	mov	r3, r0
 8005248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005250:	d10a      	bne.n	8005268 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f006 f8b6 	bl	800b3c4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	695a      	ldr	r2, [r3, #20]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f004 f821 	bl	80092b4 <USB_ReadInterrupts>
 8005272:	4603      	mov	r3, r0
 8005274:	f003 0304 	and.w	r3, r3, #4
 8005278:	2b04      	cmp	r3, #4
 800527a:	d115      	bne.n	80052a8 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f006 f8a6 	bl	800b3e0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
 80052a4:	e000      	b.n	80052a8 <HAL_PCD_IRQHandler+0x742>
      return;
 80052a6:	bf00      	nop
    }
  }
}
 80052a8:	3734      	adds	r7, #52	; 0x34
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd90      	pop	{r4, r7, pc}

080052ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_PCD_SetAddress+0x1a>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e013      	b.n	80052f0 <HAL_PCD_SetAddress+0x42>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	78fa      	ldrb	r2, [r7, #3]
 80052de:	4611      	mov	r1, r2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f003 ff7f 	bl	80091e4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	461a      	mov	r2, r3
 8005306:	4603      	mov	r3, r0
 8005308:	70fb      	strb	r3, [r7, #3]
 800530a:	460b      	mov	r3, r1
 800530c:	803b      	strh	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800531a:	2b00      	cmp	r3, #0
 800531c:	da0f      	bge.n	800533e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	3338      	adds	r3, #56	; 0x38
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4413      	add	r3, r2
 8005332:	3304      	adds	r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	705a      	strb	r2, [r3, #1]
 800533c:	e00f      	b.n	800535e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	f003 020f 	and.w	r2, r3, #15
 8005344:	4613      	mov	r3, r2
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	3304      	adds	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	b2da      	uxtb	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800536a:	883a      	ldrh	r2, [r7, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	78ba      	ldrb	r2, [r7, #2]
 8005374:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d004      	beq.n	8005388 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005388:	78bb      	ldrb	r3, [r7, #2]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d102      	bne.n	8005394 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800539a:	2b01      	cmp	r3, #1
 800539c:	d101      	bne.n	80053a2 <HAL_PCD_EP_Open+0xaa>
 800539e:	2302      	movs	r3, #2
 80053a0:	e00e      	b.n	80053c0 <HAL_PCD_EP_Open+0xc8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f003 f98b 	bl	80086cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80053be:	7afb      	ldrb	r3, [r7, #11]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80053d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	f003 020f 	and.w	r2, r3, #15
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	3338      	adds	r3, #56	; 0x38
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	3304      	adds	r3, #4
 80053f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2201      	movs	r2, #1
 80053f8:	705a      	strb	r2, [r3, #1]
 80053fa:	e00f      	b.n	800541c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	f003 020f 	and.w	r2, r3, #15
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	1a9b      	subs	r3, r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4413      	add	r3, r2
 8005412:	3304      	adds	r3, #4
 8005414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	f003 030f 	and.w	r3, r3, #15
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_PCD_EP_Close+0x6e>
 8005432:	2302      	movs	r3, #2
 8005434:	e00e      	b.n	8005454 <HAL_PCD_EP_Close+0x8c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	4618      	mov	r0, r3
 8005446:	f003 f9c9 	bl	80087dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	460b      	mov	r3, r1
 800546a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800546c:	7afb      	ldrb	r3, [r7, #11]
 800546e:	f003 020f 	and.w	r2, r3, #15
 8005472:	4613      	mov	r3, r2
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	3304      	adds	r3, #4
 8005484:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2200      	movs	r2, #0
 8005496:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	2200      	movs	r2, #0
 800549c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800549e:	7afb      	ldrb	r3, [r7, #11]
 80054a0:	f003 030f 	and.w	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054aa:	7afb      	ldrb	r3, [r7, #11]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d106      	bne.n	80054c2 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6979      	ldr	r1, [r7, #20]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f003 fc46 	bl	8008d4c <USB_EP0StartXfer>
 80054c0:	e005      	b.n	80054ce <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f003 fa63 	bl	8008994 <USB_EPStartXfer>
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	460b      	mov	r3, r1
 80054e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 020f 	and.w	r2, r3, #15
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80054fa:	681b      	ldr	r3, [r3, #0]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	460b      	mov	r3, r1
 8005516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005518:	7afb      	ldrb	r3, [r7, #11]
 800551a:	f003 020f 	and.w	r2, r3, #15
 800551e:	4613      	mov	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	1a9b      	subs	r3, r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	3338      	adds	r3, #56	; 0x38
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4413      	add	r3, r2
 800552c:	3304      	adds	r3, #4
 800552e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	2200      	movs	r2, #0
 8005540:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2201      	movs	r2, #1
 8005546:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005548:	7afb      	ldrb	r3, [r7, #11]
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	b2da      	uxtb	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005554:	7afb      	ldrb	r3, [r7, #11]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	2b00      	cmp	r3, #0
 800555c:	d106      	bne.n	800556c <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6979      	ldr	r1, [r7, #20]
 8005564:	4618      	mov	r0, r3
 8005566:	f003 fbf1 	bl	8008d4c <USB_EP0StartXfer>
 800556a:	e005      	b.n	8005578 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6979      	ldr	r1, [r7, #20]
 8005572:	4618      	mov	r0, r3
 8005574:	f003 fa0e 	bl	8008994 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 020f 	and.w	r2, r3, #15
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	429a      	cmp	r2, r3
 800559a:	d901      	bls.n	80055a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e04e      	b.n	800563e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80055a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	da0f      	bge.n	80055c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055a8:	78fb      	ldrb	r3, [r7, #3]
 80055aa:	f003 020f 	and.w	r2, r3, #15
 80055ae:	4613      	mov	r3, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	3338      	adds	r3, #56	; 0x38
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	705a      	strb	r2, [r3, #1]
 80055c6:	e00d      	b.n	80055e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80055c8:	78fa      	ldrb	r2, [r7, #3]
 80055ca:	4613      	mov	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1a9b      	subs	r3, r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	4413      	add	r3, r2
 80055da:	3304      	adds	r3, #4
 80055dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2201      	movs	r2, #1
 80055e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	f003 030f 	and.w	r3, r3, #15
 80055f0:	b2da      	uxtb	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_PCD_EP_SetStall+0x82>
 8005600:	2302      	movs	r3, #2
 8005602:	e01c      	b.n	800563e <HAL_PCD_EP_SetStall+0xbc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	4618      	mov	r0, r3
 8005614:	f003 fd12 	bl	800903c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 030f 	and.w	r3, r3, #15
 800561e:	2b00      	cmp	r3, #0
 8005620:	d108      	bne.n	8005634 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f003 ff04 	bl	800943c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005652:	78fb      	ldrb	r3, [r7, #3]
 8005654:	f003 020f 	and.w	r2, r3, #15
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	429a      	cmp	r2, r3
 800565e:	d901      	bls.n	8005664 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e042      	b.n	80056ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005664:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005668:	2b00      	cmp	r3, #0
 800566a:	da0f      	bge.n	800568c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	f003 020f 	and.w	r2, r3, #15
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	3338      	adds	r3, #56	; 0x38
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	3304      	adds	r3, #4
 8005682:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	705a      	strb	r2, [r3, #1]
 800568a:	e00f      	b.n	80056ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	4613      	mov	r3, r2
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4413      	add	r3, r2
 80056a2:	3304      	adds	r3, #4
 80056a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056b2:	78fb      	ldrb	r3, [r7, #3]
 80056b4:	f003 030f 	and.w	r3, r3, #15
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_PCD_EP_ClrStall+0x86>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e00e      	b.n	80056ea <HAL_PCD_EP_ClrStall+0xa4>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68f9      	ldr	r1, [r7, #12]
 80056da:	4618      	mov	r0, r3
 80056dc:	f003 fd1c 	bl	8009118 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b088      	sub	sp, #32
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	3338      	adds	r3, #56	; 0x38
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	4413      	add	r3, r2
 8005716:	3304      	adds	r3, #4
 8005718:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	429a      	cmp	r2, r3
 8005724:	d901      	bls.n	800572a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e067      	b.n	80057fa <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	69fa      	ldr	r2, [r7, #28]
 800573c:	429a      	cmp	r2, r3
 800573e:	d902      	bls.n	8005746 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	3303      	adds	r3, #3
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800574e:	e026      	b.n	800579e <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	695a      	ldr	r2, [r3, #20]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	429a      	cmp	r2, r3
 8005764:	d902      	bls.n	800576c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	3303      	adds	r3, #3
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	b29b      	uxth	r3, r3
 8005780:	6978      	ldr	r0, [r7, #20]
 8005782:	f003 fc01 	bl	8008f88 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	441a      	add	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	441a      	add	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d809      	bhi.n	80057c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057bc:	429a      	cmp	r2, r3
 80057be:	d203      	bcs.n	80057c8 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1c3      	bne.n	8005750 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d811      	bhi.n	80057f8 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	2201      	movs	r2, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	6939      	ldr	r1, [r7, #16]
 80057f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057f4:	4013      	ands	r3, r2
 80057f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3720      	adds	r7, #32
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	333c      	adds	r3, #60	; 0x3c
 800581c:	3304      	adds	r3, #4
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4a19      	ldr	r2, [pc, #100]	; (800589c <PCD_EP_OutXfrComplete_int+0x98>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d124      	bne.n	8005884 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00a      	beq.n	800585a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005850:	461a      	mov	r2, r3
 8005852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005856:	6093      	str	r3, [r2, #8]
 8005858:	e01a      	b.n	8005890 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	f003 0320 	and.w	r3, r3, #32
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005870:	461a      	mov	r2, r3
 8005872:	2320      	movs	r3, #32
 8005874:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f005 fccd 	bl	800b21c <HAL_PCD_DataOutStageCallback>
 8005882:	e005      	b.n	8005890 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f005 fcc6 	bl	800b21c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3718      	adds	r7, #24
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	4f54310a 	.word	0x4f54310a

080058a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	333c      	adds	r3, #60	; 0x3c
 80058b8:	3304      	adds	r3, #4
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	015a      	lsls	r2, r3, #5
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4413      	add	r3, r2
 80058c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a0c      	ldr	r2, [pc, #48]	; (8005904 <PCD_EP_OutSetupPacket_int+0x64>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d90e      	bls.n	80058f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	461a      	mov	r2, r3
 80058ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f005 fc7f 	bl	800b1f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	4f54300a 	.word	0x4f54300a

08005908 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	460b      	mov	r3, r1
 8005912:	70fb      	strb	r3, [r7, #3]
 8005914:	4613      	mov	r3, r2
 8005916:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005926:	883b      	ldrh	r3, [r7, #0]
 8005928:	0419      	lsls	r1, r3, #16
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	430a      	orrs	r2, r1
 8005932:	629a      	str	r2, [r3, #40]	; 0x28
 8005934:	e028      	b.n	8005988 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	0c1b      	lsrs	r3, r3, #16
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
 8005948:	e00d      	b.n	8005966 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3340      	adds	r3, #64	; 0x40
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	0c1b      	lsrs	r3, r3, #16
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	4413      	add	r3, r2
 800595e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	3301      	adds	r3, #1
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	7bfa      	ldrb	r2, [r7, #15]
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	3b01      	subs	r3, #1
 800596c:	429a      	cmp	r2, r3
 800596e:	d3ec      	bcc.n	800594a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005970:	883b      	ldrh	r3, [r7, #0]
 8005972:	0418      	lsls	r0, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6819      	ldr	r1, [r3, #0]
 8005978:	78fb      	ldrb	r3, [r7, #3]
 800597a:	3b01      	subs	r3, #1
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	4302      	orrs	r2, r0
 8005980:	3340      	adds	r3, #64	; 0x40
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	440b      	add	r3, r1
 8005986:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr

08005996 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	887a      	ldrh	r2, [r7, #2]
 80059a8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ea:	f043 0303 	orr.w	r3, r3, #3
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a04:	4b0d      	ldr	r3, [pc, #52]	; (8005a3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a10:	d102      	bne.n	8005a18 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8005a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a16:	e00b      	b.n	8005a30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8005a18:	4b08      	ldr	r3, [pc, #32]	; (8005a3c <HAL_PWREx_GetVoltageRange+0x3c>)
 8005a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a26:	d102      	bne.n	8005a2e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8005a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2c:	e000      	b.n	8005a30 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8005a2e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	40007000 	.word	0x40007000

08005a40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d141      	bne.n	8005ad2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a5a:	d131      	bne.n	8005ac0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a5c:	4b47      	ldr	r3, [pc, #284]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a62:	4a46      	ldr	r2, [pc, #280]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a6c:	4b43      	ldr	r3, [pc, #268]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a74:	4a41      	ldr	r2, [pc, #260]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005a7c:	4b40      	ldr	r3, [pc, #256]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2232      	movs	r2, #50	; 0x32
 8005a82:	fb02 f303 	mul.w	r3, r2, r3
 8005a86:	4a3f      	ldr	r2, [pc, #252]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	0c9b      	lsrs	r3, r3, #18
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a92:	e002      	b.n	8005a9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a9a:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aa6:	d102      	bne.n	8005aae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1f2      	bne.n	8005a94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005aae:	4b33      	ldr	r3, [pc, #204]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab0:	695b      	ldr	r3, [r3, #20]
 8005ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aba:	d158      	bne.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e057      	b.n	8005b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ac0:	4b2e      	ldr	r3, [pc, #184]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ac6:	4a2d      	ldr	r2, [pc, #180]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ad0:	e04d      	b.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ad8:	d141      	bne.n	8005b5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae6:	d131      	bne.n	8005b4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ae8:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aee:	4a23      	ldr	r2, [pc, #140]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005af8:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b00:	4a1e      	ldr	r2, [pc, #120]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2232      	movs	r2, #50	; 0x32
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	4a1c      	ldr	r2, [pc, #112]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	0c9b      	lsrs	r3, r3, #18
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b1e:	e002      	b.n	8005b26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b26:	4b15      	ldr	r3, [pc, #84]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b32:	d102      	bne.n	8005b3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f2      	bne.n	8005b20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b3a:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b46:	d112      	bne.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e011      	b.n	8005b70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b52:	4a0a      	ldr	r2, [pc, #40]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b5c:	e007      	b.n	8005b6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b66:	4a05      	ldr	r2, [pc, #20]	; (8005b7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b68:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b6c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40007000 	.word	0x40007000
 8005b80:	20000000 	.word	0x20000000
 8005b84:	431bde83 	.word	0x431bde83

08005b88 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	4a04      	ldr	r2, [pc, #16]	; (8005ba4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005b92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b96:	6053      	str	r3, [r2, #4]
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40007000 	.word	0x40007000

08005ba8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8005bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bb6:	6053      	str	r3, [r2, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40007000 	.word	0x40007000

08005bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d102      	bne.n	8005bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	f000 bc16 	b.w	8006408 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bdc:	4ba0      	ldr	r3, [pc, #640]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 030c 	and.w	r3, r3, #12
 8005be4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005be6:	4b9e      	ldr	r3, [pc, #632]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	f000 80e4 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4c>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b0c      	cmp	r3, #12
 8005c08:	f040 808b 	bne.w	8005d22 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	f040 8087 	bne.w	8005d22 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c14:	4b92      	ldr	r3, [pc, #584]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_OscConfig+0x64>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e3ed      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	4b8b      	ldr	r3, [pc, #556]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <HAL_RCC_OscConfig+0x7e>
 8005c3c:	4b88      	ldr	r3, [pc, #544]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c44:	e005      	b.n	8005c52 <HAL_RCC_OscConfig+0x8a>
 8005c46:	4b86      	ldr	r3, [pc, #536]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d223      	bcs.n	8005c9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 fdc6 	bl	80067ec <RCC_SetFlashLatencyFromMSIRange>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e3ce      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c6a:	4b7d      	ldr	r3, [pc, #500]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a7c      	ldr	r2, [pc, #496]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c70:	f043 0308 	orr.w	r3, r3, #8
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	4b7a      	ldr	r3, [pc, #488]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	4977      	ldr	r1, [pc, #476]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c88:	4b75      	ldr	r3, [pc, #468]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	021b      	lsls	r3, r3, #8
 8005c96:	4972      	ldr	r1, [pc, #456]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	604b      	str	r3, [r1, #4]
 8005c9c:	e025      	b.n	8005cea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c9e:	4b70      	ldr	r3, [pc, #448]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a6f      	ldr	r2, [pc, #444]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005ca4:	f043 0308 	orr.w	r3, r3, #8
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b6d      	ldr	r3, [pc, #436]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	496a      	ldr	r1, [pc, #424]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cbc:	4b68      	ldr	r3, [pc, #416]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	4965      	ldr	r1, [pc, #404]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d109      	bne.n	8005cea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fd86 	bl	80067ec <RCC_SetFlashLatencyFromMSIRange>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e38e      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005cea:	f000 fcbf 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8005cee:	4601      	mov	r1, r0
 8005cf0:	4b5b      	ldr	r3, [pc, #364]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	4a5a      	ldr	r2, [pc, #360]	; (8005e64 <HAL_RCC_OscConfig+0x29c>)
 8005cfc:	5cd3      	ldrb	r3, [r2, r3]
 8005cfe:	f003 031f 	and.w	r3, r3, #31
 8005d02:	fa21 f303 	lsr.w	r3, r1, r3
 8005d06:	4a58      	ldr	r2, [pc, #352]	; (8005e68 <HAL_RCC_OscConfig+0x2a0>)
 8005d08:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d0a:	4b58      	ldr	r3, [pc, #352]	; (8005e6c <HAL_RCC_OscConfig+0x2a4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fc fd78 	bl	8002804 <HAL_InitTick>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d052      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005d1e:	7bfb      	ldrb	r3, [r7, #15]
 8005d20:	e372      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d032      	beq.n	8005d90 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d2a:	4b4d      	ldr	r3, [pc, #308]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4c      	ldr	r2, [pc, #304]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d30:	f043 0301 	orr.w	r3, r3, #1
 8005d34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d36:	f7fc fdb5 	bl	80028a4 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d3e:	f7fc fdb1 	bl	80028a4 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e35b      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d50:	4b43      	ldr	r3, [pc, #268]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d5c:	4b40      	ldr	r3, [pc, #256]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a3f      	ldr	r2, [pc, #252]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d62:	f043 0308 	orr.w	r3, r3, #8
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a1b      	ldr	r3, [r3, #32]
 8005d74:	493a      	ldr	r1, [pc, #232]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d7a:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	4935      	ldr	r1, [pc, #212]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	604b      	str	r3, [r1, #4]
 8005d8e:	e01a      	b.n	8005dc6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005d90:	4b33      	ldr	r3, [pc, #204]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a32      	ldr	r2, [pc, #200]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d9c:	f7fc fd82 	bl	80028a4 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005da4:	f7fc fd7e 	bl	80028a4 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e328      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005db6:	4b2a      	ldr	r3, [pc, #168]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f0      	bne.n	8005da4 <HAL_RCC_OscConfig+0x1dc>
 8005dc2:	e000      	b.n	8005dc6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005dc4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d073      	beq.n	8005eba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2b08      	cmp	r3, #8
 8005dd6:	d005      	beq.n	8005de4 <HAL_RCC_OscConfig+0x21c>
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d10e      	bne.n	8005dfc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d10b      	bne.n	8005dfc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005de4:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d063      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x2f0>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d15f      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e305      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e04:	d106      	bne.n	8005e14 <HAL_RCC_OscConfig+0x24c>
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	6013      	str	r3, [r2, #0]
 8005e12:	e01d      	b.n	8005e50 <HAL_RCC_OscConfig+0x288>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e1c:	d10c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x270>
 8005e1e:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a0f      	ldr	r2, [pc, #60]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	4b0d      	ldr	r3, [pc, #52]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0c      	ldr	r2, [pc, #48]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	e00b      	b.n	8005e50 <HAL_RCC_OscConfig+0x288>
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <HAL_RCC_OscConfig+0x298>)
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d01b      	beq.n	8005e90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fc fd24 	bl	80028a4 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e5e:	e010      	b.n	8005e82 <HAL_RCC_OscConfig+0x2ba>
 8005e60:	40021000 	.word	0x40021000
 8005e64:	0800ddf0 	.word	0x0800ddf0
 8005e68:	20000000 	.word	0x20000000
 8005e6c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e70:	f7fc fd18 	bl	80028a4 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b64      	cmp	r3, #100	; 0x64
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e2c2      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e82:	4baf      	ldr	r3, [pc, #700]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d0f0      	beq.n	8005e70 <HAL_RCC_OscConfig+0x2a8>
 8005e8e:	e014      	b.n	8005eba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e90:	f7fc fd08 	bl	80028a4 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fc fd04 	bl	80028a4 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e2ae      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eaa:	4ba5      	ldr	r3, [pc, #660]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x2d0>
 8005eb6:	e000      	b.n	8005eba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d060      	beq.n	8005f88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d005      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x310>
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b0c      	cmp	r3, #12
 8005ed0:	d119      	bne.n	8005f06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d116      	bne.n	8005f06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed8:	4b99      	ldr	r3, [pc, #612]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x328>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e28b      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ef0:	4b93      	ldr	r3, [pc, #588]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	4990      	ldr	r1, [pc, #576]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f04:	e040      	b.n	8005f88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d023      	beq.n	8005f56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f0e:	4b8c      	ldr	r3, [pc, #560]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a8b      	ldr	r2, [pc, #556]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1a:	f7fc fcc3 	bl	80028a4 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f22:	f7fc fcbf 	bl	80028a4 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e269      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f34:	4b82      	ldr	r3, [pc, #520]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0f0      	beq.n	8005f22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f40:	4b7f      	ldr	r3, [pc, #508]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	061b      	lsls	r3, r3, #24
 8005f4e:	497c      	ldr	r1, [pc, #496]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	604b      	str	r3, [r1, #4]
 8005f54:	e018      	b.n	8005f88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f56:	4b7a      	ldr	r3, [pc, #488]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a79      	ldr	r2, [pc, #484]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f62:	f7fc fc9f 	bl	80028a4 <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f6a:	f7fc fc9b 	bl	80028a4 <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e245      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f7c:	4b70      	ldr	r3, [pc, #448]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f0      	bne.n	8005f6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d03c      	beq.n	800600e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01c      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f9c:	4b68      	ldr	r3, [pc, #416]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa2:	4a67      	ldr	r2, [pc, #412]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005fa4:	f043 0301 	orr.w	r3, r3, #1
 8005fa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fc fc7a 	bl	80028a4 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fb4:	f7fc fc76 	bl	80028a4 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e220      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fc6:	4b5e      	ldr	r3, [pc, #376]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ef      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x3ec>
 8005fd4:	e01b      	b.n	800600e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fd6:	4b5a      	ldr	r3, [pc, #360]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fdc:	4a58      	ldr	r2, [pc, #352]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8005fde:	f023 0301 	bic.w	r3, r3, #1
 8005fe2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe6:	f7fc fc5d 	bl	80028a4 <HAL_GetTick>
 8005fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005fec:	e008      	b.n	8006000 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fee:	f7fc fc59 	bl	80028a4 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e203      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006000:	4b4f      	ldr	r3, [pc, #316]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1ef      	bne.n	8005fee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 80a6 	beq.w	8006168 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800601c:	2300      	movs	r3, #0
 800601e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006020:	4b47      	ldr	r3, [pc, #284]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800602c:	4b44      	ldr	r3, [pc, #272]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 800602e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006030:	4a43      	ldr	r2, [pc, #268]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006036:	6593      	str	r3, [r2, #88]	; 0x58
 8006038:	4b41      	ldr	r3, [pc, #260]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 800603a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006040:	60bb      	str	r3, [r7, #8]
 8006042:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006044:	2301      	movs	r3, #1
 8006046:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006048:	4b3e      	ldr	r3, [pc, #248]	; (8006144 <HAL_RCC_OscConfig+0x57c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006050:	2b00      	cmp	r3, #0
 8006052:	d118      	bne.n	8006086 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006054:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <HAL_RCC_OscConfig+0x57c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3a      	ldr	r2, [pc, #232]	; (8006144 <HAL_RCC_OscConfig+0x57c>)
 800605a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006060:	f7fc fc20 	bl	80028a4 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006068:	f7fc fc1c 	bl	80028a4 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e1c6      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800607a:	4b32      	ldr	r3, [pc, #200]	; (8006144 <HAL_RCC_OscConfig+0x57c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d108      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4d8>
 800608e:	4b2c      	ldr	r3, [pc, #176]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006094:	4a2a      	ldr	r2, [pc, #168]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006096:	f043 0301 	orr.w	r3, r3, #1
 800609a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800609e:	e024      	b.n	80060ea <HAL_RCC_OscConfig+0x522>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	2b05      	cmp	r3, #5
 80060a6:	d110      	bne.n	80060ca <HAL_RCC_OscConfig+0x502>
 80060a8:	4b25      	ldr	r3, [pc, #148]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ae:	4a24      	ldr	r2, [pc, #144]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060b0:	f043 0304 	orr.w	r3, r3, #4
 80060b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060b8:	4b21      	ldr	r3, [pc, #132]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060be:	4a20      	ldr	r2, [pc, #128]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060c8:	e00f      	b.n	80060ea <HAL_RCC_OscConfig+0x522>
 80060ca:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	4a17      	ldr	r2, [pc, #92]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 80060e2:	f023 0304 	bic.w	r3, r3, #4
 80060e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d016      	beq.n	8006120 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f2:	f7fc fbd7 	bl	80028a4 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f8:	e00a      	b.n	8006110 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060fa:	f7fc fbd3 	bl	80028a4 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f241 3288 	movw	r2, #5000	; 0x1388
 8006108:	4293      	cmp	r3, r2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e17b      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <HAL_RCC_OscConfig+0x578>)
 8006112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ed      	beq.n	80060fa <HAL_RCC_OscConfig+0x532>
 800611e:	e01a      	b.n	8006156 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fc fbc0 	bl	80028a4 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006126:	e00f      	b.n	8006148 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006128:	f7fc fbbc 	bl	80028a4 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	; 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d906      	bls.n	8006148 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e164      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
 800613e:	bf00      	nop
 8006140:	40021000 	.word	0x40021000
 8006144:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006148:	4ba8      	ldr	r3, [pc, #672]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e8      	bne.n	8006128 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006156:	7ffb      	ldrb	r3, [r7, #31]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d105      	bne.n	8006168 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800615c:	4ba3      	ldr	r3, [pc, #652]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	4aa2      	ldr	r2, [pc, #648]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006166:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d03c      	beq.n	80061ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d01c      	beq.n	80061b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800617c:	4b9b      	ldr	r3, [pc, #620]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800617e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006182:	4a9a      	ldr	r2, [pc, #616]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800618c:	f7fc fb8a 	bl	80028a4 <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006194:	f7fc fb86 	bl	80028a4 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e130      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061a6:	4b91      	ldr	r3, [pc, #580]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80061a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ac:	f003 0302 	and.w	r3, r3, #2
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0ef      	beq.n	8006194 <HAL_RCC_OscConfig+0x5cc>
 80061b4:	e01b      	b.n	80061ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061b6:	4b8d      	ldr	r3, [pc, #564]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80061b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061bc:	4a8b      	ldr	r2, [pc, #556]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80061be:	f023 0301 	bic.w	r3, r3, #1
 80061c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c6:	f7fc fb6d 	bl	80028a4 <HAL_GetTick>
 80061ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ce:	f7fc fb69 	bl	80028a4 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e113      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80061e0:	4b82      	ldr	r3, [pc, #520]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80061e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1ef      	bne.n	80061ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8107 	beq.w	8006406 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	f040 80cb 	bne.w	8006398 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006202:	4b7a      	ldr	r3, [pc, #488]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f003 0203 	and.w	r2, r3, #3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	429a      	cmp	r2, r3
 8006214:	d12c      	bne.n	8006270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	3b01      	subs	r3, #1
 8006222:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006224:	429a      	cmp	r2, r3
 8006226:	d123      	bne.n	8006270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006234:	429a      	cmp	r2, r3
 8006236:	d11b      	bne.n	8006270 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006244:	429a      	cmp	r2, r3
 8006246:	d113      	bne.n	8006270 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006252:	085b      	lsrs	r3, r3, #1
 8006254:	3b01      	subs	r3, #1
 8006256:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006258:	429a      	cmp	r2, r3
 800625a:	d109      	bne.n	8006270 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	3b01      	subs	r3, #1
 800626a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d06d      	beq.n	800634c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d068      	beq.n	8006348 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006276:	4b5d      	ldr	r3, [pc, #372]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d105      	bne.n	800628e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006282:	4b5a      	ldr	r3, [pc, #360]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0ba      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006292:	4b56      	ldr	r3, [pc, #344]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a55      	ldr	r2, [pc, #340]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006298:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800629e:	f7fc fb01 	bl	80028a4 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a4:	e008      	b.n	80062b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a6:	f7fc fafd 	bl	80028a4 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e0a7      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062b8:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1f0      	bne.n	80062a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062c4:	4b49      	ldr	r3, [pc, #292]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	4b49      	ldr	r3, [pc, #292]	; (80063f0 <HAL_RCC_OscConfig+0x828>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062d4:	3a01      	subs	r2, #1
 80062d6:	0112      	lsls	r2, r2, #4
 80062d8:	4311      	orrs	r1, r2
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062de:	0212      	lsls	r2, r2, #8
 80062e0:	4311      	orrs	r1, r2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062e6:	0852      	lsrs	r2, r2, #1
 80062e8:	3a01      	subs	r2, #1
 80062ea:	0552      	lsls	r2, r2, #21
 80062ec:	4311      	orrs	r1, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062f2:	0852      	lsrs	r2, r2, #1
 80062f4:	3a01      	subs	r2, #1
 80062f6:	0652      	lsls	r2, r2, #25
 80062f8:	4311      	orrs	r1, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062fe:	06d2      	lsls	r2, r2, #27
 8006300:	430a      	orrs	r2, r1
 8006302:	493a      	ldr	r1, [pc, #232]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006304:	4313      	orrs	r3, r2
 8006306:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006308:	4b38      	ldr	r3, [pc, #224]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a37      	ldr	r2, [pc, #220]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800630e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006312:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4a34      	ldr	r2, [pc, #208]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800631a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006320:	f7fc fac0 	bl	80028a4 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006328:	f7fc fabc 	bl	80028a4 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e066      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800633a:	4b2c      	ldr	r3, [pc, #176]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006346:	e05e      	b.n	8006406 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e05d      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800634c:	4b27      	ldr	r3, [pc, #156]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d156      	bne.n	8006406 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006358:	4b24      	ldr	r3, [pc, #144]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a23      	ldr	r2, [pc, #140]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800635e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006364:	4b21      	ldr	r3, [pc, #132]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	4a20      	ldr	r2, [pc, #128]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800636a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800636e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006370:	f7fc fa98 	bl	80028a4 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006376:	e008      	b.n	800638a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006378:	f7fc fa94 	bl	80028a4 <HAL_GetTick>
 800637c:	4602      	mov	r2, r0
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	2b02      	cmp	r3, #2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e03e      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800638a:	4b18      	ldr	r3, [pc, #96]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0f0      	beq.n	8006378 <HAL_RCC_OscConfig+0x7b0>
 8006396:	e036      	b.n	8006406 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2b0c      	cmp	r3, #12
 800639c:	d031      	beq.n	8006402 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a12      	ldr	r2, [pc, #72]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063bc:	f023 0303 	bic.w	r3, r3, #3
 80063c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <HAL_RCC_OscConfig+0x824>)
 80063c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80063cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d2:	f7fc fa67 	bl	80028a4 <HAL_GetTick>
 80063d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063d8:	e00c      	b.n	80063f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063da:	f7fc fa63 	bl	80028a4 <HAL_GetTick>
 80063de:	4602      	mov	r2, r0
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	1ad3      	subs	r3, r2, r3
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d905      	bls.n	80063f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e00d      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
 80063ec:	40021000 	.word	0x40021000
 80063f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <HAL_RCC_OscConfig+0x848>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1ec      	bne.n	80063da <HAL_RCC_OscConfig+0x812>
 8006400:	e001      	b.n	8006406 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3720      	adds	r7, #32
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021000 	.word	0x40021000

08006414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e10f      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800642c:	4b89      	ldr	r3, [pc, #548]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 030f 	and.w	r3, r3, #15
 8006434:	683a      	ldr	r2, [r7, #0]
 8006436:	429a      	cmp	r2, r3
 8006438:	d910      	bls.n	800645c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800643a:	4b86      	ldr	r3, [pc, #536]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 020f 	bic.w	r2, r3, #15
 8006442:	4984      	ldr	r1, [pc, #528]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4313      	orrs	r3, r2
 8006448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800644a:	4b82      	ldr	r3, [pc, #520]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 030f 	and.w	r3, r3, #15
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d001      	beq.n	800645c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	e0f7      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0301 	and.w	r3, r3, #1
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 8089 	beq.w	800657c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	2b03      	cmp	r3, #3
 8006470:	d133      	bne.n	80064da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006472:	4b79      	ldr	r3, [pc, #484]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0e4      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8006482:	f000 fa0d 	bl	80068a0 <RCC_GetSysClockFreqFromPLLSource>
 8006486:	4602      	mov	r2, r0
 8006488:	4b74      	ldr	r3, [pc, #464]	; (800665c <HAL_RCC_ClockConfig+0x248>)
 800648a:	429a      	cmp	r2, r3
 800648c:	d955      	bls.n	800653a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800648e:	4b72      	ldr	r3, [pc, #456]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10a      	bne.n	80064b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800649a:	4b6f      	ldr	r3, [pc, #444]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064a2:	4a6d      	ldr	r2, [pc, #436]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80064a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064aa:	2380      	movs	r3, #128	; 0x80
 80064ac:	617b      	str	r3, [r7, #20]
 80064ae:	e044      	b.n	800653a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d03e      	beq.n	800653a <HAL_RCC_ClockConfig+0x126>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d13a      	bne.n	800653a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064c4:	4b64      	ldr	r3, [pc, #400]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064cc:	4a62      	ldr	r2, [pc, #392]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80064ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	e02f      	b.n	800653a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d107      	bne.n	80064f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e2:	4b5d      	ldr	r3, [pc, #372]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d115      	bne.n	800651a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e0ac      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064fa:	4b57      	ldr	r3, [pc, #348]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d109      	bne.n	800651a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e0a0      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800650a:	4b53      	ldr	r3, [pc, #332]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006512:	2b00      	cmp	r3, #0
 8006514:	d101      	bne.n	800651a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e098      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800651a:	f000 f8a7 	bl	800666c <HAL_RCC_GetSysClockFreq>
 800651e:	4602      	mov	r2, r0
 8006520:	4b4e      	ldr	r3, [pc, #312]	; (800665c <HAL_RCC_ClockConfig+0x248>)
 8006522:	429a      	cmp	r2, r3
 8006524:	d909      	bls.n	800653a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006526:	4b4c      	ldr	r3, [pc, #304]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800652e:	4a4a      	ldr	r2, [pc, #296]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006534:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800653a:	4b47      	ldr	r3, [pc, #284]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f023 0203 	bic.w	r2, r3, #3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4944      	ldr	r1, [pc, #272]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006548:	4313      	orrs	r3, r2
 800654a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800654c:	f7fc f9aa 	bl	80028a4 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006552:	e00a      	b.n	800656a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006554:	f7fc f9a6 	bl	80028a4 <HAL_GetTick>
 8006558:	4602      	mov	r2, r0
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006562:	4293      	cmp	r3, r2
 8006564:	d901      	bls.n	800656a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8006566:	2303      	movs	r3, #3
 8006568:	e070      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800656a:	4b3b      	ldr	r3, [pc, #236]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 020c 	and.w	r2, r3, #12
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	429a      	cmp	r2, r3
 800657a:	d1eb      	bne.n	8006554 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b00      	cmp	r3, #0
 8006586:	d009      	beq.n	800659c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006588:	4b33      	ldr	r3, [pc, #204]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	4930      	ldr	r1, [pc, #192]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006596:	4313      	orrs	r3, r2
 8006598:	608b      	str	r3, [r1, #8]
 800659a:	e008      	b.n	80065ae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b80      	cmp	r3, #128	; 0x80
 80065a0:	d105      	bne.n	80065ae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065a2:	4b2d      	ldr	r3, [pc, #180]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4a2c      	ldr	r2, [pc, #176]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80065a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065ae:	4b29      	ldr	r3, [pc, #164]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d210      	bcs.n	80065de <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f023 020f 	bic.w	r2, r3, #15
 80065c4:	4923      	ldr	r1, [pc, #140]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <HAL_RCC_ClockConfig+0x240>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 030f 	and.w	r3, r3, #15
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d001      	beq.n	80065de <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e036      	b.n	800664c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ea:	4b1b      	ldr	r3, [pc, #108]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	4918      	ldr	r1, [pc, #96]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4910      	ldr	r1, [pc, #64]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006618:	4313      	orrs	r3, r2
 800661a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800661c:	f000 f826 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8006620:	4601      	mov	r1, r0
 8006622:	4b0d      	ldr	r3, [pc, #52]	; (8006658 <HAL_RCC_ClockConfig+0x244>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	091b      	lsrs	r3, r3, #4
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	4a0c      	ldr	r2, [pc, #48]	; (8006660 <HAL_RCC_ClockConfig+0x24c>)
 800662e:	5cd3      	ldrb	r3, [r2, r3]
 8006630:	f003 031f 	and.w	r3, r3, #31
 8006634:	fa21 f303 	lsr.w	r3, r1, r3
 8006638:	4a0a      	ldr	r2, [pc, #40]	; (8006664 <HAL_RCC_ClockConfig+0x250>)
 800663a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <HAL_RCC_ClockConfig+0x254>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4618      	mov	r0, r3
 8006642:	f7fc f8df 	bl	8002804 <HAL_InitTick>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

  return status;
 800664a:	7bfb      	ldrb	r3, [r7, #15]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	40022000 	.word	0x40022000
 8006658:	40021000 	.word	0x40021000
 800665c:	04c4b400 	.word	0x04c4b400
 8006660:	0800ddf0 	.word	0x0800ddf0
 8006664:	20000000 	.word	0x20000000
 8006668:	20000004 	.word	0x20000004

0800666c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800666c:	b480      	push	{r7}
 800666e:	b089      	sub	sp, #36	; 0x24
 8006670:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	2300      	movs	r3, #0
 8006678:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800667a:	4b3d      	ldr	r3, [pc, #244]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f003 030c 	and.w	r3, r3, #12
 8006682:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006684:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0303 	and.w	r3, r3, #3
 800668c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <HAL_RCC_GetSysClockFreq+0x34>
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d121      	bne.n	80066de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d11e      	bne.n	80066de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80066a0:	4b33      	ldr	r3, [pc, #204]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80066ac:	4b30      	ldr	r3, [pc, #192]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 80066ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	f003 030f 	and.w	r3, r3, #15
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	e005      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80066bc:	4b2c      	ldr	r3, [pc, #176]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80066c8:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <HAL_RCC_GetSysClockFreq+0x108>)
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10d      	bne.n	80066f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80066dc:	e00a      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d102      	bne.n	80066ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066e4:	4b24      	ldr	r3, [pc, #144]	; (8006778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066e6:	61bb      	str	r3, [r7, #24]
 80066e8:	e004      	b.n	80066f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d101      	bne.n	80066f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066f0:	4b21      	ldr	r3, [pc, #132]	; (8006778 <HAL_RCC_GetSysClockFreq+0x10c>)
 80066f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b0c      	cmp	r3, #12
 80066f8:	d133      	bne.n	8006762 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fa:	4b1d      	ldr	r3, [pc, #116]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d002      	beq.n	8006710 <HAL_RCC_GetSysClockFreq+0xa4>
 800670a:	2b03      	cmp	r3, #3
 800670c:	d003      	beq.n	8006716 <HAL_RCC_GetSysClockFreq+0xaa>
 800670e:	e005      	b.n	800671c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006712:	617b      	str	r3, [r7, #20]
      break;
 8006714:	e005      	b.n	8006722 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006718:	617b      	str	r3, [r7, #20]
      break;
 800671a:	e002      	b.n	8006722 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	617b      	str	r3, [r7, #20]
      break;
 8006720:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006722:	4b13      	ldr	r3, [pc, #76]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	091b      	lsrs	r3, r3, #4
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	3301      	adds	r3, #1
 800672e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006730:	4b0f      	ldr	r3, [pc, #60]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 8006732:	68db      	ldr	r3, [r3, #12]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800673a:	697a      	ldr	r2, [r7, #20]
 800673c:	fb02 f203 	mul.w	r2, r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <HAL_RCC_GetSysClockFreq+0x104>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	0e5b      	lsrs	r3, r3, #25
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	3301      	adds	r3, #1
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006760:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006762:	69bb      	ldr	r3, [r7, #24]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3724      	adds	r7, #36	; 0x24
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40021000 	.word	0x40021000
 8006774:	0800de08 	.word	0x0800de08
 8006778:	00f42400 	.word	0x00f42400

0800677c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <HAL_RCC_GetHCLKFreq+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000000 	.word	0x20000000

08006794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006798:	f7ff fff0 	bl	800677c <HAL_RCC_GetHCLKFreq>
 800679c:	4601      	mov	r1, r0
 800679e:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	0a1b      	lsrs	r3, r3, #8
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	4a04      	ldr	r2, [pc, #16]	; (80067bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067aa:	5cd3      	ldrb	r3, [r2, r3]
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40021000 	.word	0x40021000
 80067bc:	0800de00 	.word	0x0800de00

080067c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067c4:	f7ff ffda 	bl	800677c <HAL_RCC_GetHCLKFreq>
 80067c8:	4601      	mov	r1, r0
 80067ca:	4b06      	ldr	r3, [pc, #24]	; (80067e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0adb      	lsrs	r3, r3, #11
 80067d0:	f003 0307 	and.w	r3, r3, #7
 80067d4:	4a04      	ldr	r2, [pc, #16]	; (80067e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067d6:	5cd3      	ldrb	r3, [r2, r3]
 80067d8:	f003 031f 	and.w	r3, r3, #31
 80067dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	40021000 	.word	0x40021000
 80067e8:	0800de00 	.word	0x0800de00

080067ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80067f4:	2300      	movs	r3, #0
 80067f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80067f8:	4b27      	ldr	r3, [pc, #156]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80067fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006804:	f7ff f8fc 	bl	8005a00 <HAL_PWREx_GetVoltageRange>
 8006808:	6178      	str	r0, [r7, #20]
 800680a:	e014      	b.n	8006836 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800680c:	4b22      	ldr	r3, [pc, #136]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	4a21      	ldr	r2, [pc, #132]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006816:	6593      	str	r3, [r2, #88]	; 0x58
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006824:	f7ff f8ec 	bl	8005a00 <HAL_PWREx_GetVoltageRange>
 8006828:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800682c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800682e:	4a1a      	ldr	r2, [pc, #104]	; (8006898 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8006830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006834:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d10b      	bne.n	8006856 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b80      	cmp	r3, #128	; 0x80
 8006842:	d913      	bls.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2ba0      	cmp	r3, #160	; 0xa0
 8006848:	d902      	bls.n	8006850 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800684a:	2302      	movs	r3, #2
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	e00d      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006850:	2301      	movs	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	e00a      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b7f      	cmp	r3, #127	; 0x7f
 800685a:	d902      	bls.n	8006862 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800685c:	2302      	movs	r3, #2
 800685e:	613b      	str	r3, [r7, #16]
 8006860:	e004      	b.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b70      	cmp	r3, #112	; 0x70
 8006866:	d101      	bne.n	800686c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006868:	2301      	movs	r3, #1
 800686a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f023 020f 	bic.w	r2, r3, #15
 8006874:	4909      	ldr	r1, [pc, #36]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800687c:	4b07      	ldr	r3, [pc, #28]	; (800689c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	429a      	cmp	r2, r3
 8006888:	d001      	beq.n	800688e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	40022000 	.word	0x40022000

080068a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80068aa:	4b2d      	ldr	r3, [pc, #180]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d118      	bne.n	80068e8 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80068b6:	4b2a      	ldr	r3, [pc, #168]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0308 	and.w	r3, r3, #8
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d107      	bne.n	80068d2 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80068c2:	4b27      	ldr	r3, [pc, #156]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e005      	b.n	80068de <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80068d2:	4b23      	ldr	r3, [pc, #140]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	091b      	lsrs	r3, r3, #4
 80068d8:	f003 030f 	and.w	r3, r3, #15
 80068dc:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80068de:	4a21      	ldr	r2, [pc, #132]	; (8006964 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e6:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068e8:	4b1d      	ldr	r3, [pc, #116]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f003 0303 	and.w	r3, r3, #3
 80068f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d002      	beq.n	80068fe <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d003      	beq.n	8006904 <RCC_GetSysClockFreqFromPLLSource+0x64>
 80068fc:	e005      	b.n	800690a <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80068fe:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006900:	613b      	str	r3, [r7, #16]
    break;
 8006902:	e005      	b.n	8006910 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8006904:	4b18      	ldr	r3, [pc, #96]	; (8006968 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8006906:	613b      	str	r3, [r7, #16]
    break;
 8006908:	e002      	b.n	8006910 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	613b      	str	r3, [r7, #16]
    break;
 800690e:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006910:	4b13      	ldr	r3, [pc, #76]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	091b      	lsrs	r3, r3, #4
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	3301      	adds	r3, #1
 800691c:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	fb02 f203 	mul.w	r2, r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	fbb2 f3f3 	udiv	r3, r2, r3
 8006934:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	0e5b      	lsrs	r3, r3, #25
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	3301      	adds	r3, #1
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	fbb2 f3f3 	udiv	r3, r2, r3
 800694e:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8006950:	683b      	ldr	r3, [r7, #0]
}
 8006952:	4618      	mov	r0, r3
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	40021000 	.word	0x40021000
 8006964:	0800de08 	.word	0x0800de08
 8006968:	00f42400 	.word	0x00f42400

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006974:	2300      	movs	r3, #0
 8006976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006978:	2300      	movs	r3, #0
 800697a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03d      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d00b      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d804      	bhi.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00e      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006998:	2b20      	cmp	r3, #32
 800699a:	d015      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800699c:	e01d      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800699e:	2b60      	cmp	r3, #96	; 0x60
 80069a0:	d01e      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069a2:	2b80      	cmp	r3, #128	; 0x80
 80069a4:	d01c      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80069a6:	e018      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80069a8:	4b86      	ldr	r3, [pc, #536]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a85      	ldr	r2, [pc, #532]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069b4:	e015      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	2100      	movs	r1, #0
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 fb5d 	bl	800707c <RCCEx_PLLSAI1_Config>
 80069c2:	4603      	mov	r3, r0
 80069c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069c6:	e00c      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	3320      	adds	r3, #32
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fc44 	bl	800725c <RCCEx_PLLSAI2_Config>
 80069d4:	4603      	mov	r3, r0
 80069d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80069d8:	e003      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	74fb      	strb	r3, [r7, #19]
      break;
 80069de:	e000      	b.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80069e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e2:	7cfb      	ldrb	r3, [r7, #19]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10b      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80069e8:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ee:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069f6:	4973      	ldr	r1, [pc, #460]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80069fe:	e001      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	7cfb      	ldrb	r3, [r7, #19]
 8006a02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d042      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a18:	d00f      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8006a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a1e:	d805      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d011      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8006a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a28:	d017      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006a2a:	e01f      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8006a2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a30:	d01f      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a36:	d01c      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006a38:	e018      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006a3a:	4b62      	ldr	r3, [pc, #392]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	4a61      	ldr	r2, [pc, #388]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a46:	e015      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	4618      	mov	r0, r3
 8006a50:	f000 fb14 	bl	800707c <RCCEx_PLLSAI1_Config>
 8006a54:	4603      	mov	r3, r0
 8006a56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a58:	e00c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	3320      	adds	r3, #32
 8006a5e:	2100      	movs	r1, #0
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fbfb 	bl	800725c <RCCEx_PLLSAI2_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006a6a:	e003      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8006a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a74:	7cfb      	ldrb	r3, [r7, #19]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006a7a:	4b52      	ldr	r3, [pc, #328]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	494e      	ldr	r1, [pc, #312]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006a90:	e001      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 809f 	beq.w	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006aa8:	4b46      	ldr	r3, [pc, #280]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00d      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006abe:	4b41      	ldr	r3, [pc, #260]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	4a40      	ldr	r2, [pc, #256]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ac8:	6593      	str	r3, [r2, #88]	; 0x58
 8006aca:	4b3e      	ldr	r3, [pc, #248]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	60bb      	str	r3, [r7, #8]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ada:	4b3b      	ldr	r3, [pc, #236]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a3a      	ldr	r2, [pc, #232]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ae4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ae6:	f7fb fedd 	bl	80028a4 <HAL_GetTick>
 8006aea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006aec:	e009      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aee:	f7fb fed9 	bl	80028a4 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d902      	bls.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	74fb      	strb	r3, [r7, #19]
        break;
 8006b00:	e005      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006b02:	4b31      	ldr	r3, [pc, #196]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0ef      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8006b0e:	7cfb      	ldrb	r3, [r7, #19]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d15b      	bne.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006b14:	4b2b      	ldr	r3, [pc, #172]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d01f      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d019      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b32:	4b24      	ldr	r3, [pc, #144]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006b3e:	4b21      	ldr	r3, [pc, #132]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b44:	4a1f      	ldr	r2, [pc, #124]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	4a1b      	ldr	r2, [pc, #108]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006b5e:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	f003 0301 	and.w	r3, r3, #1
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d016      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fb fe98 	bl	80028a4 <HAL_GetTick>
 8006b74:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b76:	e00b      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b78:	f7fb fe94 	bl	80028a4 <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d902      	bls.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8006b8e:	e006      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b90:	4b0c      	ldr	r3, [pc, #48]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0ec      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ba4:	4b07      	ldr	r3, [pc, #28]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bb4:	4903      	ldr	r1, [pc, #12]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006bbc:	e008      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006bbe:	7cfb      	ldrb	r3, [r7, #19]
 8006bc0:	74bb      	strb	r3, [r7, #18]
 8006bc2:	e005      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006bc4:	40021000 	.word	0x40021000
 8006bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bcc:	7cfb      	ldrb	r3, [r7, #19]
 8006bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bd0:	7c7b      	ldrb	r3, [r7, #17]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bd6:	4ba0      	ldr	r3, [pc, #640]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	4a9f      	ldr	r2, [pc, #636]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006bee:	4b9a      	ldr	r3, [pc, #616]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f023 0203 	bic.w	r2, r3, #3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	4996      	ldr	r1, [pc, #600]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006c10:	4b91      	ldr	r3, [pc, #580]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f023 020c 	bic.w	r2, r3, #12
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	498e      	ldr	r1, [pc, #568]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006c32:	4b89      	ldr	r3, [pc, #548]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	4985      	ldr	r1, [pc, #532]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0308 	and.w	r3, r3, #8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006c54:	4b80      	ldr	r3, [pc, #512]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	497d      	ldr	r1, [pc, #500]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006c76:	4b78      	ldr	r3, [pc, #480]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c84:	4974      	ldr	r1, [pc, #464]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c86:	4313      	orrs	r3, r2
 8006c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c98:	4b6f      	ldr	r3, [pc, #444]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca6:	496c      	ldr	r1, [pc, #432]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cba:	4b67      	ldr	r3, [pc, #412]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cc8:	4963      	ldr	r1, [pc, #396]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cdc:	4b5e      	ldr	r3, [pc, #376]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cea:	495b      	ldr	r1, [pc, #364]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00a      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006cfe:	4b56      	ldr	r3, [pc, #344]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0c:	4952      	ldr	r1, [pc, #328]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00a      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d20:	4b4d      	ldr	r3, [pc, #308]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	494a      	ldr	r1, [pc, #296]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d30:	4313      	orrs	r3, r2
 8006d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d42:	4b45      	ldr	r3, [pc, #276]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d50:	4941      	ldr	r1, [pc, #260]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00a      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d64:	4b3c      	ldr	r3, [pc, #240]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d6a:	f023 0203 	bic.w	r2, r3, #3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	4939      	ldr	r1, [pc, #228]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d74:	4313      	orrs	r3, r2
 8006d76:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d028      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d86:	4b34      	ldr	r3, [pc, #208]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d94:	4930      	ldr	r1, [pc, #192]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006d96:	4313      	orrs	r3, r2
 8006d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da4:	d106      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006da6:	4b2c      	ldr	r3, [pc, #176]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	4a2b      	ldr	r2, [pc, #172]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db0:	60d3      	str	r3, [r2, #12]
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006dbc:	d10c      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 f959 	bl	800707c <RCCEx_PLLSAI1_Config>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006dce:	7cfb      	ldrb	r3, [r7, #19]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 8006dd4:	7cfb      	ldrb	r3, [r7, #19]
 8006dd6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d04d      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dec:	d108      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006dee:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006df4:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006df6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dfa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006dfe:	e012      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8006e00:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e06:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1e:	490e      	ldr	r1, [pc, #56]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e2e:	d106      	bne.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e30:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	4a08      	ldr	r2, [pc, #32]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e3a:	60d3      	str	r3, [r2, #12]
 8006e3c:	e020      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006e48:	4b03      	ldr	r3, [pc, #12]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	4a02      	ldr	r2, [pc, #8]	; (8006e58 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e52:	60d3      	str	r3, [r2, #12]
 8006e54:	e014      	b.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006e56:	bf00      	nop
 8006e58:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e64:	d10c      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	3304      	adds	r3, #4
 8006e6a:	2101      	movs	r1, #1
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 f905 	bl	800707c <RCCEx_PLLSAI1_Config>
 8006e72:	4603      	mov	r3, r0
 8006e74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006e76:	7cfb      	ldrb	r3, [r7, #19]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006e7c:	7cfb      	ldrb	r3, [r7, #19]
 8006e7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d028      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e8c:	4b7a      	ldr	r3, [pc, #488]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e9a:	4977      	ldr	r1, [pc, #476]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eaa:	d106      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eac:	4b72      	ldr	r3, [pc, #456]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4a71      	ldr	r2, [pc, #452]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eb6:	60d3      	str	r3, [r2, #12]
 8006eb8:	e011      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f8d6 	bl	800707c <RCCEx_PLLSAI1_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ed4:	7cfb      	ldrb	r3, [r7, #19]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8006eda:	7cfb      	ldrb	r3, [r7, #19]
 8006edc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eea:	4b63      	ldr	r3, [pc, #396]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ef0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006efa:	495f      	ldr	r1, [pc, #380]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f0c:	d10c      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 f8b1 	bl	800707c <RCCEx_PLLSAI1_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006f1e:	7cfb      	ldrb	r3, [r7, #19]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8006f24:	7cfb      	ldrb	r3, [r7, #19]
 8006f26:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f34:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f3a:	f023 0204 	bic.w	r2, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f44:	494c      	ldr	r1, [pc, #304]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d00b      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006f58:	4b47      	ldr	r3, [pc, #284]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f5e:	f023 0218 	bic.w	r2, r3, #24
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f68:	4943      	ldr	r1, [pc, #268]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d035      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f7c:	4b3e      	ldr	r3, [pc, #248]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a3d      	ldr	r2, [pc, #244]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006f82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f88:	f7fb fc8c 	bl	80028a4 <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f8e:	e009      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f90:	f7fb fc88 	bl	80028a4 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d902      	bls.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	74fb      	strb	r3, [r7, #19]
        break;
 8006fa2:	e005      	b.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006fa4:	4b34      	ldr	r3, [pc, #208]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1ef      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8006fb0:	7cfb      	ldrb	r3, [r7, #19]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d113      	bne.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8006fb6:	4b30      	ldr	r3, [pc, #192]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc6:	492c      	ldr	r1, [pc, #176]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3320      	adds	r3, #32
 8006fd2:	2102      	movs	r1, #2
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f941 	bl	800725c <RCCEx_PLLSAI2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8006fde:	7cfb      	ldrb	r3, [r7, #19]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 8006fe4:	7cfb      	ldrb	r3, [r7, #19]
 8006fe6:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d01e      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8006ff4:	4b20      	ldr	r3, [pc, #128]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007004:	491c      	ldr	r1, [pc, #112]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8007006:	4313      	orrs	r3, r2
 8007008:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007016:	d10c      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	3320      	adds	r3, #32
 800701c:	2101      	movs	r1, #1
 800701e:	4618      	mov	r0, r3
 8007020:	f000 f91c 	bl	800725c <RCCEx_PLLSAI2_Config>
 8007024:	4603      	mov	r3, r0
 8007026:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007028:	7cfb      	ldrb	r3, [r7, #19]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      {
        /* set overall return value */
        status = ret;
 800702e:	7cfb      	ldrb	r3, [r7, #19]
 8007030:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d017      	beq.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800703e:	4b0e      	ldr	r3, [pc, #56]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8007040:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007044:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800704e:	490a      	ldr	r1, [pc, #40]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800705c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007060:	d105      	bne.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x702>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007062:	4b05      	ldr	r3, [pc, #20]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	4a04      	ldr	r2, [pc, #16]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8007068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800706e:	7cbb      	ldrb	r3, [r7, #18]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40021000 	.word	0x40021000

0800707c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800708a:	4b70      	ldr	r3, [pc, #448]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007096:	4b6d      	ldr	r3, [pc, #436]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	f003 0203 	and.w	r2, r3, #3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d103      	bne.n	80070ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
       ||
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d13f      	bne.n	800712e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
 80070b2:	e03c      	b.n	800712e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d00c      	beq.n	80070d6 <RCCEx_PLLSAI1_Config+0x5a>
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d013      	beq.n	80070e8 <RCCEx_PLLSAI1_Config+0x6c>
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d120      	bne.n	8007106 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80070c4:	4b61      	ldr	r3, [pc, #388]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11d      	bne.n	800710c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070d4:	e01a      	b.n	800710c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80070d6:	4b5d      	ldr	r3, [pc, #372]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d116      	bne.n	8007110 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80070e6:	e013      	b.n	8007110 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80070e8:	4b58      	ldr	r3, [pc, #352]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10f      	bne.n	8007114 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80070f4:	4b55      	ldr	r3, [pc, #340]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d109      	bne.n	8007114 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007104:	e006      	b.n	8007114 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	73fb      	strb	r3, [r7, #15]
      break;
 800710a:	e004      	b.n	8007116 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800710c:	bf00      	nop
 800710e:	e002      	b.n	8007116 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007110:	bf00      	nop
 8007112:	e000      	b.n	8007116 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8007114:	bf00      	nop
    }

    if(status == HAL_OK)
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d108      	bne.n	800712e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800711c:	4b4b      	ldr	r3, [pc, #300]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	f023 0203 	bic.w	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4948      	ldr	r1, [pc, #288]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 800712a:	4313      	orrs	r3, r2
 800712c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 8086 	bne.w	8007242 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007136:	4b45      	ldr	r3, [pc, #276]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a44      	ldr	r2, [pc, #272]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 800713c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007142:	f7fb fbaf 	bl	80028a4 <HAL_GetTick>
 8007146:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007148:	e009      	b.n	800715e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800714a:	f7fb fbab 	bl	80028a4 <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d902      	bls.n	800715e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	73fb      	strb	r3, [r7, #15]
        break;
 800715c:	e005      	b.n	800716a <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800715e:	4b3b      	ldr	r3, [pc, #236]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1ef      	bne.n	800714a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800716a:	7bfb      	ldrb	r3, [r7, #15]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d168      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d113      	bne.n	800719e <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007176:	4b35      	ldr	r3, [pc, #212]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	4b35      	ldr	r3, [pc, #212]	; (8007250 <RCCEx_PLLSAI1_Config+0x1d4>)
 800717c:	4013      	ands	r3, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	0211      	lsls	r1, r2, #8
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	68d2      	ldr	r2, [r2, #12]
 8007188:	06d2      	lsls	r2, r2, #27
 800718a:	4311      	orrs	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	6852      	ldr	r2, [r2, #4]
 8007190:	3a01      	subs	r2, #1
 8007192:	0112      	lsls	r2, r2, #4
 8007194:	430a      	orrs	r2, r1
 8007196:	492d      	ldr	r1, [pc, #180]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007198:	4313      	orrs	r3, r2
 800719a:	610b      	str	r3, [r1, #16]
 800719c:	e02d      	b.n	80071fa <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d115      	bne.n	80071d0 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	4b2a      	ldr	r3, [pc, #168]	; (8007254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80071aa:	4013      	ands	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6892      	ldr	r2, [r2, #8]
 80071b0:	0211      	lsls	r1, r2, #8
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	6912      	ldr	r2, [r2, #16]
 80071b6:	0852      	lsrs	r2, r2, #1
 80071b8:	3a01      	subs	r2, #1
 80071ba:	0552      	lsls	r2, r2, #21
 80071bc:	4311      	orrs	r1, r2
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6852      	ldr	r2, [r2, #4]
 80071c2:	3a01      	subs	r2, #1
 80071c4:	0112      	lsls	r2, r2, #4
 80071c6:	430a      	orrs	r2, r1
 80071c8:	4920      	ldr	r1, [pc, #128]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	610b      	str	r3, [r1, #16]
 80071ce:	e014      	b.n	80071fa <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80071d0:	4b1e      	ldr	r3, [pc, #120]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	4b20      	ldr	r3, [pc, #128]	; (8007258 <RCCEx_PLLSAI1_Config+0x1dc>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	6892      	ldr	r2, [r2, #8]
 80071dc:	0211      	lsls	r1, r2, #8
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	6952      	ldr	r2, [r2, #20]
 80071e2:	0852      	lsrs	r2, r2, #1
 80071e4:	3a01      	subs	r2, #1
 80071e6:	0652      	lsls	r2, r2, #25
 80071e8:	4311      	orrs	r1, r2
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6852      	ldr	r2, [r2, #4]
 80071ee:	3a01      	subs	r2, #1
 80071f0:	0112      	lsls	r2, r2, #4
 80071f2:	430a      	orrs	r2, r1
 80071f4:	4915      	ldr	r1, [pc, #84]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80071fa:	4b14      	ldr	r3, [pc, #80]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a13      	ldr	r2, [pc, #76]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007204:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007206:	f7fb fb4d 	bl	80028a4 <HAL_GetTick>
 800720a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800720c:	e009      	b.n	8007222 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800720e:	f7fb fb49 	bl	80028a4 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d902      	bls.n	8007222 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	73fb      	strb	r3, [r7, #15]
          break;
 8007220:	e005      	b.n	800722e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007222:	4b0a      	ldr	r3, [pc, #40]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0ef      	beq.n	800720e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d106      	bne.n	8007242 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	4903      	ldr	r1, [pc, #12]	; (800724c <RCCEx_PLLSAI1_Config+0x1d0>)
 800723e:	4313      	orrs	r3, r2
 8007240:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40021000 	.word	0x40021000
 8007250:	07ff800f 	.word	0x07ff800f
 8007254:	ff9f800f 	.word	0xff9f800f
 8007258:	f9ff800f 	.word	0xf9ff800f

0800725c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800726a:	4b70      	ldr	r3, [pc, #448]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00e      	beq.n	8007294 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007276:	4b6d      	ldr	r3, [pc, #436]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	f003 0203 	and.w	r2, r3, #3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d103      	bne.n	800728e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
       ||
 800728a:	2b00      	cmp	r3, #0
 800728c:	d13f      	bne.n	800730e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
 8007292:	e03c      	b.n	800730e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d00c      	beq.n	80072b6 <RCCEx_PLLSAI2_Config+0x5a>
 800729c:	2b03      	cmp	r3, #3
 800729e:	d013      	beq.n	80072c8 <RCCEx_PLLSAI2_Config+0x6c>
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d120      	bne.n	80072e6 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072a4:	4b61      	ldr	r3, [pc, #388]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d11d      	bne.n	80072ec <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072b4:	e01a      	b.n	80072ec <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072b6:	4b5d      	ldr	r3, [pc, #372]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d116      	bne.n	80072f0 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072c6:	e013      	b.n	80072f0 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80072c8:	4b58      	ldr	r3, [pc, #352]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10f      	bne.n	80072f4 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80072d4:	4b55      	ldr	r3, [pc, #340]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80072e4:	e006      	b.n	80072f4 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ea:	e004      	b.n	80072f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80072ec:	bf00      	nop
 80072ee:	e002      	b.n	80072f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80072f0:	bf00      	nop
 80072f2:	e000      	b.n	80072f6 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 80072f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80072fc:	4b4b      	ldr	r3, [pc, #300]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f023 0203 	bic.w	r2, r3, #3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4948      	ldr	r1, [pc, #288]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 800730a:	4313      	orrs	r3, r2
 800730c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	2b00      	cmp	r3, #0
 8007312:	f040 8086 	bne.w	8007422 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007316:	4b45      	ldr	r3, [pc, #276]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a44      	ldr	r2, [pc, #272]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 800731c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007322:	f7fb fabf 	bl	80028a4 <HAL_GetTick>
 8007326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007328:	e009      	b.n	800733e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800732a:	f7fb fabb 	bl	80028a4 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	2b02      	cmp	r3, #2
 8007336:	d902      	bls.n	800733e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8007338:	2303      	movs	r3, #3
 800733a:	73fb      	strb	r3, [r7, #15]
        break;
 800733c:	e005      	b.n	800734a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800733e:	4b3b      	ldr	r3, [pc, #236]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1ef      	bne.n	800732a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d168      	bne.n	8007422 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d113      	bne.n	800737e <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007356:	4b35      	ldr	r3, [pc, #212]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007358:	695a      	ldr	r2, [r3, #20]
 800735a:	4b35      	ldr	r3, [pc, #212]	; (8007430 <RCCEx_PLLSAI2_Config+0x1d4>)
 800735c:	4013      	ands	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	6892      	ldr	r2, [r2, #8]
 8007362:	0211      	lsls	r1, r2, #8
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	68d2      	ldr	r2, [r2, #12]
 8007368:	06d2      	lsls	r2, r2, #27
 800736a:	4311      	orrs	r1, r2
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	6852      	ldr	r2, [r2, #4]
 8007370:	3a01      	subs	r2, #1
 8007372:	0112      	lsls	r2, r2, #4
 8007374:	430a      	orrs	r2, r1
 8007376:	492d      	ldr	r1, [pc, #180]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007378:	4313      	orrs	r3, r2
 800737a:	614b      	str	r3, [r1, #20]
 800737c:	e02d      	b.n	80073da <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d115      	bne.n	80073b0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007384:	4b29      	ldr	r3, [pc, #164]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007386:	695a      	ldr	r2, [r3, #20]
 8007388:	4b2a      	ldr	r3, [pc, #168]	; (8007434 <RCCEx_PLLSAI2_Config+0x1d8>)
 800738a:	4013      	ands	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6892      	ldr	r2, [r2, #8]
 8007390:	0211      	lsls	r1, r2, #8
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6912      	ldr	r2, [r2, #16]
 8007396:	0852      	lsrs	r2, r2, #1
 8007398:	3a01      	subs	r2, #1
 800739a:	0552      	lsls	r2, r2, #21
 800739c:	4311      	orrs	r1, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6852      	ldr	r2, [r2, #4]
 80073a2:	3a01      	subs	r2, #1
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	430a      	orrs	r2, r1
 80073a8:	4920      	ldr	r1, [pc, #128]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	614b      	str	r3, [r1, #20]
 80073ae:	e014      	b.n	80073da <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80073b0:	4b1e      	ldr	r3, [pc, #120]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80073b2:	695a      	ldr	r2, [r3, #20]
 80073b4:	4b20      	ldr	r3, [pc, #128]	; (8007438 <RCCEx_PLLSAI2_Config+0x1dc>)
 80073b6:	4013      	ands	r3, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	6892      	ldr	r2, [r2, #8]
 80073bc:	0211      	lsls	r1, r2, #8
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6952      	ldr	r2, [r2, #20]
 80073c2:	0852      	lsrs	r2, r2, #1
 80073c4:	3a01      	subs	r2, #1
 80073c6:	0652      	lsls	r2, r2, #25
 80073c8:	4311      	orrs	r1, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6852      	ldr	r2, [r2, #4]
 80073ce:	3a01      	subs	r2, #1
 80073d0:	0112      	lsls	r2, r2, #4
 80073d2:	430a      	orrs	r2, r1
 80073d4:	4915      	ldr	r1, [pc, #84]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a13      	ldr	r2, [pc, #76]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 80073e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e6:	f7fb fa5d 	bl	80028a4 <HAL_GetTick>
 80073ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80073ec:	e009      	b.n	8007402 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80073ee:	f7fb fa59 	bl	80028a4 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d902      	bls.n	8007402 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	73fb      	strb	r3, [r7, #15]
          break;
 8007400:	e005      	b.n	800740e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007402:	4b0a      	ldr	r3, [pc, #40]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d0ef      	beq.n	80073ee <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800740e:	7bfb      	ldrb	r3, [r7, #15]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d106      	bne.n	8007422 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007414:	4b05      	ldr	r3, [pc, #20]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 8007416:	695a      	ldr	r2, [r3, #20]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	4903      	ldr	r1, [pc, #12]	; (800742c <RCCEx_PLLSAI2_Config+0x1d0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40021000 	.word	0x40021000
 8007430:	07ff800f 	.word	0x07ff800f
 8007434:	ff9f800f 	.word	0xff9f800f
 8007438:	f9ff800f 	.word	0xf9ff800f

0800743c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e042      	b.n	80074d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7fb f869 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2224      	movs	r2, #36	; 0x24
 800746a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f8c4 	bl	800760c <UART_SetConfig>
 8007484:	4603      	mov	r3, r0
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e022      	b.n	80074d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fb8a 	bl	8007bb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689a      	ldr	r2, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f042 0201 	orr.w	r2, r2, #1
 80074ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fc11 	bl	8007cf4 <UART_CheckIdleState>
 80074d2:	4603      	mov	r3, r0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	f040 8084 	bne.w	8007600 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <HAL_UART_Transmit+0x28>
 80074fe:	88fb      	ldrh	r3, [r7, #6]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e07c      	b.n	8007602 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_UART_Transmit+0x3a>
 8007512:	2302      	movs	r3, #2
 8007514:	e075      	b.n	8007602 <HAL_UART_Transmit+0x126>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2221      	movs	r2, #33	; 0x21
 800752a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800752e:	f7fb f9b9 	bl	80028a4 <HAL_GetTick>
 8007532:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800754c:	d108      	bne.n	8007560 <HAL_UART_Transmit+0x84>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d104      	bne.n	8007560 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	61bb      	str	r3, [r7, #24]
 800755e:	e003      	b.n	8007568 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007564:	2300      	movs	r3, #0
 8007566:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8007570:	e02d      	b.n	80075ce <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	9300      	str	r3, [sp, #0]
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2200      	movs	r2, #0
 800757a:	2180      	movs	r1, #128	; 0x80
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 fc01 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d001      	beq.n	800758c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e03a      	b.n	8007602 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	881a      	ldrh	r2, [r3, #0]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800759e:	b292      	uxth	r2, r2
 80075a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	3302      	adds	r3, #2
 80075a6:	61bb      	str	r3, [r7, #24]
 80075a8:	e008      	b.n	80075bc <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	b292      	uxth	r2, r2
 80075b4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	3301      	adds	r3, #1
 80075ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1cb      	bne.n	8007572 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	9300      	str	r3, [sp, #0]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2200      	movs	r2, #0
 80075e2:	2140      	movs	r1, #64	; 0x40
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fbcd 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e006      	b.n	8007602 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e000      	b.n	8007602 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007600:	2302      	movs	r3, #2
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	3720      	adds	r7, #32
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
	...

0800760c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800760c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007610:	b088      	sub	sp, #32
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007616:	2300      	movs	r3, #0
 8007618:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	695b      	ldr	r3, [r3, #20]
 8007628:	431a      	orrs	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	4313      	orrs	r3, r2
 8007630:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	4313      	orrs	r3, r2
 800763a:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4bb1      	ldr	r3, [pc, #708]	; (8007908 <UART_SetConfig+0x2fc>)
 8007644:	4013      	ands	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	69f9      	ldr	r1, [r7, #28]
 800764c:	430b      	orrs	r3, r1
 800764e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	430a      	orrs	r2, r1
 8007664:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4aa6      	ldr	r2, [pc, #664]	; (800790c <UART_SetConfig+0x300>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d004      	beq.n	8007680 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	69fa      	ldr	r2, [r7, #28]
 800767c:	4313      	orrs	r3, r2
 800767e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800768a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	6812      	ldr	r2, [r2, #0]
 8007692:	69f9      	ldr	r1, [r7, #28]
 8007694:	430b      	orrs	r3, r1
 8007696:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	f023 010f 	bic.w	r1, r3, #15
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a97      	ldr	r2, [pc, #604]	; (8007910 <UART_SetConfig+0x304>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d121      	bne.n	80076fc <UART_SetConfig+0xf0>
 80076b8:	4b96      	ldr	r3, [pc, #600]	; (8007914 <UART_SetConfig+0x308>)
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076be:	f003 0303 	and.w	r3, r3, #3
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d816      	bhi.n	80076f4 <UART_SetConfig+0xe8>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <UART_SetConfig+0xc0>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	080076dd 	.word	0x080076dd
 80076d0:	080076e9 	.word	0x080076e9
 80076d4:	080076e3 	.word	0x080076e3
 80076d8:	080076ef 	.word	0x080076ef
 80076dc:	2301      	movs	r3, #1
 80076de:	76fb      	strb	r3, [r7, #27]
 80076e0:	e0e8      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80076e2:	2302      	movs	r3, #2
 80076e4:	76fb      	strb	r3, [r7, #27]
 80076e6:	e0e5      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80076e8:	2304      	movs	r3, #4
 80076ea:	76fb      	strb	r3, [r7, #27]
 80076ec:	e0e2      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80076ee:	2308      	movs	r3, #8
 80076f0:	76fb      	strb	r3, [r7, #27]
 80076f2:	e0df      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80076f4:	2310      	movs	r3, #16
 80076f6:	76fb      	strb	r3, [r7, #27]
 80076f8:	bf00      	nop
 80076fa:	e0db      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a85      	ldr	r2, [pc, #532]	; (8007918 <UART_SetConfig+0x30c>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d134      	bne.n	8007770 <UART_SetConfig+0x164>
 8007706:	4b83      	ldr	r3, [pc, #524]	; (8007914 <UART_SetConfig+0x308>)
 8007708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800770c:	f003 030c 	and.w	r3, r3, #12
 8007710:	2b0c      	cmp	r3, #12
 8007712:	d829      	bhi.n	8007768 <UART_SetConfig+0x15c>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x110>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	08007751 	.word	0x08007751
 8007720:	08007769 	.word	0x08007769
 8007724:	08007769 	.word	0x08007769
 8007728:	08007769 	.word	0x08007769
 800772c:	0800775d 	.word	0x0800775d
 8007730:	08007769 	.word	0x08007769
 8007734:	08007769 	.word	0x08007769
 8007738:	08007769 	.word	0x08007769
 800773c:	08007757 	.word	0x08007757
 8007740:	08007769 	.word	0x08007769
 8007744:	08007769 	.word	0x08007769
 8007748:	08007769 	.word	0x08007769
 800774c:	08007763 	.word	0x08007763
 8007750:	2300      	movs	r3, #0
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	e0ae      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007756:	2302      	movs	r3, #2
 8007758:	76fb      	strb	r3, [r7, #27]
 800775a:	e0ab      	b.n	80078b4 <UART_SetConfig+0x2a8>
 800775c:	2304      	movs	r3, #4
 800775e:	76fb      	strb	r3, [r7, #27]
 8007760:	e0a8      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007762:	2308      	movs	r3, #8
 8007764:	76fb      	strb	r3, [r7, #27]
 8007766:	e0a5      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007768:	2310      	movs	r3, #16
 800776a:	76fb      	strb	r3, [r7, #27]
 800776c:	bf00      	nop
 800776e:	e0a1      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a69      	ldr	r2, [pc, #420]	; (800791c <UART_SetConfig+0x310>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d120      	bne.n	80077bc <UART_SetConfig+0x1b0>
 800777a:	4b66      	ldr	r3, [pc, #408]	; (8007914 <UART_SetConfig+0x308>)
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007784:	2b10      	cmp	r3, #16
 8007786:	d00f      	beq.n	80077a8 <UART_SetConfig+0x19c>
 8007788:	2b10      	cmp	r3, #16
 800778a:	d802      	bhi.n	8007792 <UART_SetConfig+0x186>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <UART_SetConfig+0x190>
 8007790:	e010      	b.n	80077b4 <UART_SetConfig+0x1a8>
 8007792:	2b20      	cmp	r3, #32
 8007794:	d005      	beq.n	80077a2 <UART_SetConfig+0x196>
 8007796:	2b30      	cmp	r3, #48	; 0x30
 8007798:	d009      	beq.n	80077ae <UART_SetConfig+0x1a2>
 800779a:	e00b      	b.n	80077b4 <UART_SetConfig+0x1a8>
 800779c:	2300      	movs	r3, #0
 800779e:	76fb      	strb	r3, [r7, #27]
 80077a0:	e088      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077a2:	2302      	movs	r3, #2
 80077a4:	76fb      	strb	r3, [r7, #27]
 80077a6:	e085      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077a8:	2304      	movs	r3, #4
 80077aa:	76fb      	strb	r3, [r7, #27]
 80077ac:	e082      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077ae:	2308      	movs	r3, #8
 80077b0:	76fb      	strb	r3, [r7, #27]
 80077b2:	e07f      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077b4:	2310      	movs	r3, #16
 80077b6:	76fb      	strb	r3, [r7, #27]
 80077b8:	bf00      	nop
 80077ba:	e07b      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a57      	ldr	r2, [pc, #348]	; (8007920 <UART_SetConfig+0x314>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d120      	bne.n	8007808 <UART_SetConfig+0x1fc>
 80077c6:	4b53      	ldr	r3, [pc, #332]	; (8007914 <UART_SetConfig+0x308>)
 80077c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d00f      	beq.n	80077f4 <UART_SetConfig+0x1e8>
 80077d4:	2b40      	cmp	r3, #64	; 0x40
 80077d6:	d802      	bhi.n	80077de <UART_SetConfig+0x1d2>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <UART_SetConfig+0x1dc>
 80077dc:	e010      	b.n	8007800 <UART_SetConfig+0x1f4>
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d005      	beq.n	80077ee <UART_SetConfig+0x1e2>
 80077e2:	2bc0      	cmp	r3, #192	; 0xc0
 80077e4:	d009      	beq.n	80077fa <UART_SetConfig+0x1ee>
 80077e6:	e00b      	b.n	8007800 <UART_SetConfig+0x1f4>
 80077e8:	2300      	movs	r3, #0
 80077ea:	76fb      	strb	r3, [r7, #27]
 80077ec:	e062      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077ee:	2302      	movs	r3, #2
 80077f0:	76fb      	strb	r3, [r7, #27]
 80077f2:	e05f      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077f4:	2304      	movs	r3, #4
 80077f6:	76fb      	strb	r3, [r7, #27]
 80077f8:	e05c      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80077fa:	2308      	movs	r3, #8
 80077fc:	76fb      	strb	r3, [r7, #27]
 80077fe:	e059      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007800:	2310      	movs	r3, #16
 8007802:	76fb      	strb	r3, [r7, #27]
 8007804:	bf00      	nop
 8007806:	e055      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a45      	ldr	r2, [pc, #276]	; (8007924 <UART_SetConfig+0x318>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d124      	bne.n	800785c <UART_SetConfig+0x250>
 8007812:	4b40      	ldr	r3, [pc, #256]	; (8007914 <UART_SetConfig+0x308>)
 8007814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007820:	d012      	beq.n	8007848 <UART_SetConfig+0x23c>
 8007822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007826:	d802      	bhi.n	800782e <UART_SetConfig+0x222>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <UART_SetConfig+0x230>
 800782c:	e012      	b.n	8007854 <UART_SetConfig+0x248>
 800782e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007832:	d006      	beq.n	8007842 <UART_SetConfig+0x236>
 8007834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007838:	d009      	beq.n	800784e <UART_SetConfig+0x242>
 800783a:	e00b      	b.n	8007854 <UART_SetConfig+0x248>
 800783c:	2300      	movs	r3, #0
 800783e:	76fb      	strb	r3, [r7, #27]
 8007840:	e038      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007842:	2302      	movs	r3, #2
 8007844:	76fb      	strb	r3, [r7, #27]
 8007846:	e035      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007848:	2304      	movs	r3, #4
 800784a:	76fb      	strb	r3, [r7, #27]
 800784c:	e032      	b.n	80078b4 <UART_SetConfig+0x2a8>
 800784e:	2308      	movs	r3, #8
 8007850:	76fb      	strb	r3, [r7, #27]
 8007852:	e02f      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007854:	2310      	movs	r3, #16
 8007856:	76fb      	strb	r3, [r7, #27]
 8007858:	bf00      	nop
 800785a:	e02b      	b.n	80078b4 <UART_SetConfig+0x2a8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2a      	ldr	r2, [pc, #168]	; (800790c <UART_SetConfig+0x300>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d124      	bne.n	80078b0 <UART_SetConfig+0x2a4>
 8007866:	4b2b      	ldr	r3, [pc, #172]	; (8007914 <UART_SetConfig+0x308>)
 8007868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007874:	d012      	beq.n	800789c <UART_SetConfig+0x290>
 8007876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800787a:	d802      	bhi.n	8007882 <UART_SetConfig+0x276>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d007      	beq.n	8007890 <UART_SetConfig+0x284>
 8007880:	e012      	b.n	80078a8 <UART_SetConfig+0x29c>
 8007882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007886:	d006      	beq.n	8007896 <UART_SetConfig+0x28a>
 8007888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788c:	d009      	beq.n	80078a2 <UART_SetConfig+0x296>
 800788e:	e00b      	b.n	80078a8 <UART_SetConfig+0x29c>
 8007890:	2300      	movs	r3, #0
 8007892:	76fb      	strb	r3, [r7, #27]
 8007894:	e00e      	b.n	80078b4 <UART_SetConfig+0x2a8>
 8007896:	2302      	movs	r3, #2
 8007898:	76fb      	strb	r3, [r7, #27]
 800789a:	e00b      	b.n	80078b4 <UART_SetConfig+0x2a8>
 800789c:	2304      	movs	r3, #4
 800789e:	76fb      	strb	r3, [r7, #27]
 80078a0:	e008      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80078a2:	2308      	movs	r3, #8
 80078a4:	76fb      	strb	r3, [r7, #27]
 80078a6:	e005      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80078a8:	2310      	movs	r3, #16
 80078aa:	76fb      	strb	r3, [r7, #27]
 80078ac:	bf00      	nop
 80078ae:	e001      	b.n	80078b4 <UART_SetConfig+0x2a8>
 80078b0:	2310      	movs	r3, #16
 80078b2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a14      	ldr	r2, [pc, #80]	; (800790c <UART_SetConfig+0x300>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f040 80a1 	bne.w	8007a02 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c0:	7efb      	ldrb	r3, [r7, #27]
 80078c2:	2b08      	cmp	r3, #8
 80078c4:	d836      	bhi.n	8007934 <UART_SetConfig+0x328>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <UART_SetConfig+0x2c0>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	080078f1 	.word	0x080078f1
 80078d0:	08007935 	.word	0x08007935
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007935 	.word	0x08007935
 80078dc:	080078ff 	.word	0x080078ff
 80078e0:	08007935 	.word	0x08007935
 80078e4:	08007935 	.word	0x08007935
 80078e8:	08007935 	.word	0x08007935
 80078ec:	0800792d 	.word	0x0800792d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078f0:	f7fe ff50 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 80078f4:	6178      	str	r0, [r7, #20]
        break;
 80078f6:	e022      	b.n	800793e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f8:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <UART_SetConfig+0x31c>)
 80078fa:	617b      	str	r3, [r7, #20]
        break;
 80078fc:	e01f      	b.n	800793e <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fe:	f7fe feb5 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8007902:	6178      	str	r0, [r7, #20]
        break;
 8007904:	e01b      	b.n	800793e <UART_SetConfig+0x332>
 8007906:	bf00      	nop
 8007908:	cfff69f3 	.word	0xcfff69f3
 800790c:	40008000 	.word	0x40008000
 8007910:	40013800 	.word	0x40013800
 8007914:	40021000 	.word	0x40021000
 8007918:	40004400 	.word	0x40004400
 800791c:	40004800 	.word	0x40004800
 8007920:	40004c00 	.word	0x40004c00
 8007924:	40005000 	.word	0x40005000
 8007928:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800792c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007930:	617b      	str	r3, [r7, #20]
        break;
 8007932:	e004      	b.n	800793e <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	76bb      	strb	r3, [r7, #26]
        break;
 800793c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f000 811d 	beq.w	8007b80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	4a97      	ldr	r2, [pc, #604]	; (8007ba8 <UART_SetConfig+0x59c>)
 800794c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007950:	461a      	mov	r2, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	fbb3 f3f2 	udiv	r3, r3, r2
 8007958:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	4613      	mov	r3, r2
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	4413      	add	r3, r2
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d305      	bcc.n	8007976 <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	d902      	bls.n	800797c <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	76bb      	strb	r3, [r7, #26]
 800797a:	e101      	b.n	8007b80 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	4618      	mov	r0, r3
 8007980:	f04f 0100 	mov.w	r1, #0
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	4a87      	ldr	r2, [pc, #540]	; (8007ba8 <UART_SetConfig+0x59c>)
 800798a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f04f 0400 	mov.w	r4, #0
 8007994:	461a      	mov	r2, r3
 8007996:	4623      	mov	r3, r4
 8007998:	f7f9 f976 	bl	8000c88 <__aeabi_uldivmod>
 800799c:	4603      	mov	r3, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4619      	mov	r1, r3
 80079a2:	4622      	mov	r2, r4
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	f04f 0400 	mov.w	r4, #0
 80079ac:	0214      	lsls	r4, r2, #8
 80079ae:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80079b2:	020b      	lsls	r3, r1, #8
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6852      	ldr	r2, [r2, #4]
 80079b8:	0852      	lsrs	r2, r2, #1
 80079ba:	4611      	mov	r1, r2
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	eb13 0b01 	adds.w	fp, r3, r1
 80079c4:	eb44 0c02 	adc.w	ip, r4, r2
 80079c8:	4658      	mov	r0, fp
 80079ca:	4661      	mov	r1, ip
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f04f 0400 	mov.w	r4, #0
 80079d4:	461a      	mov	r2, r3
 80079d6:	4623      	mov	r3, r4
 80079d8:	f7f9 f956 	bl	8000c88 <__aeabi_uldivmod>
 80079dc:	4603      	mov	r3, r0
 80079de:	460c      	mov	r4, r1
 80079e0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e8:	d308      	bcc.n	80079fc <UART_SetConfig+0x3f0>
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f0:	d204      	bcs.n	80079fc <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	693a      	ldr	r2, [r7, #16]
 80079f8:	60da      	str	r2, [r3, #12]
 80079fa:	e0c1      	b.n	8007b80 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	76bb      	strb	r3, [r7, #26]
 8007a00:	e0be      	b.n	8007b80 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	69db      	ldr	r3, [r3, #28]
 8007a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a0a:	d164      	bne.n	8007ad6 <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 8007a0c:	7efb      	ldrb	r3, [r7, #27]
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d827      	bhi.n	8007a62 <UART_SetConfig+0x456>
 8007a12:	a201      	add	r2, pc, #4	; (adr r2, 8007a18 <UART_SetConfig+0x40c>)
 8007a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a18:	08007a3d 	.word	0x08007a3d
 8007a1c:	08007a45 	.word	0x08007a45
 8007a20:	08007a4d 	.word	0x08007a4d
 8007a24:	08007a63 	.word	0x08007a63
 8007a28:	08007a53 	.word	0x08007a53
 8007a2c:	08007a63 	.word	0x08007a63
 8007a30:	08007a63 	.word	0x08007a63
 8007a34:	08007a63 	.word	0x08007a63
 8007a38:	08007a5b 	.word	0x08007a5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a3c:	f7fe feaa 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8007a40:	6178      	str	r0, [r7, #20]
        break;
 8007a42:	e013      	b.n	8007a6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a44:	f7fe febc 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 8007a48:	6178      	str	r0, [r7, #20]
        break;
 8007a4a:	e00f      	b.n	8007a6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <UART_SetConfig+0x5a0>)
 8007a4e:	617b      	str	r3, [r7, #20]
        break;
 8007a50:	e00c      	b.n	8007a6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a52:	f7fe fe0b 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8007a56:	6178      	str	r0, [r7, #20]
        break;
 8007a58:	e008      	b.n	8007a6c <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5e:	617b      	str	r3, [r7, #20]
        break;
 8007a60:	e004      	b.n	8007a6c <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	76bb      	strb	r3, [r7, #26]
        break;
 8007a6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 8086 	beq.w	8007b80 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	4a4b      	ldr	r2, [pc, #300]	; (8007ba8 <UART_SetConfig+0x59c>)
 8007a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a86:	005a      	lsls	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	441a      	add	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b0f      	cmp	r3, #15
 8007aa0:	d916      	bls.n	8007ad0 <UART_SetConfig+0x4c4>
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa8:	d212      	bcs.n	8007ad0 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	f023 030f 	bic.w	r3, r3, #15
 8007ab2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	085b      	lsrs	r3, r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	89fb      	ldrh	r3, [r7, #14]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	89fa      	ldrh	r2, [r7, #14]
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e057      	b.n	8007b80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	76bb      	strb	r3, [r7, #26]
 8007ad4:	e054      	b.n	8007b80 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ad6:	7efb      	ldrb	r3, [r7, #27]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	d828      	bhi.n	8007b2e <UART_SetConfig+0x522>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <UART_SetConfig+0x4d8>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	08007b2f 	.word	0x08007b2f
 8007af4:	08007b1f 	.word	0x08007b1f
 8007af8:	08007b2f 	.word	0x08007b2f
 8007afc:	08007b2f 	.word	0x08007b2f
 8007b00:	08007b2f 	.word	0x08007b2f
 8007b04:	08007b27 	.word	0x08007b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b08:	f7fe fe44 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8007b0c:	6178      	str	r0, [r7, #20]
        break;
 8007b0e:	e013      	b.n	8007b38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b10:	f7fe fe56 	bl	80067c0 <HAL_RCC_GetPCLK2Freq>
 8007b14:	6178      	str	r0, [r7, #20]
        break;
 8007b16:	e00f      	b.n	8007b38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b18:	4b24      	ldr	r3, [pc, #144]	; (8007bac <UART_SetConfig+0x5a0>)
 8007b1a:	617b      	str	r3, [r7, #20]
        break;
 8007b1c:	e00c      	b.n	8007b38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1e:	f7fe fda5 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8007b22:	6178      	str	r0, [r7, #20]
        break;
 8007b24:	e008      	b.n	8007b38 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b2a:	617b      	str	r3, [r7, #20]
        break;
 8007b2c:	e004      	b.n	8007b38 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	76bb      	strb	r3, [r7, #26]
        break;
 8007b36:	bf00      	nop
    }

    if (pclk != 0U)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d020      	beq.n	8007b80 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b42:	4a19      	ldr	r2, [pc, #100]	; (8007ba8 <UART_SetConfig+0x59c>)
 8007b44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	085b      	lsrs	r3, r3, #1
 8007b56:	441a      	add	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d908      	bls.n	8007b7c <UART_SetConfig+0x570>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b70:	d204      	bcs.n	8007b7c <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	60da      	str	r2, [r3, #12]
 8007b7a:	e001      	b.n	8007b80 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007b9c:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007ba8:	0800de38 	.word	0x0800de38
 8007bac:	00f42400 	.word	0x00f42400

08007bb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c22:	f003 0308 	and.w	r3, r3, #8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c44:	f003 0310 	and.w	r3, r3, #16
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c66:	f003 0320 	and.w	r3, r3, #32
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	430a      	orrs	r2, r1
 8007c82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01a      	beq.n	8007cc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cae:	d10a      	bne.n	8007cc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	605a      	str	r2, [r3, #4]
  }
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007d04:	f7fa fdce 	bl	80028a4 <HAL_GetTick>
 8007d08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0308 	and.w	r3, r3, #8
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d10e      	bne.n	8007d36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d1c:	9300      	str	r3, [sp, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f82c 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e022      	b.n	8007d7c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d10e      	bne.n	8007d62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f816 	bl	8007d84 <UART_WaitOnFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e00c      	b.n	8007d7c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2220      	movs	r2, #32
 8007d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	603b      	str	r3, [r7, #0]
 8007d90:	4613      	mov	r3, r2
 8007d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d94:	e062      	b.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9c:	d05e      	beq.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d9e:	f7fa fd81 	bl	80028a4 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	69ba      	ldr	r2, [r7, #24]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d302      	bcc.n	8007db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d11d      	bne.n	8007df0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007dc2:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 0201 	bic.w	r2, r2, #1
 8007dd2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2220      	movs	r2, #32
 8007de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007dec:	2303      	movs	r3, #3
 8007dee:	e045      	b.n	8007e7c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d02e      	beq.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e0c:	d126      	bne.n	8007e5c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e26:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0201 	bic.w	r2, r2, #1
 8007e36:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e00f      	b.n	8007e7c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	69da      	ldr	r2, [r3, #28]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4013      	ands	r3, r2
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	bf0c      	ite	eq
 8007e6c:	2301      	moveq	r3, #1
 8007e6e:	2300      	movne	r3, #0
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	461a      	mov	r2, r3
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d08d      	beq.n	8007d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_UARTEx_DisableFifoMode+0x16>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e027      	b.n	8007eea <HAL_UARTEx_DisableFifoMode+0x66>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2224      	movs	r2, #36	; 0x24
 8007ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 0201 	bic.w	r2, r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ec8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2220      	movs	r2, #32
 8007edc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ef6:	b580      	push	{r7, lr}
 8007ef8:	b084      	sub	sp, #16
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e02d      	b.n	8007f6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2224      	movs	r2, #36	; 0x24
 8007f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f850 	bl	8007ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b084      	sub	sp, #16
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
 8007f7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d101      	bne.n	8007f8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f86:	2302      	movs	r3, #2
 8007f88:	e02d      	b.n	8007fe6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2224      	movs	r2, #36	; 0x24
 8007f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0201 	bic.w	r2, r2, #1
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f812 	bl	8007ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2220      	movs	r2, #32
 8007fd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b089      	sub	sp, #36	; 0x24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007ff8:	4a2f      	ldr	r2, [pc, #188]	; (80080b8 <UARTEx_SetNbDataToProcess+0xc8>)
 8007ffa:	f107 0314 	add.w	r3, r7, #20
 8007ffe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008002:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008006:	4a2d      	ldr	r2, [pc, #180]	; (80080bc <UARTEx_SetNbDataToProcess+0xcc>)
 8008008:	f107 030c 	add.w	r3, r7, #12
 800800c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008010:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008018:	2b00      	cmp	r3, #0
 800801a:	d108      	bne.n	800802e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2201      	movs	r2, #1
 8008028:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800802c:	e03d      	b.n	80080aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800802e:	2308      	movs	r3, #8
 8008030:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008032:	2308      	movs	r3, #8
 8008034:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	0e5b      	lsrs	r3, r3, #25
 800803e:	b2db      	uxtb	r3, r3
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	0f5b      	lsrs	r3, r3, #29
 800804e:	b2db      	uxtb	r3, r3
 8008050:	f003 0307 	and.w	r3, r3, #7
 8008054:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008056:	7fbb      	ldrb	r3, [r7, #30]
 8008058:	7f3a      	ldrb	r2, [r7, #28]
 800805a:	f107 0120 	add.w	r1, r7, #32
 800805e:	440a      	add	r2, r1
 8008060:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008064:	fb02 f303 	mul.w	r3, r2, r3
 8008068:	7f3a      	ldrb	r2, [r7, #28]
 800806a:	f107 0120 	add.w	r1, r7, #32
 800806e:	440a      	add	r2, r1
 8008070:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008074:	fb93 f3f2 	sdiv	r3, r3, r2
 8008078:	b29a      	uxth	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008080:	7ffb      	ldrb	r3, [r7, #31]
 8008082:	7f7a      	ldrb	r2, [r7, #29]
 8008084:	f107 0120 	add.w	r1, r7, #32
 8008088:	440a      	add	r2, r1
 800808a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800808e:	fb02 f303 	mul.w	r3, r2, r3
 8008092:	7f7a      	ldrb	r2, [r7, #29]
 8008094:	f107 0120 	add.w	r1, r7, #32
 8008098:	440a      	add	r2, r1
 800809a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800809e:	fb93 f3f2 	sdiv	r3, r3, r2
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080aa:	bf00      	nop
 80080ac:	3724      	adds	r7, #36	; 0x24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	0800dd98 	.word	0x0800dd98
 80080bc:	0800dda0 	.word	0x0800dda0

080080c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c0:	b084      	sub	sp, #16
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b084      	sub	sp, #16
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	f107 001c 	add.w	r0, r7, #28
 80080ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d122      	bne.n	800811e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008102:	2b01      	cmp	r3, #1
 8008104:	d105      	bne.n	8008112 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 f9da 	bl	80094cc <USB_CoreReset>
 8008118:	4603      	mov	r3, r0
 800811a:	73fb      	strb	r3, [r7, #15]
 800811c:	e01a      	b.n	8008154 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 f9ce 	bl	80094cc <USB_CoreReset>
 8008130:	4603      	mov	r3, r0
 8008132:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d106      	bne.n	8008148 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
 8008146:	e005      	b.n	8008154 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008160:	b004      	add	sp, #16
 8008162:	4770      	bx	lr

08008164 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	4613      	mov	r3, r2
 8008170:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008172:	79fb      	ldrb	r3, [r7, #7]
 8008174:	2b02      	cmp	r3, #2
 8008176:	d165      	bne.n	8008244 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	4a3e      	ldr	r2, [pc, #248]	; (8008274 <USB_SetTurnaroundTime+0x110>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d906      	bls.n	800818e <USB_SetTurnaroundTime+0x2a>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4a3d      	ldr	r2, [pc, #244]	; (8008278 <USB_SetTurnaroundTime+0x114>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d802      	bhi.n	800818e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008188:	230f      	movs	r3, #15
 800818a:	617b      	str	r3, [r7, #20]
 800818c:	e05c      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4a39      	ldr	r2, [pc, #228]	; (8008278 <USB_SetTurnaroundTime+0x114>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d906      	bls.n	80081a4 <USB_SetTurnaroundTime+0x40>
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	4a38      	ldr	r2, [pc, #224]	; (800827c <USB_SetTurnaroundTime+0x118>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d802      	bhi.n	80081a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800819e:	230e      	movs	r3, #14
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e051      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4a35      	ldr	r2, [pc, #212]	; (800827c <USB_SetTurnaroundTime+0x118>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d906      	bls.n	80081ba <USB_SetTurnaroundTime+0x56>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	4a34      	ldr	r2, [pc, #208]	; (8008280 <USB_SetTurnaroundTime+0x11c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d802      	bhi.n	80081ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081b4:	230d      	movs	r3, #13
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	e046      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4a30      	ldr	r2, [pc, #192]	; (8008280 <USB_SetTurnaroundTime+0x11c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d906      	bls.n	80081d0 <USB_SetTurnaroundTime+0x6c>
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4a2f      	ldr	r2, [pc, #188]	; (8008284 <USB_SetTurnaroundTime+0x120>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d802      	bhi.n	80081d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081ca:	230c      	movs	r3, #12
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e03b      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4a2c      	ldr	r2, [pc, #176]	; (8008284 <USB_SetTurnaroundTime+0x120>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d906      	bls.n	80081e6 <USB_SetTurnaroundTime+0x82>
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a2b      	ldr	r2, [pc, #172]	; (8008288 <USB_SetTurnaroundTime+0x124>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d802      	bhi.n	80081e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081e0:	230b      	movs	r3, #11
 80081e2:	617b      	str	r3, [r7, #20]
 80081e4:	e030      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4a27      	ldr	r2, [pc, #156]	; (8008288 <USB_SetTurnaroundTime+0x124>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d906      	bls.n	80081fc <USB_SetTurnaroundTime+0x98>
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	4a26      	ldr	r2, [pc, #152]	; (800828c <USB_SetTurnaroundTime+0x128>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d802      	bhi.n	80081fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80081f6:	230a      	movs	r3, #10
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e025      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4a23      	ldr	r2, [pc, #140]	; (800828c <USB_SetTurnaroundTime+0x128>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d906      	bls.n	8008212 <USB_SetTurnaroundTime+0xae>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	4a22      	ldr	r2, [pc, #136]	; (8008290 <USB_SetTurnaroundTime+0x12c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d802      	bhi.n	8008212 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800820c:	2309      	movs	r3, #9
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e01a      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <USB_SetTurnaroundTime+0x12c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d906      	bls.n	8008228 <USB_SetTurnaroundTime+0xc4>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <USB_SetTurnaroundTime+0x130>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d802      	bhi.n	8008228 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008222:	2308      	movs	r3, #8
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	e00f      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4a1a      	ldr	r2, [pc, #104]	; (8008294 <USB_SetTurnaroundTime+0x130>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d906      	bls.n	800823e <USB_SetTurnaroundTime+0xda>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	4a19      	ldr	r2, [pc, #100]	; (8008298 <USB_SetTurnaroundTime+0x134>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d802      	bhi.n	800823e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008238:	2307      	movs	r3, #7
 800823a:	617b      	str	r3, [r7, #20]
 800823c:	e004      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800823e:	2306      	movs	r3, #6
 8008240:	617b      	str	r3, [r7, #20]
 8008242:	e001      	b.n	8008248 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008244:	2309      	movs	r3, #9
 8008246:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	029b      	lsls	r3, r3, #10
 800825c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008260:	431a      	orrs	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	00d8acbf 	.word	0x00d8acbf
 8008278:	00e4e1bf 	.word	0x00e4e1bf
 800827c:	00f423ff 	.word	0x00f423ff
 8008280:	0106737f 	.word	0x0106737f
 8008284:	011a499f 	.word	0x011a499f
 8008288:	01312cff 	.word	0x01312cff
 800828c:	014ca43f 	.word	0x014ca43f
 8008290:	016e35ff 	.word	0x016e35ff
 8008294:	01a6ab1f 	.word	0x01a6ab1f
 8008298:	01e847ff 	.word	0x01e847ff

0800829c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	f043 0201 	orr.w	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f023 0201 	bic.w	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80082f8:	78fb      	ldrb	r3, [r7, #3]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d106      	bne.n	800830c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60da      	str	r2, [r3, #12]
 800830a:	e00b      	b.n	8008324 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800830c:	78fb      	ldrb	r3, [r7, #3]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	e001      	b.n	8008324 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e003      	b.n	800832c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008324:	2032      	movs	r0, #50	; 0x32
 8008326:	f7fa fac9 	bl	80028bc <HAL_Delay>

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008334:	b084      	sub	sp, #16
 8008336:	b580      	push	{r7, lr}
 8008338:	b086      	sub	sp, #24
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	e009      	b.n	8008368 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3340      	adds	r3, #64	; 0x40
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	4413      	add	r3, r2
 800835e:	2200      	movs	r2, #0
 8008360:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b0e      	cmp	r3, #14
 800836c:	d9f2      	bls.n	8008354 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800836e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11c      	bne.n	80083ae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008382:	f043 0302 	orr.w	r3, r3, #2
 8008386:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]
 80083ac:	e005      	b.n	80083ba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083c0:	461a      	mov	r2, r3
 80083c2:	2300      	movs	r3, #0
 80083c4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083cc:	4619      	mov	r1, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d4:	461a      	mov	r2, r3
 80083d6:	680b      	ldr	r3, [r1, #0]
 80083d8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80083da:	2103      	movs	r1, #3
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f93d 	bl	800865c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80083e2:	2110      	movs	r1, #16
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f8f1 	bl	80085cc <USB_FlushTxFifo>
 80083ea:	4603      	mov	r3, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d001      	beq.n	80083f4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f90f 	bl	8008618 <USB_FlushRxFifo>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d001      	beq.n	8008404 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	461a      	mov	r2, r3
 800840c:	2300      	movs	r3, #0
 800840e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008416:	461a      	mov	r2, r3
 8008418:	2300      	movs	r3, #0
 800841a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008422:	461a      	mov	r2, r3
 8008424:	2300      	movs	r3, #0
 8008426:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	e043      	b.n	80084b6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008440:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008444:	d118      	bne.n	8008478 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	461a      	mov	r2, r3
 800845a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	e013      	b.n	800848a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800846e:	461a      	mov	r2, r3
 8008470:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e008      	b.n	800848a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	2300      	movs	r3, #0
 8008488:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	461a      	mov	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	461a      	mov	r2, r3
 80084aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3301      	adds	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d3b7      	bcc.n	800842e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084be:	2300      	movs	r3, #0
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	e043      	b.n	800854c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084da:	d118      	bne.n	800850e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ee:	461a      	mov	r2, r3
 80084f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084f4:	6013      	str	r3, [r2, #0]
 80084f6:	e013      	b.n	8008520 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008504:	461a      	mov	r2, r3
 8008506:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800850a:	6013      	str	r3, [r2, #0]
 800850c:	e008      	b.n	8008520 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	461a      	mov	r2, r3
 800851c:	2300      	movs	r3, #0
 800851e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	015a      	lsls	r2, r3, #5
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	4413      	add	r3, r2
 8008528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800852c:	461a      	mov	r2, r3
 800852e:	2300      	movs	r3, #0
 8008530:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4413      	add	r3, r2
 800853a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853e:	461a      	mov	r2, r3
 8008540:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008544:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	3301      	adds	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	429a      	cmp	r2, r3
 8008552:	d3b7      	bcc.n	80084c4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	691b      	ldr	r3, [r3, #16]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008562:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008566:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2200      	movs	r2, #0
 800856c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008574:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	699b      	ldr	r3, [r3, #24]
 800857a:	f043 0210 	orr.w	r2, r3, #16
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	4b10      	ldr	r3, [pc, #64]	; (80085c8 <USB_DevInit+0x294>)
 8008588:	4313      	orrs	r3, r2
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800858e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008590:	2b00      	cmp	r3, #0
 8008592:	d005      	beq.n	80085a0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f043 0208 	orr.w	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d107      	bne.n	80085b6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085ae:	f043 0304 	orr.w	r3, r3, #4
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80085b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3718      	adds	r7, #24
 80085bc:	46bd      	mov	sp, r7
 80085be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085c2:	b004      	add	sp, #16
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	803c3800 	.word	0x803c3800

080085cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	f043 0220 	orr.w	r2, r3, #32
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3301      	adds	r3, #1
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4a09      	ldr	r2, [pc, #36]	; (8008614 <USB_FlushTxFifo+0x48>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d901      	bls.n	80085f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e006      	b.n	8008606 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b20      	cmp	r3, #32
 8008602:	d0f0      	beq.n	80085e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3714      	adds	r7, #20
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
 8008612:	bf00      	nop
 8008614:	00030d40 	.word	0x00030d40

08008618 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2210      	movs	r2, #16
 8008628:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3301      	adds	r3, #1
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a09      	ldr	r2, [pc, #36]	; (8008658 <USB_FlushRxFifo+0x40>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d901      	bls.n	800863c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e006      	b.n	800864a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	f003 0310 	and.w	r3, r3, #16
 8008644:	2b10      	cmp	r3, #16
 8008646:	d0f0      	beq.n	800862a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	00030d40 	.word	0x00030d40

0800865c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800867c:	4313      	orrs	r3, r2
 800867e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800868e:	b480      	push	{r7}
 8008690:	b087      	sub	sp, #28
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0306 	and.w	r3, r3, #6
 80086a6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b02      	cmp	r3, #2
 80086ac:	d002      	beq.n	80086b4 <USB_GetDevSpeed+0x26>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b06      	cmp	r3, #6
 80086b2:	d102      	bne.n	80086ba <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80086b4:	2302      	movs	r3, #2
 80086b6:	75fb      	strb	r3, [r7, #23]
 80086b8:	e001      	b.n	80086be <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80086ba:	230f      	movs	r3, #15
 80086bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	785b      	ldrb	r3, [r3, #1]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d13a      	bne.n	800875e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	69da      	ldr	r2, [r3, #28]
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	2101      	movs	r1, #1
 80086fa:	fa01 f303 	lsl.w	r3, r1, r3
 80086fe:	b29b      	uxth	r3, r3
 8008700:	68f9      	ldr	r1, [r7, #12]
 8008702:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008706:	4313      	orrs	r3, r2
 8008708:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	4413      	add	r3, r2
 8008712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d155      	bne.n	80087cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	015a      	lsls	r2, r3, #5
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	78db      	ldrb	r3, [r3, #3]
 800873a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800873c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	059b      	lsls	r3, r3, #22
 8008742:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008744:	4313      	orrs	r3, r2
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	440a      	add	r2, r1
 800874e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008756:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e036      	b.n	80087cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008764:	69da      	ldr	r2, [r3, #28]
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	2101      	movs	r1, #1
 8008770:	fa01 f303 	lsl.w	r3, r1, r3
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	68f9      	ldr	r1, [r7, #12]
 8008778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800877c:	4313      	orrs	r3, r2
 800877e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d11a      	bne.n	80087cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	015a      	lsls	r2, r3, #5
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4413      	add	r3, r2
 800879e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	78db      	ldrb	r3, [r3, #3]
 80087b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80087b2:	430b      	orrs	r3, r1
 80087b4:	4313      	orrs	r3, r2
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
	...

080087dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d161      	bne.n	80088bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800880a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800880e:	d11f      	bne.n	8008850 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800882e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68ba      	ldr	r2, [r7, #8]
 8008840:	0151      	lsls	r1, r2, #5
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	440a      	add	r2, r1
 8008846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800884a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800884e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	f003 030f 	and.w	r3, r3, #15
 8008860:	2101      	movs	r1, #1
 8008862:	fa01 f303 	lsl.w	r3, r1, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	43db      	mvns	r3, r3
 800886a:	68f9      	ldr	r1, [r7, #12]
 800886c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008870:	4013      	ands	r3, r2
 8008872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 030f 	and.w	r3, r3, #15
 8008884:	2101      	movs	r1, #1
 8008886:	fa01 f303 	lsl.w	r3, r1, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	43db      	mvns	r3, r3
 800888e:	68f9      	ldr	r1, [r7, #12]
 8008890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008894:	4013      	ands	r3, r2
 8008896:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	0159      	lsls	r1, r3, #5
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	440b      	add	r3, r1
 80088ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b2:	4619      	mov	r1, r3
 80088b4:	4b35      	ldr	r3, [pc, #212]	; (800898c <USB_DeactivateEndpoint+0x1b0>)
 80088b6:	4013      	ands	r3, r2
 80088b8:	600b      	str	r3, [r1, #0]
 80088ba:	e060      	b.n	800897e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	015a      	lsls	r2, r3, #5
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4413      	add	r3, r2
 80088c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088d2:	d11f      	bne.n	8008914 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	0151      	lsls	r1, r2, #5
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	440a      	add	r2, r1
 800890a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008912:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f003 030f 	and.w	r3, r3, #15
 8008924:	2101      	movs	r1, #1
 8008926:	fa01 f303 	lsl.w	r3, r1, r3
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	43db      	mvns	r3, r3
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008934:	4013      	ands	r3, r2
 8008936:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f003 030f 	and.w	r3, r3, #15
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f303 	lsl.w	r3, r1, r3
 800894e:	041b      	lsls	r3, r3, #16
 8008950:	43db      	mvns	r3, r3
 8008952:	68f9      	ldr	r1, [r7, #12]
 8008954:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008958:	4013      	ands	r3, r2
 800895a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	0159      	lsls	r1, r3, #5
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	440b      	add	r3, r1
 8008972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008976:	4619      	mov	r1, r3
 8008978:	4b05      	ldr	r3, [pc, #20]	; (8008990 <USB_DeactivateEndpoint+0x1b4>)
 800897a:	4013      	ands	r3, r2
 800897c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	ec337800 	.word	0xec337800
 8008990:	eff37800 	.word	0xeff37800

08008994 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 810a 	bne.w	8008bc6 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d132      	bne.n	8008a20 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	693a      	ldr	r2, [r7, #16]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	0151      	lsls	r1, r2, #5
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	440a      	add	r2, r1
 80089f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	015a      	lsls	r2, r3, #5
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4413      	add	r3, r2
 8008a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0a:	691b      	ldr	r3, [r3, #16]
 8008a0c:	693a      	ldr	r2, [r7, #16]
 8008a0e:	0151      	lsls	r1, r2, #5
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	440a      	add	r2, r1
 8008a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a18:	0cdb      	lsrs	r3, r3, #19
 8008a1a:	04db      	lsls	r3, r3, #19
 8008a1c:	6113      	str	r3, [r2, #16]
 8008a1e:	e074      	b.n	8008b0a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	015a      	lsls	r2, r3, #5
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	4413      	add	r3, r2
 8008a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2c:	691b      	ldr	r3, [r3, #16]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	0151      	lsls	r1, r2, #5
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	440a      	add	r2, r1
 8008a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3a:	0cdb      	lsrs	r3, r3, #19
 8008a3c:	04db      	lsls	r3, r3, #19
 8008a3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	6959      	ldr	r1, [r3, #20]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	440b      	add	r3, r1
 8008a7c:	1e59      	subs	r1, r3, #1
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a86:	04d9      	lsls	r1, r3, #19
 8008a88:	4baf      	ldr	r3, [pc, #700]	; (8008d48 <USB_EPStartXfer+0x3b4>)
 8008a8a:	400b      	ands	r3, r1
 8008a8c:	6939      	ldr	r1, [r7, #16]
 8008a8e:	0148      	lsls	r0, r1, #5
 8008a90:	6979      	ldr	r1, [r7, #20]
 8008a92:	4401      	add	r1, r0
 8008a94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ab2:	6939      	ldr	r1, [r7, #16]
 8008ab4:	0148      	lsls	r0, r1, #5
 8008ab6:	6979      	ldr	r1, [r7, #20]
 8008ab8:	4401      	add	r1, r0
 8008aba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	78db      	ldrb	r3, [r3, #3]
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d11f      	bne.n	8008b0a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008ae8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	697a      	ldr	r2, [r7, #20]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b08:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	0151      	lsls	r1, r2, #5
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	440a      	add	r2, r1
 8008b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b28:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	78db      	ldrb	r3, [r3, #3]
 8008b2e:	2b01      	cmp	r3, #1
 8008b30:	d015      	beq.n	8008b5e <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f000 8100 	beq.w	8008d3c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	f003 030f 	and.w	r3, r3, #15
 8008b4c:	2101      	movs	r1, #1
 8008b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b52:	6979      	ldr	r1, [r7, #20]
 8008b54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	634b      	str	r3, [r1, #52]	; 0x34
 8008b5c:	e0ee      	b.n	8008d3c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d110      	bne.n	8008b90 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	015a      	lsls	r2, r3, #5
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	4413      	add	r3, r2
 8008b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	693a      	ldr	r2, [r7, #16]
 8008b7e:	0151      	lsls	r1, r2, #5
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	440a      	add	r2, r1
 8008b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b8c:	6013      	str	r3, [r2, #0]
 8008b8e:	e00f      	b.n	8008bb0 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	0151      	lsls	r1, r2, #5
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	440a      	add	r2, r1
 8008ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bae:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68d9      	ldr	r1, [r3, #12]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 f9e2 	bl	8008f88 <USB_WritePacket>
 8008bc4:	e0ba      	b.n	8008d3c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008be0:	0cdb      	lsrs	r3, r3, #19
 8008be2:	04db      	lsls	r3, r3, #19
 8008be4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d123      	bne.n	8008c5a <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	691a      	ldr	r2, [r3, #16]
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c28:	6939      	ldr	r1, [r7, #16]
 8008c2a:	0148      	lsls	r0, r1, #5
 8008c2c:	6979      	ldr	r1, [r7, #20]
 8008c2e:	4401      	add	r1, r0
 8008c30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c34:	4313      	orrs	r3, r2
 8008c36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	697a      	ldr	r2, [r7, #20]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c56:	6113      	str	r3, [r2, #16]
 8008c58:	e033      	b.n	8008cc2 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	695a      	ldr	r2, [r3, #20]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	4413      	add	r3, r2
 8008c64:	1e5a      	subs	r2, r3, #1
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	689b      	ldr	r3, [r3, #8]
 8008c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c6e:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	89fb      	ldrh	r3, [r7, #14]
 8008c80:	04d9      	lsls	r1, r3, #19
 8008c82:	4b31      	ldr	r3, [pc, #196]	; (8008d48 <USB_EPStartXfer+0x3b4>)
 8008c84:	400b      	ands	r3, r1
 8008c86:	6939      	ldr	r1, [r7, #16]
 8008c88:	0148      	lsls	r0, r1, #5
 8008c8a:	6979      	ldr	r1, [r7, #20]
 8008c8c:	4401      	add	r1, r0
 8008c8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008c92:	4313      	orrs	r3, r2
 8008c94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	015a      	lsls	r2, r3, #5
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	89f9      	ldrh	r1, [r7, #14]
 8008caa:	fb01 f303 	mul.w	r3, r1, r3
 8008cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb2:	6939      	ldr	r1, [r7, #16]
 8008cb4:	0148      	lsls	r0, r1, #5
 8008cb6:	6979      	ldr	r1, [r7, #20]
 8008cb8:	4401      	add	r1, r0
 8008cba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	78db      	ldrb	r3, [r3, #3]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d128      	bne.n	8008d1c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d110      	bne.n	8008cfc <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	693a      	ldr	r2, [r7, #16]
 8008cea:	0151      	lsls	r1, r2, #5
 8008cec:	697a      	ldr	r2, [r7, #20]
 8008cee:	440a      	add	r2, r1
 8008cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	e00f      	b.n	8008d1c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	0151      	lsls	r1, r2, #5
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	440a      	add	r2, r1
 8008d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop
 8008d48:	1ff80000 	.word	0x1ff80000

08008d4c <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	785b      	ldrb	r3, [r3, #1]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	f040 80ab 	bne.w	8008ec0 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d132      	bne.n	8008dd8 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	015a      	lsls	r2, r3, #5
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	68ba      	ldr	r2, [r7, #8]
 8008da6:	0151      	lsls	r1, r2, #5
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	440a      	add	r2, r1
 8008dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008db0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008db4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	0cdb      	lsrs	r3, r3, #19
 8008dd2:	04db      	lsls	r3, r3, #19
 8008dd4:	6113      	str	r3, [r2, #16]
 8008dd6:	e04e      	b.n	8008e76 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	015a      	lsls	r2, r3, #5
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	4413      	add	r3, r2
 8008de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	0151      	lsls	r1, r2, #5
 8008dea:	68fa      	ldr	r2, [r7, #12]
 8008dec:	440a      	add	r2, r1
 8008dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df2:	0cdb      	lsrs	r3, r3, #19
 8008df4:	04db      	lsls	r3, r3, #19
 8008df6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695a      	ldr	r2, [r3, #20]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d903      	bls.n	8008e30 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	0151      	lsls	r1, r2, #5
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	440a      	add	r2, r1
 8008e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	015a      	lsls	r2, r3, #5
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5c:	691a      	ldr	r2, [r3, #16]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e66:	68b9      	ldr	r1, [r7, #8]
 8008e68:	0148      	lsls	r0, r1, #5
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	4401      	add	r1, r0
 8008e6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e72:	4313      	orrs	r3, r2
 8008e74:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	0151      	lsls	r1, r2, #5
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	440a      	add	r2, r1
 8008e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e94:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d06d      	beq.n	8008f7a <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	f003 030f 	and.w	r3, r3, #15
 8008eae:	2101      	movs	r1, #1
 8008eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb4:	68f9      	ldr	r1, [r7, #12]
 8008eb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	634b      	str	r3, [r1, #52]	; 0x34
 8008ebe:	e05c      	b.n	8008f7a <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	0151      	lsls	r1, r2, #5
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	440a      	add	r2, r1
 8008ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008eda:	0cdb      	lsrs	r3, r3, #19
 8008edc:	04db      	lsls	r3, r3, #19
 8008ede:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008efa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008efe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f02:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	0151      	lsls	r1, r2, #5
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	440a      	add	r2, r1
 8008f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f40:	691a      	ldr	r2, [r3, #16]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	0148      	lsls	r0, r1, #5
 8008f4e:	68f9      	ldr	r1, [r7, #12]
 8008f50:	4401      	add	r1, r0
 8008f52:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f56:	4313      	orrs	r3, r2
 8008f58:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_WritePacket>:
  * @param  ch_ep_num  endpoint or host channel number
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b089      	sub	sp, #36	; 0x24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	460b      	mov	r3, r1
 8008f98:	71fb      	strb	r3, [r7, #7]
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008fa6:	88bb      	ldrh	r3, [r7, #4]
 8008fa8:	3303      	adds	r3, #3
 8008faa:	089b      	lsrs	r3, r3, #2
 8008fac:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
 8008fb2:	e00f      	b.n	8008fd4 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	031a      	lsls	r2, r3, #12
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	4413      	add	r3, r2
 8008fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	3304      	adds	r3, #4
 8008fcc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	61bb      	str	r3, [r7, #24]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3eb      	bcc.n	8008fb4 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3724      	adds	r7, #36	; 0x24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b089      	sub	sp, #36	; 0x24
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	60f8      	str	r0, [r7, #12]
 8008ff2:	60b9      	str	r1, [r7, #8]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009000:	88fb      	ldrh	r3, [r7, #6]
 8009002:	3303      	adds	r3, #3
 8009004:	089b      	lsrs	r3, r3, #2
 8009006:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
 800900c:	e00b      	b.n	8009026 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	601a      	str	r2, [r3, #0]
    pDest++;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	3304      	adds	r3, #4
 800901e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	3301      	adds	r3, #1
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	429a      	cmp	r2, r3
 800902c:	d3ef      	bcc.n	800900e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800902e:	69fb      	ldr	r3, [r7, #28]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3724      	adds	r7, #36	; 0x24
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	785b      	ldrb	r3, [r3, #1]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d12c      	bne.n	80090b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	db12      	blt.n	8009090 <USB_EPSetStall+0x54>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00f      	beq.n	8009090 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	0151      	lsls	r1, r2, #5
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	440a      	add	r2, r1
 8009086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800908e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	015a      	lsls	r2, r3, #5
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4413      	add	r3, r2
 8009098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	0151      	lsls	r1, r2, #5
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	440a      	add	r2, r1
 80090a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	e02b      	b.n	800910a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	db12      	blt.n	80090ea <USB_EPSetStall+0xae>
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00f      	beq.n	80090ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	0151      	lsls	r1, r2, #5
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	440a      	add	r2, r1
 80090e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80090e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	015a      	lsls	r2, r3, #5
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	4413      	add	r3, r2
 80090f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	0151      	lsls	r1, r2, #5
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	440a      	add	r2, r1
 8009100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009108:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d128      	bne.n	8009186 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	015a      	lsls	r2, r3, #5
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	4413      	add	r3, r2
 800913c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	0151      	lsls	r1, r2, #5
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	440a      	add	r2, r1
 800914a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	78db      	ldrb	r3, [r3, #3]
 8009158:	2b03      	cmp	r3, #3
 800915a:	d003      	beq.n	8009164 <USB_EPClearStall+0x4c>
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	78db      	ldrb	r3, [r3, #3]
 8009160:	2b02      	cmp	r3, #2
 8009162:	d138      	bne.n	80091d6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	015a      	lsls	r2, r3, #5
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	4413      	add	r3, r2
 800916c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	0151      	lsls	r1, r2, #5
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	440a      	add	r2, r1
 800917a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	e027      	b.n	80091d6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	78db      	ldrb	r3, [r3, #3]
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d003      	beq.n	80091b6 <USB_EPClearStall+0x9e>
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	78db      	ldrb	r3, [r3, #3]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d10f      	bne.n	80091d6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	015a      	lsls	r2, r3, #5
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	4413      	add	r3, r2
 80091be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	0151      	lsls	r1, r2, #5
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	440a      	add	r2, r1
 80091cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009202:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009206:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	011b      	lsls	r3, r3, #4
 8009214:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009218:	68f9      	ldr	r1, [r7, #12]
 800921a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800921e:	4313      	orrs	r3, r2
 8009220:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009230:	b480      	push	{r7}
 8009232:	b085      	sub	sp, #20
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800925e:	f023 0302 	bic.w	r3, r3, #2
 8009262:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009264:	2300      	movs	r3, #0
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr

08009272 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009272:	b480      	push	{r7}
 8009274:	b085      	sub	sp, #20
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800928c:	f023 0303 	bic.w	r3, r3, #3
 8009290:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092a0:	f043 0302 	orr.w	r3, r3, #2
 80092a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	4013      	ands	r3, r2
 80092ca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80092cc:	68fb      	ldr	r3, [r7, #12]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	68ba      	ldr	r2, [r7, #8]
 80092fa:	4013      	ands	r3, r2
 80092fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	0c1b      	lsrs	r3, r3, #16
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4013      	ands	r3, r2
 8009330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	b29b      	uxth	r3, r3
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009342:	b480      	push	{r7}
 8009344:	b085      	sub	sp, #20
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	460b      	mov	r3, r1
 800934c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	015a      	lsls	r2, r3, #5
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	4413      	add	r3, r2
 800935a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	4013      	ands	r3, r2
 800936e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009370:	68bb      	ldr	r3, [r7, #8]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800937e:	b480      	push	{r7}
 8009380:	b087      	sub	sp, #28
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	460b      	mov	r3, r1
 8009388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	fa22 f303 	lsr.w	r3, r2, r3
 80093ae:	01db      	lsls	r3, r3, #7
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80093b8:	78fb      	ldrb	r3, [r7, #3]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	4013      	ands	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093cc:	68bb      	ldr	r3, [r7, #8]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	371c      	adds	r7, #28
 80093d2:	46bd      	mov	sp, r7
 80093d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d8:	4770      	bx	lr

080093da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80093da:	b480      	push	{r7}
 80093dc:	b083      	sub	sp, #12
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	695b      	ldr	r3, [r3, #20]
 80093e6:	f003 0301 	and.w	r3, r3, #1
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	370c      	adds	r7, #12
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80093f6:	b480      	push	{r7}
 80093f8:	b085      	sub	sp, #20
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009410:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009414:	f023 0307 	bic.w	r3, r3, #7
 8009418:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	333c      	adds	r3, #60	; 0x3c
 800944e:	3304      	adds	r3, #4
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4a1c      	ldr	r2, [pc, #112]	; (80094c8 <USB_EP0_OutStart+0x8c>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d90a      	bls.n	8009472 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800946c:	d101      	bne.n	8009472 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	e024      	b.n	80094bc <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	461a      	mov	r2, r3
 800947a:	2300      	movs	r3, #0
 800947c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800948c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094a0:	f043 0318 	orr.w	r3, r3, #24
 80094a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80094b8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	4f54300a 	.word	0x4f54300a

080094cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4a13      	ldr	r2, [pc, #76]	; (8009530 <USB_CoreReset+0x64>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d901      	bls.n	80094ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e01b      	b.n	8009522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	daf2      	bge.n	80094d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f043 0201 	orr.w	r2, r3, #1
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	4a09      	ldr	r2, [pc, #36]	; (8009530 <USB_CoreReset+0x64>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d901      	bls.n	8009514 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009510:	2303      	movs	r3, #3
 8009512:	e006      	b.n	8009522 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b01      	cmp	r3, #1
 800951e:	d0f0      	beq.n	8009502 <USB_CoreReset+0x36>

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	4618      	mov	r0, r3
 8009524:	3714      	adds	r7, #20
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	00030d40 	.word	0x00030d40

08009534 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009540:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009544:	f003 fb24 	bl	800cb90 <malloc>
 8009548:	4603      	mov	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d105      	bne.n	800955e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800955a:	2302      	movs	r3, #2
 800955c:	e066      	b.n	800962c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7c1b      	ldrb	r3, [r3, #16]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d119      	bne.n	80095a2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800956e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009572:	2202      	movs	r2, #2
 8009574:	2181      	movs	r1, #129	; 0x81
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f001 ffbc 	bl	800b4f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009582:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009586:	2202      	movs	r2, #2
 8009588:	2101      	movs	r1, #1
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 ffb2 	bl	800b4f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2210      	movs	r2, #16
 800959c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80095a0:	e016      	b.n	80095d0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80095a2:	2340      	movs	r3, #64	; 0x40
 80095a4:	2202      	movs	r2, #2
 80095a6:	2181      	movs	r1, #129	; 0x81
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f001 ffa3 	bl	800b4f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	2202      	movs	r2, #2
 80095b8:	2101      	movs	r1, #1
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 ff9a 	bl	800b4f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2210      	movs	r2, #16
 80095cc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80095d0:	2308      	movs	r3, #8
 80095d2:	2203      	movs	r2, #3
 80095d4:	2182      	movs	r1, #130	; 0x82
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 ff8c 	bl	800b4f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	7c1b      	ldrb	r3, [r3, #16]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d109      	bne.n	800961a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800960c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009610:	2101      	movs	r1, #1
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f002 f8e8 	bl	800b7e8 <USBD_LL_PrepareReceive>
 8009618:	e007      	b.n	800962a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009620:	2340      	movs	r3, #64	; 0x40
 8009622:	2101      	movs	r1, #1
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 f8df 	bl	800b7e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	460b      	mov	r3, r1
 800963e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009640:	2181      	movs	r1, #129	; 0x81
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 ff94 	bl	800b570 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2200      	movs	r2, #0
 800964c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800964e:	2101      	movs	r1, #1
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f001 ff8d 	bl	800b570 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800965e:	2182      	movs	r1, #130	; 0x82
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 ff85 	bl	800b570 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00e      	beq.n	800969e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009690:	4618      	mov	r0, r3
 8009692:	f003 fa85 	bl	800cba0 <free>
    pdev->pClassData = NULL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096b8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80096be:	2300      	movs	r3, #0
 80096c0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d03a      	beq.n	8009748 <USBD_CDC_Setup+0xa0>
 80096d2:	2b20      	cmp	r3, #32
 80096d4:	f040 8097 	bne.w	8009806 <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	88db      	ldrh	r3, [r3, #6]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d029      	beq.n	8009734 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	b25b      	sxtb	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da11      	bge.n	800970e <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	683a      	ldr	r2, [r7, #0]
 80096f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80096f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096f8:	683a      	ldr	r2, [r7, #0]
 80096fa:	88d2      	ldrh	r2, [r2, #6]
 80096fc:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80096fe:	6939      	ldr	r1, [r7, #16]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	88db      	ldrh	r3, [r3, #6]
 8009704:	461a      	mov	r2, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f001 fa9f 	bl	800ac4a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800970c:	e082      	b.n	8009814 <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	785a      	ldrb	r2, [r3, #1]
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	88db      	ldrh	r3, [r3, #6]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009724:	6939      	ldr	r1, [r7, #16]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	88db      	ldrh	r3, [r3, #6]
 800972a:	461a      	mov	r2, r3
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 fab8 	bl	800aca2 <USBD_CtlPrepareRx>
      break;
 8009732:	e06f      	b.n	8009814 <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	7850      	ldrb	r0, [r2, #1]
 8009740:	2200      	movs	r2, #0
 8009742:	6839      	ldr	r1, [r7, #0]
 8009744:	4798      	blx	r3
      break;
 8009746:	e065      	b.n	8009814 <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	2b0b      	cmp	r3, #11
 800974e:	d84f      	bhi.n	80097f0 <USBD_CDC_Setup+0x148>
 8009750:	a201      	add	r2, pc, #4	; (adr r2, 8009758 <USBD_CDC_Setup+0xb0>)
 8009752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009756:	bf00      	nop
 8009758:	08009789 	.word	0x08009789
 800975c:	080097ff 	.word	0x080097ff
 8009760:	080097f1 	.word	0x080097f1
 8009764:	080097f1 	.word	0x080097f1
 8009768:	080097f1 	.word	0x080097f1
 800976c:	080097f1 	.word	0x080097f1
 8009770:	080097f1 	.word	0x080097f1
 8009774:	080097f1 	.word	0x080097f1
 8009778:	080097f1 	.word	0x080097f1
 800977c:	080097f1 	.word	0x080097f1
 8009780:	080097b1 	.word	0x080097b1
 8009784:	080097d9 	.word	0x080097d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978e:	2b03      	cmp	r3, #3
 8009790:	d107      	bne.n	80097a2 <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009792:	f107 030c 	add.w	r3, r7, #12
 8009796:	2202      	movs	r2, #2
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fa55 	bl	800ac4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097a0:	e030      	b.n	8009804 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 f9df 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	75fb      	strb	r3, [r7, #23]
          break;
 80097ae:	e029      	b.n	8009804 <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d107      	bne.n	80097ca <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80097ba:	f107 030f 	add.w	r3, r7, #15
 80097be:	2201      	movs	r2, #1
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 fa41 	bl	800ac4a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097c8:	e01c      	b.n	8009804 <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 f9cb 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 80097d2:	2303      	movs	r3, #3
 80097d4:	75fb      	strb	r3, [r7, #23]
          break;
 80097d6:	e015      	b.n	8009804 <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097de:	2b03      	cmp	r3, #3
 80097e0:	d00f      	beq.n	8009802 <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f9bf 	bl	800ab68 <USBD_CtlError>
            ret = USBD_FAIL;
 80097ea:	2303      	movs	r3, #3
 80097ec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097ee:	e008      	b.n	8009802 <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80097f0:	6839      	ldr	r1, [r7, #0]
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f001 f9b8 	bl	800ab68 <USBD_CtlError>
          ret = USBD_FAIL;
 80097f8:	2303      	movs	r3, #3
 80097fa:	75fb      	strb	r3, [r7, #23]
          break;
 80097fc:	e002      	b.n	8009804 <USBD_CDC_Setup+0x15c>
          break;
 80097fe:	bf00      	nop
 8009800:	e008      	b.n	8009814 <USBD_CDC_Setup+0x16c>
          break;
 8009802:	bf00      	nop
      }
      break;
 8009804:	e006      	b.n	8009814 <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f001 f9ad 	bl	800ab68 <USBD_CtlError>
      ret = USBD_FAIL;
 800980e:	2303      	movs	r3, #3
 8009810:	75fb      	strb	r3, [r7, #23]
      break;
 8009812:	bf00      	nop
  }

  return (uint8_t)ret;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop

08009820 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009832:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800983e:	2303      	movs	r3, #3
 8009840:	e04f      	b.n	80098e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009848:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	6879      	ldr	r1, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	440b      	add	r3, r1
 8009858:	3318      	adds	r3, #24
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d029      	beq.n	80098b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009860:	78fa      	ldrb	r2, [r7, #3]
 8009862:	6879      	ldr	r1, [r7, #4]
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	440b      	add	r3, r1
 800986e:	3318      	adds	r3, #24
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	78f9      	ldrb	r1, [r7, #3]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	460b      	mov	r3, r1
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	1a5b      	subs	r3, r3, r1
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4403      	add	r3, r0
 8009880:	3344      	adds	r3, #68	; 0x44
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	fbb2 f1f3 	udiv	r1, r2, r3
 8009888:	fb03 f301 	mul.w	r3, r3, r1
 800988c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800988e:	2b00      	cmp	r3, #0
 8009890:	d110      	bne.n	80098b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	6879      	ldr	r1, [r7, #4]
 8009896:	4613      	mov	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	440b      	add	r3, r1
 80098a0:	3318      	adds	r3, #24
 80098a2:	2200      	movs	r2, #0
 80098a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80098a6:	78f9      	ldrb	r1, [r7, #3]
 80098a8:	2300      	movs	r3, #0
 80098aa:	2200      	movs	r2, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 ff63 	bl	800b778 <USBD_LL_Transmit>
 80098b2:	e015      	b.n	80098e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80098dc:	78fa      	ldrb	r2, [r7, #3]
 80098de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b084      	sub	sp, #16
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
 80098f2:	460b      	mov	r3, r1
 80098f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009908:	2303      	movs	r3, #3
 800990a:	e015      	b.n	8009938 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	4619      	mov	r1, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 ffa1 	bl	800b858 <USBD_LL_GetRxDataSize>
 8009916:	4602      	mov	r2, r0
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009932:	4611      	mov	r1, r2
 8009934:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800994e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d015      	beq.n	8009986 <USBD_CDC_EP0_RxReady+0x46>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009960:	2bff      	cmp	r3, #255	; 0xff
 8009962:	d010      	beq.n	8009986 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009972:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800997a:	b292      	uxth	r2, r2
 800997c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	22ff      	movs	r2, #255	; 0xff
 8009982:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2243      	movs	r2, #67	; 0x43
 800999c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800999e:	4b03      	ldr	r3, [pc, #12]	; (80099ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr
 80099ac:	20000094 	.word	0x20000094

080099b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2243      	movs	r2, #67	; 0x43
 80099bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80099be:	4b03      	ldr	r3, [pc, #12]	; (80099cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	20000050 	.word	0x20000050

080099d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b083      	sub	sp, #12
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2243      	movs	r2, #67	; 0x43
 80099dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80099de:	4b03      	ldr	r3, [pc, #12]	; (80099ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr
 80099ec:	200000d8 	.word	0x200000d8

080099f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	220a      	movs	r2, #10
 80099fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80099fe:	4b03      	ldr	r3, [pc, #12]	; (8009a0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	2000000c 	.word	0x2000000c

08009a10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e004      	b.n	8009a2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr

08009a3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b087      	sub	sp, #28
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a4c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009a5e:	2300      	movs	r3, #0
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	371c      	adds	r7, #28
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a7c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009aae:	2303      	movs	r3, #3
 8009ab0:	e016      	b.n	8009ae0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7c1b      	ldrb	r3, [r3, #16]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fe8e 	bl	800b7e8 <USBD_LL_PrepareReceive>
 8009acc:	e007      	b.n	8009ade <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ad4:	2340      	movs	r3, #64	; 0x40
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fe85 	bl	800b7e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3710      	adds	r7, #16
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	4613      	mov	r3, r2
 8009af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e01f      	b.n	8009b40 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d003      	beq.n	8009b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	79fa      	ldrb	r2, [r7, #7]
 8009b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009b34:	68f8      	ldr	r0, [r7, #12]
 8009b36:	f001 fc61 	bl	800b3fc <USBD_LL_Init>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e016      	b.n	8009b8e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00b      	beq.n	8009b8c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7c:	f107 020e 	add.w	r2, r7, #14
 8009b80:	4610      	mov	r0, r2
 8009b82:	4798      	blx	r3
 8009b84:	4602      	mov	r2, r0
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f001 fc76 	bl	800b490 <USBD_LL_Start>
 8009ba4:	4603      	mov	r3, r0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009bae:	b480      	push	{r7}
 8009bb0:	b083      	sub	sp, #12
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	460b      	mov	r3, r1
 8009bce:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d009      	beq.n	8009bf2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	78fa      	ldrb	r2, [r7, #3]
 8009be8:	4611      	mov	r1, r2
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	4798      	blx	r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d007      	beq.n	8009c22 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	4611      	mov	r1, r2
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	4798      	blx	r3
  }

  return USBD_OK;
 8009c22:	2300      	movs	r3, #0
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 ff58 	bl	800aaf4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009c52:	461a      	mov	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009c60:	f003 031f 	and.w	r3, r3, #31
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d00e      	beq.n	8009c86 <USBD_LL_SetupStage+0x5a>
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d302      	bcc.n	8009c72 <USBD_LL_SetupStage+0x46>
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d014      	beq.n	8009c9a <USBD_LL_SetupStage+0x6e>
 8009c70:	e01d      	b.n	8009cae <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c78:	4619      	mov	r1, r3
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fa18 	bl	800a0b0 <USBD_StdDevReq>
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
      break;
 8009c84:	e020      	b.n	8009cc8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009c8c:	4619      	mov	r1, r3
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa7c 	bl	800a18c <USBD_StdItfReq>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
      break;
 8009c98:	e016      	b.n	8009cc8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fab8 	bl	800a218 <USBD_StdEPReq>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
      break;
 8009cac:	e00c      	b.n	8009cc8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	4619      	mov	r1, r3
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 fc8d 	bl	800b5dc <USBD_LL_StallEP>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc6:	bf00      	nop
  }

  return ret;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b086      	sub	sp, #24
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	60f8      	str	r0, [r7, #12]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	607a      	str	r2, [r7, #4]
 8009cde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ce0:	7afb      	ldrb	r3, [r7, #11]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d137      	bne.n	8009d56 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009cec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cf4:	2b03      	cmp	r3, #3
 8009cf6:	d14a      	bne.n	8009d8e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d913      	bls.n	8009d2c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	1ad2      	subs	r2, r2, r3
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	68da      	ldr	r2, [r3, #12]
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	bf28      	it	cs
 8009d1e:	4613      	movcs	r3, r2
 8009d20:	461a      	mov	r2, r3
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f000 ffd9 	bl	800acdc <USBD_CtlContinueRx>
 8009d2a:	e030      	b.n	8009d8e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00a      	beq.n	8009d4e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d105      	bne.n	8009d4e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8009d4e:	68f8      	ldr	r0, [r7, #12]
 8009d50:	f000 ffd5 	bl	800acfe <USBD_CtlSendStatus>
 8009d54:	e01b      	b.n	8009d8e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d013      	beq.n	8009d8a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009d68:	2b03      	cmp	r3, #3
 8009d6a:	d10e      	bne.n	8009d8a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	7afa      	ldrb	r2, [r7, #11]
 8009d76:	4611      	mov	r1, r2
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	4798      	blx	r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009d80:	7dfb      	ldrb	r3, [r7, #23]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8009d86:	7dfb      	ldrb	r3, [r7, #23]
 8009d88:	e002      	b.n	8009d90 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009d8a:	2303      	movs	r3, #3
 8009d8c:	e000      	b.n	8009d90 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	460b      	mov	r3, r1
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009da6:	7afb      	ldrb	r3, [r7, #11]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d16a      	bne.n	8009e82 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3314      	adds	r3, #20
 8009db0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009db8:	2b02      	cmp	r3, #2
 8009dba:	d155      	bne.n	8009e68 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d914      	bls.n	8009df2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	1ad2      	subs	r2, r2, r3
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	689b      	ldr	r3, [r3, #8]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	68f8      	ldr	r0, [r7, #12]
 8009de0:	f000 ff4e 	bl	800ac80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	2100      	movs	r1, #0
 8009dea:	68f8      	ldr	r0, [r7, #12]
 8009dec:	f001 fcfc 	bl	800b7e8 <USBD_LL_PrepareReceive>
 8009df0:	e03a      	b.n	8009e68 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d11c      	bne.n	8009e38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d316      	bcc.n	8009e38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d20f      	bcs.n	8009e38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 ff2f 	bl	800ac80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	2100      	movs	r1, #0
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f001 fcd9 	bl	800b7e8 <USBD_LL_PrepareReceive>
 8009e36:	e017      	b.n	8009e68 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009e4a:	2b03      	cmp	r3, #3
 8009e4c:	d105      	bne.n	8009e5a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009e5a:	2180      	movs	r1, #128	; 0x80
 8009e5c:	68f8      	ldr	r0, [r7, #12]
 8009e5e:	f001 fbbd 	bl	800b5dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f000 ff5e 	bl	800ad24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d123      	bne.n	8009eba <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f7ff fe9b 	bl	8009bae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009e80:	e01b      	b.n	8009eba <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d013      	beq.n	8009eb6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009e94:	2b03      	cmp	r3, #3
 8009e96:	d10e      	bne.n	8009eb6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e9e:	695b      	ldr	r3, [r3, #20]
 8009ea0:	7afa      	ldrb	r2, [r7, #11]
 8009ea2:	4611      	mov	r1, r2
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	4798      	blx	r3
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8009eac:	7dfb      	ldrb	r3, [r7, #23]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d003      	beq.n	8009eba <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	e002      	b.n	8009ebc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009eb6:	2303      	movs	r3, #3
 8009eb8:	e000      	b.n	8009ebc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8009eba:	2300      	movs	r3, #0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d009      	beq.n	8009f08 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	6852      	ldr	r2, [r2, #4]
 8009f00:	b2d2      	uxtb	r2, r2
 8009f02:	4611      	mov	r1, r2
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f08:	2340      	movs	r3, #64	; 0x40
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 faf0 	bl	800b4f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2240      	movs	r2, #64	; 0x40
 8009f20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	2200      	movs	r2, #0
 8009f28:	2180      	movs	r1, #128	; 0x80
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 fae2 	bl	800b4f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2201      	movs	r2, #1
 8009f34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2240      	movs	r2, #64	; 0x40
 8009f3a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009f46:	b480      	push	{r7}
 8009f48:	b083      	sub	sp, #12
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	78fa      	ldrb	r2, [r7, #3]
 8009f56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f9e:	2b04      	cmp	r3, #4
 8009fa0:	d105      	bne.n	8009fae <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	370c      	adds	r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d10b      	bne.n	8009fe6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd4:	69db      	ldr	r3, [r3, #28]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d005      	beq.n	8009fe6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fe0:	69db      	ldr	r3, [r3, #28]
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
 800a012:	460b      	mov	r3, r1
 800a014:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a016:	2300      	movs	r3, #0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	370c      	adds	r7, #12
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a050:	2b00      	cmp	r3, #0
 800a052:	d009      	beq.n	800a068 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6852      	ldr	r2, [r2, #4]
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	4611      	mov	r1, r2
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	4798      	blx	r3
  }

  return USBD_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a072:	b480      	push	{r7}
 800a074:	b087      	sub	sp, #28
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	3301      	adds	r3, #1
 800a088:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a090:	8a3b      	ldrh	r3, [r7, #16]
 800a092:	021b      	lsls	r3, r3, #8
 800a094:	b21a      	sxth	r2, r3
 800a096:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a09a:	4313      	orrs	r3, r2
 800a09c:	b21b      	sxth	r3, r3
 800a09e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a0a0:	89fb      	ldrh	r3, [r7, #14]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	371c      	adds	r7, #28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a0c6:	2b20      	cmp	r3, #32
 800a0c8:	d004      	beq.n	800a0d4 <USBD_StdDevReq+0x24>
 800a0ca:	2b40      	cmp	r3, #64	; 0x40
 800a0cc:	d002      	beq.n	800a0d4 <USBD_StdDevReq+0x24>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <USBD_StdDevReq+0x38>
 800a0d2:	e050      	b.n	800a176 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0da:	689b      	ldr	r3, [r3, #8]
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e6:	e04b      	b.n	800a180 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	785b      	ldrb	r3, [r3, #1]
 800a0ec:	2b09      	cmp	r3, #9
 800a0ee:	d83c      	bhi.n	800a16a <USBD_StdDevReq+0xba>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <USBD_StdDevReq+0x48>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a161 	.word	0x0800a161
 800a100:	0800a16b 	.word	0x0800a16b
 800a104:	0800a157 	.word	0x0800a157
 800a108:	0800a16b 	.word	0x0800a16b
 800a10c:	0800a12b 	.word	0x0800a12b
 800a110:	0800a121 	.word	0x0800a121
 800a114:	0800a16b 	.word	0x0800a16b
 800a118:	0800a143 	.word	0x0800a143
 800a11c:	0800a135 	.word	0x0800a135
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 f9d0 	bl	800a4c8 <USBD_GetDescriptor>
      break;
 800a128:	e024      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a12a:	6839      	ldr	r1, [r7, #0]
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fb5f 	bl	800a7f0 <USBD_SetAddress>
      break;
 800a132:	e01f      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fb9c 	bl	800a874 <USBD_SetConfig>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
      break;
 800a140:	e018      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fc39 	bl	800a9bc <USBD_GetConfig>
      break;
 800a14a:	e013      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a14c:	6839      	ldr	r1, [r7, #0]
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fc68 	bl	800aa24 <USBD_GetStatus>
      break;
 800a154:	e00e      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a156:	6839      	ldr	r1, [r7, #0]
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fc96 	bl	800aa8a <USBD_SetFeature>
      break;
 800a15e:	e009      	b.n	800a174 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fca5 	bl	800aab2 <USBD_ClrFeature>
      break;
 800a168:	e004      	b.n	800a174 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f000 fcfb 	bl	800ab68 <USBD_CtlError>
      break;
 800a172:	bf00      	nop
    }
    break;
 800a174:	e004      	b.n	800a180 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 fcf5 	bl	800ab68 <USBD_CtlError>
    break;
 800a17e:	bf00      	nop
  }

  return ret;
 800a180:	7bfb      	ldrb	r3, [r7, #15]
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop

0800a18c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a196:	2300      	movs	r3, #0
 800a198:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1a2:	2b20      	cmp	r3, #32
 800a1a4:	d003      	beq.n	800a1ae <USBD_StdItfReq+0x22>
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d001      	beq.n	800a1ae <USBD_StdItfReq+0x22>
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d12a      	bne.n	800a204 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d81d      	bhi.n	800a1f6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	889b      	ldrh	r3, [r3, #4]
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d813      	bhi.n	800a1ec <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	6839      	ldr	r1, [r7, #0]
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	88db      	ldrh	r3, [r3, #6]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d110      	bne.n	800a200 <USBD_StdItfReq+0x74>
 800a1de:	7bfb      	ldrb	r3, [r7, #15]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10d      	bne.n	800a200 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 fd8a 	bl	800acfe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a1ea:	e009      	b.n	800a200 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 fcba 	bl	800ab68 <USBD_CtlError>
      break;
 800a1f4:	e004      	b.n	800a200 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a1f6:	6839      	ldr	r1, [r7, #0]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fcb5 	bl	800ab68 <USBD_CtlError>
      break;
 800a1fe:	e000      	b.n	800a202 <USBD_StdItfReq+0x76>
      break;
 800a200:	bf00      	nop
    }
    break;
 800a202:	e004      	b.n	800a20e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a204:	6839      	ldr	r1, [r7, #0]
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fcae 	bl	800ab68 <USBD_CtlError>
    break;
 800a20c:	bf00      	nop
  }

  return ret;
 800a20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3710      	adds	r7, #16
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	889b      	ldrh	r3, [r3, #4]
 800a22a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a234:	2b20      	cmp	r3, #32
 800a236:	d004      	beq.n	800a242 <USBD_StdEPReq+0x2a>
 800a238:	2b40      	cmp	r3, #64	; 0x40
 800a23a:	d002      	beq.n	800a242 <USBD_StdEPReq+0x2a>
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00a      	beq.n	800a256 <USBD_StdEPReq+0x3e>
 800a240:	e137      	b.n	800a4b2 <USBD_StdEPReq+0x29a>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	4798      	blx	r3
 800a250:	4603      	mov	r3, r0
 800a252:	73fb      	strb	r3, [r7, #15]
    break;
 800a254:	e132      	b.n	800a4bc <USBD_StdEPReq+0x2a4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	785b      	ldrb	r3, [r3, #1]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d03e      	beq.n	800a2dc <USBD_StdEPReq+0xc4>
 800a25e:	2b03      	cmp	r3, #3
 800a260:	d002      	beq.n	800a268 <USBD_StdEPReq+0x50>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d079      	beq.n	800a35a <USBD_StdEPReq+0x142>
 800a266:	e11e      	b.n	800a4a6 <USBD_StdEPReq+0x28e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d002      	beq.n	800a278 <USBD_StdEPReq+0x60>
 800a272:	2b03      	cmp	r3, #3
 800a274:	d015      	beq.n	800a2a2 <USBD_StdEPReq+0x8a>
 800a276:	e02b      	b.n	800a2d0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a278:	7bbb      	ldrb	r3, [r7, #14]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <USBD_StdEPReq+0x80>
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	2b80      	cmp	r3, #128	; 0x80
 800a282:	d009      	beq.n	800a298 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f001 f9a7 	bl	800b5dc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a28e:	2180      	movs	r1, #128	; 0x80
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f9a3 	bl	800b5dc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a296:	e020      	b.n	800a2da <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a298:	6839      	ldr	r1, [r7, #0]
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fc64 	bl	800ab68 <USBD_CtlError>
        break;
 800a2a0:	e01b      	b.n	800a2da <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	885b      	ldrh	r3, [r3, #2]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10e      	bne.n	800a2c8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a2aa:	7bbb      	ldrb	r3, [r7, #14]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_StdEPReq+0xb0>
 800a2b0:	7bbb      	ldrb	r3, [r7, #14]
 800a2b2:	2b80      	cmp	r3, #128	; 0x80
 800a2b4:	d008      	beq.n	800a2c8 <USBD_StdEPReq+0xb0>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d104      	bne.n	800a2c8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f001 f98a 	bl	800b5dc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fd18 	bl	800acfe <USBD_CtlSendStatus>

        break;
 800a2ce:	e004      	b.n	800a2da <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a2d0:	6839      	ldr	r1, [r7, #0]
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 fc48 	bl	800ab68 <USBD_CtlError>
        break;
 800a2d8:	bf00      	nop
      }
      break;
 800a2da:	e0e9      	b.n	800a4b0 <USBD_StdEPReq+0x298>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d002      	beq.n	800a2ec <USBD_StdEPReq+0xd4>
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d015      	beq.n	800a316 <USBD_StdEPReq+0xfe>
 800a2ea:	e02f      	b.n	800a34c <USBD_StdEPReq+0x134>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a2ec:	7bbb      	ldrb	r3, [r7, #14]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d00c      	beq.n	800a30c <USBD_StdEPReq+0xf4>
 800a2f2:	7bbb      	ldrb	r3, [r7, #14]
 800a2f4:	2b80      	cmp	r3, #128	; 0x80
 800a2f6:	d009      	beq.n	800a30c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a2f8:	7bbb      	ldrb	r3, [r7, #14]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f001 f96d 	bl	800b5dc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a302:	2180      	movs	r1, #128	; 0x80
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f001 f969 	bl	800b5dc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a30a:	e025      	b.n	800a358 <USBD_StdEPReq+0x140>
          USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 fc2a 	bl	800ab68 <USBD_CtlError>
        break;
 800a314:	e020      	b.n	800a358 <USBD_StdEPReq+0x140>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d11b      	bne.n	800a356 <USBD_StdEPReq+0x13e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a31e:	7bbb      	ldrb	r3, [r7, #14]
 800a320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	4619      	mov	r1, r3
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 f98b 	bl	800b648 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fce3 	bl	800acfe <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	4798      	blx	r3
 800a346:	4603      	mov	r3, r0
 800a348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a34a:	e004      	b.n	800a356 <USBD_StdEPReq+0x13e>

      default:
        USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fc0a 	bl	800ab68 <USBD_CtlError>
        break;
 800a354:	e000      	b.n	800a358 <USBD_StdEPReq+0x140>
        break;
 800a356:	bf00      	nop
      }
      break;
 800a358:	e0aa      	b.n	800a4b0 <USBD_StdEPReq+0x298>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a360:	2b02      	cmp	r3, #2
 800a362:	d002      	beq.n	800a36a <USBD_StdEPReq+0x152>
 800a364:	2b03      	cmp	r3, #3
 800a366:	d032      	beq.n	800a3ce <USBD_StdEPReq+0x1b6>
 800a368:	e097      	b.n	800a49a <USBD_StdEPReq+0x282>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d007      	beq.n	800a380 <USBD_StdEPReq+0x168>
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	d004      	beq.n	800a380 <USBD_StdEPReq+0x168>
        {
          USBD_CtlError(pdev, req);
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f000 fbf5 	bl	800ab68 <USBD_CtlError>
          break;
 800a37e:	e091      	b.n	800a4a4 <USBD_StdEPReq+0x28c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a380:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a384:	2b00      	cmp	r3, #0
 800a386:	da0b      	bge.n	800a3a0 <USBD_StdEPReq+0x188>
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a38e:	4613      	mov	r3, r2
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	3310      	adds	r3, #16
 800a398:	687a      	ldr	r2, [r7, #4]
 800a39a:	4413      	add	r3, r2
 800a39c:	3304      	adds	r3, #4
 800a39e:	e00b      	b.n	800a3b8 <USBD_StdEPReq+0x1a0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a3a0:	7bbb      	ldrb	r3, [r7, #14]
 800a3a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4413      	add	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2202      	movs	r2, #2
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 fc3f 	bl	800ac4a <USBD_CtlSendData>
        break;
 800a3cc:	e06a      	b.n	800a4a4 <USBD_StdEPReq+0x28c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a3ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	da11      	bge.n	800a3fa <USBD_StdEPReq+0x1e2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a3d6:	7bbb      	ldrb	r3, [r7, #14]
 800a3d8:	f003 020f 	and.w	r2, r3, #15
 800a3dc:	6879      	ldr	r1, [r7, #4]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	440b      	add	r3, r1
 800a3e8:	3324      	adds	r3, #36	; 0x24
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d117      	bne.n	800a420 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fbb8 	bl	800ab68 <USBD_CtlError>
            break;
 800a3f8:	e054      	b.n	800a4a4 <USBD_StdEPReq+0x28c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
 800a3fc:	f003 020f 	and.w	r2, r3, #15
 800a400:	6879      	ldr	r1, [r7, #4]
 800a402:	4613      	mov	r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	4413      	add	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	440b      	add	r3, r1
 800a40c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d104      	bne.n	800a420 <USBD_StdEPReq+0x208>
          {
            USBD_CtlError(pdev, req);
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 fba5 	bl	800ab68 <USBD_CtlError>
            break;
 800a41e:	e041      	b.n	800a4a4 <USBD_StdEPReq+0x28c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a420:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a424:	2b00      	cmp	r3, #0
 800a426:	da0b      	bge.n	800a440 <USBD_StdEPReq+0x228>
 800a428:	7bbb      	ldrb	r3, [r7, #14]
 800a42a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a42e:	4613      	mov	r3, r2
 800a430:	009b      	lsls	r3, r3, #2
 800a432:	4413      	add	r3, r2
 800a434:	009b      	lsls	r3, r3, #2
 800a436:	3310      	adds	r3, #16
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	4413      	add	r3, r2
 800a43c:	3304      	adds	r3, #4
 800a43e:	e00b      	b.n	800a458 <USBD_StdEPReq+0x240>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	4413      	add	r3, r2
 800a456:	3304      	adds	r3, #4
 800a458:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <USBD_StdEPReq+0x24e>
 800a460:	7bbb      	ldrb	r3, [r7, #14]
 800a462:	2b80      	cmp	r3, #128	; 0x80
 800a464:	d103      	bne.n	800a46e <USBD_StdEPReq+0x256>
          {
            pep->status = 0x0000U;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2200      	movs	r2, #0
 800a46a:	601a      	str	r2, [r3, #0]
 800a46c:	e00e      	b.n	800a48c <USBD_StdEPReq+0x274>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a46e:	7bbb      	ldrb	r3, [r7, #14]
 800a470:	4619      	mov	r1, r3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f001 f91e 	bl	800b6b4 <USBD_LL_IsStallEP>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d003      	beq.n	800a486 <USBD_StdEPReq+0x26e>
          {
            pep->status = 0x0001U;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2201      	movs	r2, #1
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	e002      	b.n	800a48c <USBD_StdEPReq+0x274>
          }
          else
          {
            pep->status = 0x0000U;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	2200      	movs	r2, #0
 800a48a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	2202      	movs	r2, #2
 800a490:	4619      	mov	r1, r3
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fbd9 	bl	800ac4a <USBD_CtlSendData>
          break;
 800a498:	e004      	b.n	800a4a4 <USBD_StdEPReq+0x28c>

      default:
        USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fb63 	bl	800ab68 <USBD_CtlError>
        break;
 800a4a2:	bf00      	nop
      }
      break;
 800a4a4:	e004      	b.n	800a4b0 <USBD_StdEPReq+0x298>

    default:
      USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fb5d 	bl	800ab68 <USBD_CtlError>
      break;
 800a4ae:	bf00      	nop
    }
    break;
 800a4b0:	e004      	b.n	800a4bc <USBD_StdEPReq+0x2a4>

  default:
    USBD_CtlError(pdev, req);
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fb57 	bl	800ab68 <USBD_CtlError>
    break;
 800a4ba:	bf00      	nop
  }

  return ret;
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
	...

0800a4c8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	885b      	ldrh	r3, [r3, #2]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	3b01      	subs	r3, #1
 800a4e8:	2b0e      	cmp	r3, #14
 800a4ea:	f200 8152 	bhi.w	800a792 <USBD_GetDescriptor+0x2ca>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <USBD_GetDescriptor+0x2c>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a565 	.word	0x0800a565
 800a4f8:	0800a57d 	.word	0x0800a57d
 800a4fc:	0800a5bd 	.word	0x0800a5bd
 800a500:	0800a793 	.word	0x0800a793
 800a504:	0800a793 	.word	0x0800a793
 800a508:	0800a733 	.word	0x0800a733
 800a50c:	0800a75f 	.word	0x0800a75f
 800a510:	0800a793 	.word	0x0800a793
 800a514:	0800a793 	.word	0x0800a793
 800a518:	0800a793 	.word	0x0800a793
 800a51c:	0800a793 	.word	0x0800a793
 800a520:	0800a793 	.word	0x0800a793
 800a524:	0800a793 	.word	0x0800a793
 800a528:	0800a793 	.word	0x0800a793
 800a52c:	0800a531 	.word	0x0800a531
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00b      	beq.n	800a554 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a542:	69db      	ldr	r3, [r3, #28]
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	7c12      	ldrb	r2, [r2, #16]
 800a548:	f107 0108 	add.w	r1, r7, #8
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
 800a550:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a552:	e126      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a554:	6839      	ldr	r1, [r7, #0]
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fb06 	bl	800ab68 <USBD_CtlError>
      err++;
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	3301      	adds	r3, #1
 800a560:	72fb      	strb	r3, [r7, #11]
    break;
 800a562:	e11e      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	7c12      	ldrb	r2, [r2, #16]
 800a570:	f107 0108 	add.w	r1, r7, #8
 800a574:	4610      	mov	r0, r2
 800a576:	4798      	blx	r3
 800a578:	60f8      	str	r0, [r7, #12]
    break;
 800a57a:	e112      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7c1b      	ldrb	r3, [r3, #16]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10d      	bne.n	800a5a0 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58c:	f107 0208 	add.w	r2, r7, #8
 800a590:	4610      	mov	r0, r2
 800a592:	4798      	blx	r3
 800a594:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	3301      	adds	r3, #1
 800a59a:	2202      	movs	r2, #2
 800a59c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a59e:	e100      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a8:	f107 0208 	add.w	r2, r7, #8
 800a5ac:	4610      	mov	r0, r2
 800a5ae:	4798      	blx	r3
 800a5b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	2202      	movs	r2, #2
 800a5b8:	701a      	strb	r2, [r3, #0]
    break;
 800a5ba:	e0f2      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	885b      	ldrh	r3, [r3, #2]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	f200 80ac 	bhi.w	800a720 <USBD_GetDescriptor+0x258>
 800a5c8:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <USBD_GetDescriptor+0x108>)
 800a5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ce:	bf00      	nop
 800a5d0:	0800a5e9 	.word	0x0800a5e9
 800a5d4:	0800a61d 	.word	0x0800a61d
 800a5d8:	0800a651 	.word	0x0800a651
 800a5dc:	0800a685 	.word	0x0800a685
 800a5e0:	0800a6b9 	.word	0x0800a6b9
 800a5e4:	0800a6ed 	.word	0x0800a6ed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00b      	beq.n	800a60c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	7c12      	ldrb	r2, [r2, #16]
 800a600:	f107 0108 	add.w	r1, r7, #8
 800a604:	4610      	mov	r0, r2
 800a606:	4798      	blx	r3
 800a608:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a60a:	e091      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 faaa 	bl	800ab68 <USBD_CtlError>
        err++;
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	3301      	adds	r3, #1
 800a618:	72fb      	strb	r3, [r7, #11]
      break;
 800a61a:	e089      	b.n	800a730 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00b      	beq.n	800a640 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	7c12      	ldrb	r2, [r2, #16]
 800a634:	f107 0108 	add.w	r1, r7, #8
 800a638:	4610      	mov	r0, r2
 800a63a:	4798      	blx	r3
 800a63c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a63e:	e077      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fa90 	bl	800ab68 <USBD_CtlError>
        err++;
 800a648:	7afb      	ldrb	r3, [r7, #11]
 800a64a:	3301      	adds	r3, #1
 800a64c:	72fb      	strb	r3, [r7, #11]
      break;
 800a64e:	e06f      	b.n	800a730 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d00b      	beq.n	800a674 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	687a      	ldr	r2, [r7, #4]
 800a666:	7c12      	ldrb	r2, [r2, #16]
 800a668:	f107 0108 	add.w	r1, r7, #8
 800a66c:	4610      	mov	r0, r2
 800a66e:	4798      	blx	r3
 800a670:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a672:	e05d      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fa76 	bl	800ab68 <USBD_CtlError>
        err++;
 800a67c:	7afb      	ldrb	r3, [r7, #11]
 800a67e:	3301      	adds	r3, #1
 800a680:	72fb      	strb	r3, [r7, #11]
      break;
 800a682:	e055      	b.n	800a730 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d00b      	beq.n	800a6a8 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	7c12      	ldrb	r2, [r2, #16]
 800a69c:	f107 0108 	add.w	r1, r7, #8
 800a6a0:	4610      	mov	r0, r2
 800a6a2:	4798      	blx	r3
 800a6a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6a6:	e043      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a6a8:	6839      	ldr	r1, [r7, #0]
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fa5c 	bl	800ab68 <USBD_CtlError>
        err++;
 800a6b0:	7afb      	ldrb	r3, [r7, #11]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	72fb      	strb	r3, [r7, #11]
      break;
 800a6b6:	e03b      	b.n	800a730 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6be:	695b      	ldr	r3, [r3, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d00b      	beq.n	800a6dc <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	7c12      	ldrb	r2, [r2, #16]
 800a6d0:	f107 0108 	add.w	r1, r7, #8
 800a6d4:	4610      	mov	r0, r2
 800a6d6:	4798      	blx	r3
 800a6d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a6da:	e029      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a6dc:	6839      	ldr	r1, [r7, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fa42 	bl	800ab68 <USBD_CtlError>
        err++;
 800a6e4:	7afb      	ldrb	r3, [r7, #11]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	72fb      	strb	r3, [r7, #11]
      break;
 800a6ea:	e021      	b.n	800a730 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6fe:	699b      	ldr	r3, [r3, #24]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	7c12      	ldrb	r2, [r2, #16]
 800a704:	f107 0108 	add.w	r1, r7, #8
 800a708:	4610      	mov	r0, r2
 800a70a:	4798      	blx	r3
 800a70c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a70e:	e00f      	b.n	800a730 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 fa28 	bl	800ab68 <USBD_CtlError>
        err++;
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	3301      	adds	r3, #1
 800a71c:	72fb      	strb	r3, [r7, #11]
      break;
 800a71e:	e007      	b.n	800a730 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 fa20 	bl	800ab68 <USBD_CtlError>
      err++;
 800a728:	7afb      	ldrb	r3, [r7, #11]
 800a72a:	3301      	adds	r3, #1
 800a72c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800a72e:	bf00      	nop
    }
    break;
 800a730:	e037      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	7c1b      	ldrb	r3, [r3, #16]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d109      	bne.n	800a74e <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a742:	f107 0208 	add.w	r2, r7, #8
 800a746:	4610      	mov	r0, r2
 800a748:	4798      	blx	r3
 800a74a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a74c:	e029      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fa09 	bl	800ab68 <USBD_CtlError>
      err++;
 800a756:	7afb      	ldrb	r3, [r7, #11]
 800a758:	3301      	adds	r3, #1
 800a75a:	72fb      	strb	r3, [r7, #11]
    break;
 800a75c:	e021      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	7c1b      	ldrb	r3, [r3, #16]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10d      	bne.n	800a782 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	f107 0208 	add.w	r2, r7, #8
 800a772:	4610      	mov	r0, r2
 800a774:	4798      	blx	r3
 800a776:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3301      	adds	r3, #1
 800a77c:	2207      	movs	r2, #7
 800a77e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800a780:	e00f      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 f9ef 	bl	800ab68 <USBD_CtlError>
      err++;
 800a78a:	7afb      	ldrb	r3, [r7, #11]
 800a78c:	3301      	adds	r3, #1
 800a78e:	72fb      	strb	r3, [r7, #11]
    break;
 800a790:	e007      	b.n	800a7a2 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f9e7 	bl	800ab68 <USBD_CtlError>
    err++;
 800a79a:	7afb      	ldrb	r3, [r7, #11]
 800a79c:	3301      	adds	r3, #1
 800a79e:	72fb      	strb	r3, [r7, #11]
    break;
 800a7a0:	bf00      	nop
  }

  if (err != 0U)
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d11e      	bne.n	800a7e6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	88db      	ldrh	r3, [r3, #6]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d016      	beq.n	800a7de <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800a7b0:	893b      	ldrh	r3, [r7, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00e      	beq.n	800a7d4 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	88da      	ldrh	r2, [r3, #6]
 800a7ba:	893b      	ldrh	r3, [r7, #8]
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	bf28      	it	cs
 800a7c0:	4613      	movcs	r3, r2
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800a7c6:	893b      	ldrh	r3, [r7, #8]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	68f9      	ldr	r1, [r7, #12]
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa3c 	bl	800ac4a <USBD_CtlSendData>
 800a7d2:	e009      	b.n	800a7e8 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f9c6 	bl	800ab68 <USBD_CtlError>
 800a7dc:	e004      	b.n	800a7e8 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fa8d 	bl	800acfe <USBD_CtlSendStatus>
 800a7e4:	e000      	b.n	800a7e8 <USBD_GetDescriptor+0x320>
    return;
 800a7e6:	bf00      	nop
    }
  }
}
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop

0800a7f0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	889b      	ldrh	r3, [r3, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d130      	bne.n	800a864 <USBD_SetAddress+0x74>
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	88db      	ldrh	r3, [r3, #6]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d12c      	bne.n	800a864 <USBD_SetAddress+0x74>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	885b      	ldrh	r3, [r3, #2]
 800a80e:	2b7f      	cmp	r3, #127	; 0x7f
 800a810:	d828      	bhi.n	800a864 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	885b      	ldrh	r3, [r3, #2]
 800a816:	b2db      	uxtb	r3, r3
 800a818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a824:	2b03      	cmp	r3, #3
 800a826:	d104      	bne.n	800a832 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 f99c 	bl	800ab68 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a830:	e01c      	b.n	800a86c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	7bfa      	ldrb	r2, [r7, #15]
 800a836:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a83a:	7bfb      	ldrb	r3, [r7, #15]
 800a83c:	4619      	mov	r1, r3
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 ff64 	bl	800b70c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 fa5a 	bl	800acfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a84a:	7bfb      	ldrb	r3, [r7, #15]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2202      	movs	r2, #2
 800a854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a858:	e008      	b.n	800a86c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a862:	e003      	b.n	800a86c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a864:	6839      	ldr	r1, [r7, #0]
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f97e 	bl	800ab68 <USBD_CtlError>
  }
}
 800a86c:	bf00      	nop
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	885b      	ldrh	r3, [r3, #2]
 800a886:	b2da      	uxtb	r2, r3
 800a888:	4b4b      	ldr	r3, [pc, #300]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a88a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a88c:	4b4a      	ldr	r3, [pc, #296]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	2b01      	cmp	r3, #1
 800a892:	d905      	bls.n	800a8a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 f966 	bl	800ab68 <USBD_CtlError>
    return USBD_FAIL;
 800a89c:	2303      	movs	r3, #3
 800a89e:	e087      	b.n	800a9b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d002      	beq.n	800a8b0 <USBD_SetConfig+0x3c>
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d025      	beq.n	800a8fa <USBD_SetConfig+0x86>
 800a8ae:	e071      	b.n	800a994 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800a8b0:	4b41      	ldr	r3, [pc, #260]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a8b2:	781b      	ldrb	r3, [r3, #0]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01c      	beq.n	800a8f2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800a8b8:	4b3f      	ldr	r3, [pc, #252]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	461a      	mov	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a8c2:	4b3d      	ldr	r3, [pc, #244]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff f97b 	bl	8009bc4 <USBD_SetClassConfig>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800a8d8:	6839      	ldr	r1, [r7, #0]
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 f944 	bl	800ab68 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a8e0:	e065      	b.n	800a9ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa0b 	bl	800acfe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2203      	movs	r2, #3
 800a8ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a8f0:	e05d      	b.n	800a9ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fa03 	bl	800acfe <USBD_CtlSendStatus>
    break;
 800a8f8:	e059      	b.n	800a9ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800a8fa:	4b2f      	ldr	r3, [pc, #188]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d112      	bne.n	800a928 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2202      	movs	r2, #2
 800a906:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800a90a:	4b2b      	ldr	r3, [pc, #172]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a914:	4b28      	ldr	r3, [pc, #160]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff f96e 	bl	8009bfc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f9ec 	bl	800acfe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800a926:	e042      	b.n	800a9ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800a928:	4b23      	ldr	r3, [pc, #140]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	429a      	cmp	r2, r3
 800a934:	d02a      	beq.n	800a98c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff f95c 	bl	8009bfc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800a944:	4b1c      	ldr	r3, [pc, #112]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	461a      	mov	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800a94e:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f7ff f935 	bl	8009bc4 <USBD_SetClassConfig>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00f      	beq.n	800a984 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800a964:	6839      	ldr	r1, [r7, #0]
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 f8fe 	bl	800ab68 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	4619      	mov	r1, r3
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff f941 	bl	8009bfc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2202      	movs	r2, #2
 800a97e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800a982:	e014      	b.n	800a9ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 f9ba 	bl	800acfe <USBD_CtlSendStatus>
    break;
 800a98a:	e010      	b.n	800a9ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f9b6 	bl	800acfe <USBD_CtlSendStatus>
    break;
 800a992:	e00c      	b.n	800a9ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800a994:	6839      	ldr	r1, [r7, #0]
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f8e6 	bl	800ab68 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a99c:	4b06      	ldr	r3, [pc, #24]	; (800a9b8 <USBD_SetConfig+0x144>)
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff f92a 	bl	8009bfc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ac:	bf00      	nop
  }

  return ret;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	2000021c 	.word	0x2000021c

0800a9bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	88db      	ldrh	r3, [r3, #6]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d004      	beq.n	800a9d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a9ce:	6839      	ldr	r1, [r7, #0]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f8c9 	bl	800ab68 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800a9d6:	e021      	b.n	800aa1c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	db17      	blt.n	800aa12 <USBD_GetConfig+0x56>
 800a9e2:	2b02      	cmp	r3, #2
 800a9e4:	dd02      	ble.n	800a9ec <USBD_GetConfig+0x30>
 800a9e6:	2b03      	cmp	r3, #3
 800a9e8:	d00b      	beq.n	800aa02 <USBD_GetConfig+0x46>
 800a9ea:	e012      	b.n	800aa12 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	3308      	adds	r3, #8
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f925 	bl	800ac4a <USBD_CtlSendData>
      break;
 800aa00:	e00c      	b.n	800aa1c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3304      	adds	r3, #4
 800aa06:	2201      	movs	r2, #1
 800aa08:	4619      	mov	r1, r3
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f91d 	bl	800ac4a <USBD_CtlSendData>
      break;
 800aa10:	e004      	b.n	800aa1c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 f8a7 	bl	800ab68 <USBD_CtlError>
      break;
 800aa1a:	bf00      	nop
}
 800aa1c:	bf00      	nop
 800aa1e:	3708      	adds	r7, #8
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa34:	3b01      	subs	r3, #1
 800aa36:	2b02      	cmp	r3, #2
 800aa38:	d81e      	bhi.n	800aa78 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	88db      	ldrh	r3, [r3, #6]
 800aa3e:	2b02      	cmp	r3, #2
 800aa40:	d004      	beq.n	800aa4c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f88f 	bl	800ab68 <USBD_CtlError>
      break;
 800aa4a:	e01a      	b.n	800aa82 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2201      	movs	r2, #1
 800aa50:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d005      	beq.n	800aa68 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	f043 0202 	orr.w	r2, r3, #2
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	330c      	adds	r3, #12
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 f8ea 	bl	800ac4a <USBD_CtlSendData>
    break;
 800aa76:	e004      	b.n	800aa82 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 f874 	bl	800ab68 <USBD_CtlError>
    break;
 800aa80:	bf00      	nop
  }
}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	d106      	bne.n	800aaaa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f92a 	bl	800acfe <USBD_CtlSendStatus>
  }
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b082      	sub	sp, #8
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
 800aaba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d80b      	bhi.n	800aae0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	885b      	ldrh	r3, [r3, #2]
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d10c      	bne.n	800aaea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f910 	bl	800acfe <USBD_CtlSendStatus>
      }
      break;
 800aade:	e004      	b.n	800aaea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f840 	bl	800ab68 <USBD_CtlError>
      break;
 800aae8:	e000      	b.n	800aaec <USBD_ClrFeature+0x3a>
      break;
 800aaea:	bf00      	nop
  }
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	781a      	ldrb	r2, [r3, #0]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	781a      	ldrb	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff faa7 	bl	800a072 <SWAPBYTE>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	3301      	adds	r3, #1
 800ab36:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ab38:	68f8      	ldr	r0, [r7, #12]
 800ab3a:	f7ff fa9a 	bl	800a072 <SWAPBYTE>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	461a      	mov	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ab52:	68f8      	ldr	r0, [r7, #12]
 800ab54:	f7ff fa8d 	bl	800a072 <SWAPBYTE>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	80da      	strh	r2, [r3, #6]
}
 800ab60:	bf00      	nop
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab72:	2180      	movs	r1, #128	; 0x80
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fd31 	bl	800b5dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fd2d 	bl	800b5dc <USBD_LL_StallEP>
}
 800ab82:	bf00      	nop
 800ab84:	3708      	adds	r7, #8
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ab96:	2300      	movs	r3, #0
 800ab98:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d036      	beq.n	800ac0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800aba4:	6938      	ldr	r0, [r7, #16]
 800aba6:	f000 f836 	bl	800ac16 <USBD_GetLen>
 800abaa:	4603      	mov	r3, r0
 800abac:	3301      	adds	r3, #1
 800abae:	b29b      	uxth	r3, r3
 800abb0:	005b      	lsls	r3, r3, #1
 800abb2:	b29a      	uxth	r2, r3
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	7812      	ldrb	r2, [r2, #0]
 800abc2:	701a      	strb	r2, [r3, #0]
  idx++;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	3301      	adds	r3, #1
 800abc8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800abca:	7dfb      	ldrb	r3, [r7, #23]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	4413      	add	r3, r2
 800abd0:	2203      	movs	r2, #3
 800abd2:	701a      	strb	r2, [r3, #0]
  idx++;
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	3301      	adds	r3, #1
 800abd8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800abda:	e013      	b.n	800ac04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	68ba      	ldr	r2, [r7, #8]
 800abe0:	4413      	add	r3, r2
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	7812      	ldrb	r2, [r2, #0]
 800abe6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	3301      	adds	r3, #1
 800abec:	613b      	str	r3, [r7, #16]
    idx++;
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	3301      	adds	r3, #1
 800abf2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800abf4:	7dfb      	ldrb	r3, [r7, #23]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4413      	add	r3, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	701a      	strb	r2, [r3, #0]
    idx++;
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	3301      	adds	r3, #1
 800ac02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e7      	bne.n	800abdc <USBD_GetString+0x52>
 800ac0c:	e000      	b.n	800ac10 <USBD_GetString+0x86>
    return;
 800ac0e:	bf00      	nop
  }
}
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ac26:	e005      	b.n	800ac34 <USBD_GetLen+0x1e>
  {
    len++;
 800ac28:	7bfb      	ldrb	r3, [r7, #15]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	3301      	adds	r3, #1
 800ac32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d1f5      	bne.n	800ac28 <USBD_GetLen+0x12>
  }

  return len;
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3714      	adds	r7, #20
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2202      	movs	r2, #2
 800ac5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	2100      	movs	r1, #0
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 fd81 	bl	800b778 <USBD_LL_Transmit>

  return USBD_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3710      	adds	r7, #16
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	2100      	movs	r1, #0
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	f000 fd70 	bl	800b778 <USBD_LL_Transmit>

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	60f8      	str	r0, [r7, #12]
 800acaa:	60b9      	str	r1, [r7, #8]
 800acac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2203      	movs	r2, #3
 800acb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	68ba      	ldr	r2, [r7, #8]
 800acca:	2100      	movs	r1, #0
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 fd8b 	bl	800b7e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3710      	adds	r7, #16
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}

0800acdc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	68ba      	ldr	r2, [r7, #8]
 800acec:	2100      	movs	r1, #0
 800acee:	68f8      	ldr	r0, [r7, #12]
 800acf0:	f000 fd7a 	bl	800b7e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b082      	sub	sp, #8
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2204      	movs	r2, #4
 800ad0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2200      	movs	r2, #0
 800ad12:	2100      	movs	r1, #0
 800ad14:	6878      	ldr	r0, [r7, #4]
 800ad16:	f000 fd2f 	bl	800b778 <USBD_LL_Transmit>

  return USBD_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b082      	sub	sp, #8
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2205      	movs	r2, #5
 800ad30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ad34:	2300      	movs	r3, #0
 800ad36:	2200      	movs	r2, #0
 800ad38:	2100      	movs	r1, #0
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fd54 	bl	800b7e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
	...

0800ad4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ad50:	2200      	movs	r2, #0
 800ad52:	4912      	ldr	r1, [pc, #72]	; (800ad9c <MX_USB_DEVICE_Init+0x50>)
 800ad54:	4812      	ldr	r0, [pc, #72]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad56:	f7fe fec7 	bl	8009ae8 <USBD_Init>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ad60:	f7f7 fb54 	bl	800240c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ad64:	490f      	ldr	r1, [pc, #60]	; (800ada4 <MX_USB_DEVICE_Init+0x58>)
 800ad66:	480e      	ldr	r0, [pc, #56]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad68:	f7fe feee 	bl	8009b48 <USBD_RegisterClass>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d001      	beq.n	800ad76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ad72:	f7f7 fb4b 	bl	800240c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ad76:	490c      	ldr	r1, [pc, #48]	; (800ada8 <MX_USB_DEVICE_Init+0x5c>)
 800ad78:	4809      	ldr	r0, [pc, #36]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad7a:	f7fe fe49 	bl	8009a10 <USBD_CDC_RegisterInterface>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ad84:	f7f7 fb42 	bl	800240c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ad88:	4805      	ldr	r0, [pc, #20]	; (800ada0 <MX_USB_DEVICE_Init+0x54>)
 800ad8a:	f7fe ff04 	bl	8009b96 <USBD_Start>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ad94:	f7f7 fb3a 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ad98:	bf00      	nop
 800ad9a:	bd80      	pop	{r7, pc}
 800ad9c:	20000130 	.word	0x20000130
 800ada0:	20000838 	.word	0x20000838
 800ada4:	20000018 	.word	0x20000018
 800ada8:	2000011c 	.word	0x2000011c

0800adac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800adb0:	2200      	movs	r2, #0
 800adb2:	4905      	ldr	r1, [pc, #20]	; (800adc8 <CDC_Init_FS+0x1c>)
 800adb4:	4805      	ldr	r0, [pc, #20]	; (800adcc <CDC_Init_FS+0x20>)
 800adb6:	f7fe fe40 	bl	8009a3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800adba:	4905      	ldr	r1, [pc, #20]	; (800add0 <CDC_Init_FS+0x24>)
 800adbc:	4803      	ldr	r0, [pc, #12]	; (800adcc <CDC_Init_FS+0x20>)
 800adbe:	f7fe fe55 	bl	8009a6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800adc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20001308 	.word	0x20001308
 800adcc:	20000838 	.word	0x20000838
 800add0:	20000b08 	.word	0x20000b08

0800add4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800add4:	b480      	push	{r7}
 800add6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800add8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800adda:	4618      	mov	r0, r3
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr

0800ade4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	4603      	mov	r3, r0
 800adec:	6039      	str	r1, [r7, #0]
 800adee:	71fb      	strb	r3, [r7, #7]
 800adf0:	4613      	mov	r3, r2
 800adf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800adf4:	79fb      	ldrb	r3, [r7, #7]
 800adf6:	2b23      	cmp	r3, #35	; 0x23
 800adf8:	d84a      	bhi.n	800ae90 <CDC_Control_FS+0xac>
 800adfa:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <CDC_Control_FS+0x1c>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae91 	.word	0x0800ae91
 800ae04:	0800ae91 	.word	0x0800ae91
 800ae08:	0800ae91 	.word	0x0800ae91
 800ae0c:	0800ae91 	.word	0x0800ae91
 800ae10:	0800ae91 	.word	0x0800ae91
 800ae14:	0800ae91 	.word	0x0800ae91
 800ae18:	0800ae91 	.word	0x0800ae91
 800ae1c:	0800ae91 	.word	0x0800ae91
 800ae20:	0800ae91 	.word	0x0800ae91
 800ae24:	0800ae91 	.word	0x0800ae91
 800ae28:	0800ae91 	.word	0x0800ae91
 800ae2c:	0800ae91 	.word	0x0800ae91
 800ae30:	0800ae91 	.word	0x0800ae91
 800ae34:	0800ae91 	.word	0x0800ae91
 800ae38:	0800ae91 	.word	0x0800ae91
 800ae3c:	0800ae91 	.word	0x0800ae91
 800ae40:	0800ae91 	.word	0x0800ae91
 800ae44:	0800ae91 	.word	0x0800ae91
 800ae48:	0800ae91 	.word	0x0800ae91
 800ae4c:	0800ae91 	.word	0x0800ae91
 800ae50:	0800ae91 	.word	0x0800ae91
 800ae54:	0800ae91 	.word	0x0800ae91
 800ae58:	0800ae91 	.word	0x0800ae91
 800ae5c:	0800ae91 	.word	0x0800ae91
 800ae60:	0800ae91 	.word	0x0800ae91
 800ae64:	0800ae91 	.word	0x0800ae91
 800ae68:	0800ae91 	.word	0x0800ae91
 800ae6c:	0800ae91 	.word	0x0800ae91
 800ae70:	0800ae91 	.word	0x0800ae91
 800ae74:	0800ae91 	.word	0x0800ae91
 800ae78:	0800ae91 	.word	0x0800ae91
 800ae7c:	0800ae91 	.word	0x0800ae91
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800ae91 	.word	0x0800ae91
 800ae88:	0800ae91 	.word	0x0800ae91
 800ae8c:	0800ae91 	.word	0x0800ae91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ae90:	bf00      	nop
  }

  return (USBD_OK);
 800ae92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	370c      	adds	r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr

0800aea0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800aeaa:	6879      	ldr	r1, [r7, #4]
 800aeac:	4805      	ldr	r0, [pc, #20]	; (800aec4 <CDC_Receive_FS+0x24>)
 800aeae:	f7fe fddd 	bl	8009a6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800aeb2:	4804      	ldr	r0, [pc, #16]	; (800aec4 <CDC_Receive_FS+0x24>)
 800aeb4:	f7fe fdee 	bl	8009a94 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800aeb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	20000838 	.word	0x20000838

0800aec8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b087      	sub	sp, #28
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	4613      	mov	r3, r2
 800aed4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aeda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	371c      	adds	r7, #28
 800aee2:	46bd      	mov	sp, r7
 800aee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee8:	4770      	bx	lr
	...

0800aeec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	4603      	mov	r3, r0
 800aef4:	6039      	str	r1, [r7, #0]
 800aef6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	2212      	movs	r2, #18
 800aefc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aefe:	4b03      	ldr	r3, [pc, #12]	; (800af0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800af00:	4618      	mov	r0, r3
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	20000150 	.word	0x20000150

0800af10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	6039      	str	r1, [r7, #0]
 800af1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2204      	movs	r2, #4
 800af20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800af22:	4b03      	ldr	r3, [pc, #12]	; (800af30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800af24:	4618      	mov	r0, r3
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	20000170 	.word	0x20000170

0800af34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	6039      	str	r1, [r7, #0]
 800af3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800af40:	79fb      	ldrb	r3, [r7, #7]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d105      	bne.n	800af52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	4907      	ldr	r1, [pc, #28]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
 800af4a:	4808      	ldr	r0, [pc, #32]	; (800af6c <USBD_FS_ProductStrDescriptor+0x38>)
 800af4c:	f7ff fe1d 	bl	800ab8a <USBD_GetString>
 800af50:	e004      	b.n	800af5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800af52:	683a      	ldr	r2, [r7, #0]
 800af54:	4904      	ldr	r1, [pc, #16]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
 800af56:	4805      	ldr	r0, [pc, #20]	; (800af6c <USBD_FS_ProductStrDescriptor+0x38>)
 800af58:	f7ff fe17 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20001b08 	.word	0x20001b08
 800af6c:	0800dda8 	.word	0x0800dda8

0800af70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	6039      	str	r1, [r7, #0]
 800af7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	4904      	ldr	r1, [pc, #16]	; (800af90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800af80:	4804      	ldr	r0, [pc, #16]	; (800af94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800af82:	f7ff fe02 	bl	800ab8a <USBD_GetString>
  return USBD_StrDesc;
 800af86:	4b02      	ldr	r3, [pc, #8]	; (800af90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	20001b08 	.word	0x20001b08
 800af94:	0800ddc0 	.word	0x0800ddc0

0800af98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	6039      	str	r1, [r7, #0]
 800afa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	221a      	movs	r2, #26
 800afa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800afaa:	f000 f855 	bl	800b058 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800afae:	4b02      	ldr	r3, [pc, #8]	; (800afb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	20000174 	.word	0x20000174

0800afbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	6039      	str	r1, [r7, #0]
 800afc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d105      	bne.n	800afda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	4907      	ldr	r1, [pc, #28]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afd2:	4808      	ldr	r0, [pc, #32]	; (800aff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afd4:	f7ff fdd9 	bl	800ab8a <USBD_GetString>
 800afd8:	e004      	b.n	800afe4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4904      	ldr	r1, [pc, #16]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800afde:	4805      	ldr	r0, [pc, #20]	; (800aff4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800afe0:	f7ff fdd3 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800afe4:	4b02      	ldr	r3, [pc, #8]	; (800aff0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20001b08 	.word	0x20001b08
 800aff4:	0800ddd4 	.word	0x0800ddd4

0800aff8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	4603      	mov	r3, r0
 800b000:	6039      	str	r1, [r7, #0]
 800b002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b004:	79fb      	ldrb	r3, [r7, #7]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d105      	bne.n	800b016 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	4907      	ldr	r1, [pc, #28]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b00e:	4808      	ldr	r0, [pc, #32]	; (800b030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b010:	f7ff fdbb 	bl	800ab8a <USBD_GetString>
 800b014:	e004      	b.n	800b020 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	4904      	ldr	r1, [pc, #16]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b01a:	4805      	ldr	r0, [pc, #20]	; (800b030 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b01c:	f7ff fdb5 	bl	800ab8a <USBD_GetString>
  }
  return USBD_StrDesc;
 800b020:	4b02      	ldr	r3, [pc, #8]	; (800b02c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b022:	4618      	mov	r0, r3
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20001b08 	.word	0x20001b08
 800b030:	0800dde0 	.word	0x0800dde0

0800b034 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	220c      	movs	r2, #12
 800b044:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20000164 	.word	0x20000164

0800b058 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b05e:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <Get_SerialNum+0x44>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b064:	4b0e      	ldr	r3, [pc, #56]	; (800b0a0 <Get_SerialNum+0x48>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b06a:	4b0e      	ldr	r3, [pc, #56]	; (800b0a4 <Get_SerialNum+0x4c>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b070:	68fa      	ldr	r2, [r7, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4413      	add	r3, r2
 800b076:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d009      	beq.n	800b092 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b07e:	2208      	movs	r2, #8
 800b080:	4909      	ldr	r1, [pc, #36]	; (800b0a8 <Get_SerialNum+0x50>)
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 f814 	bl	800b0b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b088:	2204      	movs	r2, #4
 800b08a:	4908      	ldr	r1, [pc, #32]	; (800b0ac <Get_SerialNum+0x54>)
 800b08c:	68b8      	ldr	r0, [r7, #8]
 800b08e:	f000 f80f 	bl	800b0b0 <IntToUnicode>
  }
}
 800b092:	bf00      	nop
 800b094:	3710      	adds	r7, #16
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	1fff7590 	.word	0x1fff7590
 800b0a0:	1fff7594 	.word	0x1fff7594
 800b0a4:	1fff7598 	.word	0x1fff7598
 800b0a8:	20000176 	.word	0x20000176
 800b0ac:	20000186 	.word	0x20000186

0800b0b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	75fb      	strb	r3, [r7, #23]
 800b0c6:	e027      	b.n	800b118 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	0f1b      	lsrs	r3, r3, #28
 800b0cc:	2b09      	cmp	r3, #9
 800b0ce:	d80b      	bhi.n	800b0e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	0f1b      	lsrs	r3, r3, #28
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	4619      	mov	r1, r3
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	440b      	add	r3, r1
 800b0e0:	3230      	adds	r2, #48	; 0x30
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]
 800b0e6:	e00a      	b.n	800b0fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	0f1b      	lsrs	r3, r3, #28
 800b0ec:	b2da      	uxtb	r2, r3
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	005b      	lsls	r3, r3, #1
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3237      	adds	r2, #55	; 0x37
 800b0fa:	b2d2      	uxtb	r2, r2
 800b0fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	3301      	adds	r3, #1
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	4413      	add	r3, r2
 800b10e:	2200      	movs	r2, #0
 800b110:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	3301      	adds	r3, #1
 800b116:	75fb      	strb	r3, [r7, #23]
 800b118:	7dfa      	ldrb	r2, [r7, #23]
 800b11a:	79fb      	ldrb	r3, [r7, #7]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d3d3      	bcc.n	800b0c8 <IntToUnicode+0x18>
  }
}
 800b120:	bf00      	nop
 800b122:	371c      	adds	r7, #28
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	; 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	2200      	movs	r2, #0
 800b13a:	601a      	str	r2, [r3, #0]
 800b13c:	605a      	str	r2, [r3, #4]
 800b13e:	609a      	str	r2, [r3, #8]
 800b140:	60da      	str	r2, [r3, #12]
 800b142:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b14c:	d14e      	bne.n	800b1ec <HAL_PCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b14e:	4b29      	ldr	r3, [pc, #164]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b152:	4a28      	ldr	r2, [pc, #160]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b154:	f043 0301 	orr.w	r3, r3, #1
 800b158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b15a:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	613b      	str	r3, [r7, #16]
 800b164:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800b166:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b16a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b16c:	2302      	movs	r3, #2
 800b16e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b170:	2300      	movs	r3, #0
 800b172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b174:	2303      	movs	r3, #3
 800b176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b178:	230a      	movs	r3, #10
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b17c:	f107 0314 	add.w	r3, r7, #20
 800b180:	4619      	mov	r1, r3
 800b182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b186:	f7f9 f9f1 	bl	800456c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b18a:	4b1a      	ldr	r3, [pc, #104]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b18e:	4a19      	ldr	r2, [pc, #100]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b194:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b196:	4b17      	ldr	r3, [pc, #92]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b19a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b19e:	60fb      	str	r3, [r7, #12]
 800b1a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b1a2:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d114      	bne.n	800b1d8 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b1ae:	4b11      	ldr	r3, [pc, #68]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1b2:	4a10      	ldr	r2, [pc, #64]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b8:	6593      	str	r3, [r2, #88]	; 0x58
 800b1ba:	4b0e      	ldr	r3, [pc, #56]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c2:	60bb      	str	r3, [r7, #8]
 800b1c4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b1c6:	f7fa fcdf 	bl	8005b88 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1ca:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ce:	4a09      	ldr	r2, [pc, #36]	; (800b1f4 <HAL_PCD_MspInit+0xc8>)
 800b1d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1d4:	6593      	str	r3, [r2, #88]	; 0x58
 800b1d6:	e001      	b.n	800b1dc <HAL_PCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b1d8:	f7fa fcd6 	bl	8005b88 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b1dc:	2200      	movs	r2, #0
 800b1de:	2100      	movs	r1, #0
 800b1e0:	2043      	movs	r0, #67	; 0x43
 800b1e2:	f7f8 febe 	bl	8003f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b1e6:	2043      	movs	r0, #67	; 0x43
 800b1e8:	f7f8 fed7 	bl	8003f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b1ec:	bf00      	nop
 800b1ee:	3728      	adds	r7, #40	; 0x28
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	40021000 	.word	0x40021000

0800b1f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b20c:	4619      	mov	r1, r3
 800b20e:	4610      	mov	r0, r2
 800b210:	f7fe fd0c 	bl	8009c2c <USBD_LL_SetupStage>
}
 800b214:	bf00      	nop
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	460b      	mov	r3, r1
 800b226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b22e:	78fa      	ldrb	r2, [r7, #3]
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	00db      	lsls	r3, r3, #3
 800b236:	1a9b      	subs	r3, r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	440b      	add	r3, r1
 800b23c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	78fb      	ldrb	r3, [r7, #3]
 800b244:	4619      	mov	r1, r3
 800b246:	f7fe fd44 	bl	8009cd2 <USBD_LL_DataOutStage>
}
 800b24a:	bf00      	nop
 800b24c:	3708      	adds	r7, #8
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}

0800b252 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b252:	b580      	push	{r7, lr}
 800b254:	b082      	sub	sp, #8
 800b256:	af00      	add	r7, sp, #0
 800b258:	6078      	str	r0, [r7, #4]
 800b25a:	460b      	mov	r3, r1
 800b25c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b264:	78fa      	ldrb	r2, [r7, #3]
 800b266:	6879      	ldr	r1, [r7, #4]
 800b268:	4613      	mov	r3, r2
 800b26a:	00db      	lsls	r3, r3, #3
 800b26c:	1a9b      	subs	r3, r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	3348      	adds	r3, #72	; 0x48
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	78fb      	ldrb	r3, [r7, #3]
 800b278:	4619      	mov	r1, r3
 800b27a:	f7fe fd8d 	bl	8009d98 <USBD_LL_DataInStage>
}
 800b27e:	bf00      	nop
 800b280:	3708      	adds	r7, #8
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}

0800b286 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b286:	b580      	push	{r7, lr}
 800b288:	b082      	sub	sp, #8
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe fe91 	bl	8009fbc <USBD_LL_SOF>
}
 800b29a:	bf00      	nop
 800b29c:	3708      	adds	r7, #8
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	2b02      	cmp	r3, #2
 800b2b4:	d001      	beq.n	800b2ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b2b6:	f7f7 f8a9 	bl	800240c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2c0:	7bfa      	ldrb	r2, [r7, #15]
 800b2c2:	4611      	mov	r1, r2
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fe3e 	bl	8009f46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	f7fe fdf7 	bl	8009ec4 <USBD_LL_Reset>
}
 800b2d6:	bf00      	nop
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
	...

0800b2e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	6812      	ldr	r2, [r2, #0]
 800b2f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b2fa:	f043 0301 	orr.w	r3, r3, #1
 800b2fe:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fe2d 	bl	8009f66 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d005      	beq.n	800b320 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <HAL_PCD_SuspendCallback+0x48>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	4a03      	ldr	r2, [pc, #12]	; (800b328 <HAL_PCD_SuspendCallback+0x48>)
 800b31a:	f043 0306 	orr.w	r3, r3, #6
 800b31e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	e000ed00 	.word	0xe000ed00

0800b32c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b082      	sub	sp, #8
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b346:	f023 0301 	bic.w	r3, r3, #1
 800b34a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d007      	beq.n	800b364 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b354:	4b08      	ldr	r3, [pc, #32]	; (800b378 <HAL_PCD_ResumeCallback+0x4c>)
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	4a07      	ldr	r2, [pc, #28]	; (800b378 <HAL_PCD_ResumeCallback+0x4c>)
 800b35a:	f023 0306 	bic.w	r3, r3, #6
 800b35e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b360:	f000 fadc 	bl	800b91c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe fe10 	bl	8009f90 <USBD_LL_Resume>
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	e000ed00 	.word	0xe000ed00

0800b37c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	460b      	mov	r3, r1
 800b386:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b38e:	78fa      	ldrb	r2, [r7, #3]
 800b390:	4611      	mov	r1, r2
 800b392:	4618      	mov	r0, r3
 800b394:	f7fe fe39 	bl	800a00a <USBD_LL_IsoOUTIncomplete>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b082      	sub	sp, #8
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b3b2:	78fa      	ldrb	r2, [r7, #3]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fe fe1a 	bl	8009ff0 <USBD_LL_IsoINIncomplete>
}
 800b3bc:	bf00      	nop
 800b3be:	3708      	adds	r7, #8
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fe26 	bl	800a024 <USBD_LL_DevConnected>
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fe fe23 	bl	800a03a <USBD_LL_DevDisconnected>
}
 800b3f4:	bf00      	nop
 800b3f6:	3708      	adds	r7, #8
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	781b      	ldrb	r3, [r3, #0]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d139      	bne.n	800b480 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b40c:	4a1f      	ldr	r2, [pc, #124]	; (800b48c <USBD_LL_Init+0x90>)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a1d      	ldr	r2, [pc, #116]	; (800b48c <USBD_LL_Init+0x90>)
 800b418:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b41c:	4b1b      	ldr	r3, [pc, #108]	; (800b48c <USBD_LL_Init+0x90>)
 800b41e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b422:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <USBD_LL_Init+0x90>)
 800b426:	2206      	movs	r2, #6
 800b428:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b42a:	4b18      	ldr	r3, [pc, #96]	; (800b48c <USBD_LL_Init+0x90>)
 800b42c:	2202      	movs	r2, #2
 800b42e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b430:	4b16      	ldr	r3, [pc, #88]	; (800b48c <USBD_LL_Init+0x90>)
 800b432:	2200      	movs	r2, #0
 800b434:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b436:	4b15      	ldr	r3, [pc, #84]	; (800b48c <USBD_LL_Init+0x90>)
 800b438:	2200      	movs	r2, #0
 800b43a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b43c:	4b13      	ldr	r3, [pc, #76]	; (800b48c <USBD_LL_Init+0x90>)
 800b43e:	2200      	movs	r2, #0
 800b440:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b442:	4b12      	ldr	r3, [pc, #72]	; (800b48c <USBD_LL_Init+0x90>)
 800b444:	2200      	movs	r2, #0
 800b446:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b448:	4b10      	ldr	r3, [pc, #64]	; (800b48c <USBD_LL_Init+0x90>)
 800b44a:	2200      	movs	r2, #0
 800b44c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <USBD_LL_Init+0x90>)
 800b450:	2200      	movs	r2, #0
 800b452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b454:	480d      	ldr	r0, [pc, #52]	; (800b48c <USBD_LL_Init+0x90>)
 800b456:	f7f9 fa33 	bl	80048c0 <HAL_PCD_Init>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800b460:	f7f6 ffd4 	bl	800240c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b464:	2180      	movs	r1, #128	; 0x80
 800b466:	4809      	ldr	r0, [pc, #36]	; (800b48c <USBD_LL_Init+0x90>)
 800b468:	f7fa fa95 	bl	8005996 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b46c:	2240      	movs	r2, #64	; 0x40
 800b46e:	2100      	movs	r1, #0
 800b470:	4806      	ldr	r0, [pc, #24]	; (800b48c <USBD_LL_Init+0x90>)
 800b472:	f7fa fa49 	bl	8005908 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b476:	2280      	movs	r2, #128	; 0x80
 800b478:	2101      	movs	r1, #1
 800b47a:	4804      	ldr	r0, [pc, #16]	; (800b48c <USBD_LL_Init+0x90>)
 800b47c:	f7fa fa44 	bl	8005908 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20001d08 	.word	0x20001d08

0800b490 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b498:	2300      	movs	r3, #0
 800b49a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b49c:	2300      	movs	r3, #0
 800b49e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f7f9 fb2e 	bl	8004b08 <HAL_PCD_Start>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d816      	bhi.n	800b4e4 <USBD_LL_Start+0x54>
 800b4b6:	a201      	add	r2, pc, #4	; (adr r2, 800b4bc <USBD_LL_Start+0x2c>)
 800b4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4bc:	0800b4cd 	.word	0x0800b4cd
 800b4c0:	0800b4d3 	.word	0x0800b4d3
 800b4c4:	0800b4d9 	.word	0x0800b4d9
 800b4c8:	0800b4df 	.word	0x0800b4df
    case HAL_OK :
      usb_status = USBD_OK;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d0:	e00b      	b.n	800b4ea <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4d6:	e008      	b.n	800b4ea <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
    break;
 800b4dc:	e005      	b.n	800b4ea <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e2:	e002      	b.n	800b4ea <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4e8:	bf00      	nop
  }
  return usb_status;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b084      	sub	sp, #16
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	4608      	mov	r0, r1
 800b4fe:	4611      	mov	r1, r2
 800b500:	461a      	mov	r2, r3
 800b502:	4603      	mov	r3, r0
 800b504:	70fb      	strb	r3, [r7, #3]
 800b506:	460b      	mov	r3, r1
 800b508:	70bb      	strb	r3, [r7, #2]
 800b50a:	4613      	mov	r3, r2
 800b50c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b50e:	2300      	movs	r3, #0
 800b510:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b51c:	78bb      	ldrb	r3, [r7, #2]
 800b51e:	883a      	ldrh	r2, [r7, #0]
 800b520:	78f9      	ldrb	r1, [r7, #3]
 800b522:	f7f9 fee9 	bl	80052f8 <HAL_PCD_EP_Open>
 800b526:	4603      	mov	r3, r0
 800b528:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b52a:	7bbb      	ldrb	r3, [r7, #14]
 800b52c:	2b03      	cmp	r3, #3
 800b52e:	d817      	bhi.n	800b560 <USBD_LL_OpenEP+0x6c>
 800b530:	a201      	add	r2, pc, #4	; (adr r2, 800b538 <USBD_LL_OpenEP+0x44>)
 800b532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b536:	bf00      	nop
 800b538:	0800b549 	.word	0x0800b549
 800b53c:	0800b54f 	.word	0x0800b54f
 800b540:	0800b555 	.word	0x0800b555
 800b544:	0800b55b 	.word	0x0800b55b
    case HAL_OK :
      usb_status = USBD_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	73fb      	strb	r3, [r7, #15]
    break;
 800b54c:	e00b      	b.n	800b566 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b54e:	2303      	movs	r3, #3
 800b550:	73fb      	strb	r3, [r7, #15]
    break;
 800b552:	e008      	b.n	800b566 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b554:	2301      	movs	r3, #1
 800b556:	73fb      	strb	r3, [r7, #15]
    break;
 800b558:	e005      	b.n	800b566 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b55a:	2303      	movs	r3, #3
 800b55c:	73fb      	strb	r3, [r7, #15]
    break;
 800b55e:	e002      	b.n	800b566 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b560:	2303      	movs	r3, #3
 800b562:	73fb      	strb	r3, [r7, #15]
    break;
 800b564:	bf00      	nop
  }
  return usb_status;
 800b566:	7bfb      	ldrb	r3, [r7, #15]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	460b      	mov	r3, r1
 800b57a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b57c:	2300      	movs	r3, #0
 800b57e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b580:	2300      	movs	r3, #0
 800b582:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b58a:	78fa      	ldrb	r2, [r7, #3]
 800b58c:	4611      	mov	r1, r2
 800b58e:	4618      	mov	r0, r3
 800b590:	f7f9 ff1a 	bl	80053c8 <HAL_PCD_EP_Close>
 800b594:	4603      	mov	r3, r0
 800b596:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b598:	7bbb      	ldrb	r3, [r7, #14]
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d816      	bhi.n	800b5cc <USBD_LL_CloseEP+0x5c>
 800b59e:	a201      	add	r2, pc, #4	; (adr r2, 800b5a4 <USBD_LL_CloseEP+0x34>)
 800b5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5a4:	0800b5b5 	.word	0x0800b5b5
 800b5a8:	0800b5bb 	.word	0x0800b5bb
 800b5ac:	0800b5c1 	.word	0x0800b5c1
 800b5b0:	0800b5c7 	.word	0x0800b5c7
    case HAL_OK :
      usb_status = USBD_OK;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b8:	e00b      	b.n	800b5d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b5be:	e008      	b.n	800b5d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c4:	e005      	b.n	800b5d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ca:	e002      	b.n	800b5d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b5cc:	2303      	movs	r3, #3
 800b5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b5d0:	bf00      	nop
  }
  return usb_status;
 800b5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b5f6:	78fa      	ldrb	r2, [r7, #3]
 800b5f8:	4611      	mov	r1, r2
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f9 ffc1 	bl	8005582 <HAL_PCD_EP_SetStall>
 800b600:	4603      	mov	r3, r0
 800b602:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b604:	7bbb      	ldrb	r3, [r7, #14]
 800b606:	2b03      	cmp	r3, #3
 800b608:	d816      	bhi.n	800b638 <USBD_LL_StallEP+0x5c>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <USBD_LL_StallEP+0x34>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b621 	.word	0x0800b621
 800b614:	0800b627 	.word	0x0800b627
 800b618:	0800b62d 	.word	0x0800b62d
 800b61c:	0800b633 	.word	0x0800b633
    case HAL_OK :
      usb_status = USBD_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
    break;
 800b624:	e00b      	b.n	800b63e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b626:	2303      	movs	r3, #3
 800b628:	73fb      	strb	r3, [r7, #15]
    break;
 800b62a:	e008      	b.n	800b63e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b62c:	2301      	movs	r3, #1
 800b62e:	73fb      	strb	r3, [r7, #15]
    break;
 800b630:	e005      	b.n	800b63e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b632:	2303      	movs	r3, #3
 800b634:	73fb      	strb	r3, [r7, #15]
    break;
 800b636:	e002      	b.n	800b63e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b638:	2303      	movs	r3, #3
 800b63a:	73fb      	strb	r3, [r7, #15]
    break;
 800b63c:	bf00      	nop
  }
  return usb_status;
 800b63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b640:	4618      	mov	r0, r3
 800b642:	3710      	adds	r7, #16
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	4611      	mov	r1, r2
 800b666:	4618      	mov	r0, r3
 800b668:	f7f9 ffed 	bl	8005646 <HAL_PCD_EP_ClrStall>
 800b66c:	4603      	mov	r3, r0
 800b66e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b670:	7bbb      	ldrb	r3, [r7, #14]
 800b672:	2b03      	cmp	r3, #3
 800b674:	d816      	bhi.n	800b6a4 <USBD_LL_ClearStallEP+0x5c>
 800b676:	a201      	add	r2, pc, #4	; (adr r2, 800b67c <USBD_LL_ClearStallEP+0x34>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b68d 	.word	0x0800b68d
 800b680:	0800b693 	.word	0x0800b693
 800b684:	0800b699 	.word	0x0800b699
 800b688:	0800b69f 	.word	0x0800b69f
    case HAL_OK :
      usb_status = USBD_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	73fb      	strb	r3, [r7, #15]
    break;
 800b690:	e00b      	b.n	800b6aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b692:	2303      	movs	r3, #3
 800b694:	73fb      	strb	r3, [r7, #15]
    break;
 800b696:	e008      	b.n	800b6aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b698:	2301      	movs	r3, #1
 800b69a:	73fb      	strb	r3, [r7, #15]
    break;
 800b69c:	e005      	b.n	800b6aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b69e:	2303      	movs	r3, #3
 800b6a0:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a2:	e002      	b.n	800b6aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a8:	bf00      	nop
  }
  return usb_status;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b6c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b6c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	da0b      	bge.n	800b6e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b6d0:	78fb      	ldrb	r3, [r7, #3]
 800b6d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6d6:	68f9      	ldr	r1, [r7, #12]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	1a9b      	subs	r3, r3, r2
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	440b      	add	r3, r1
 800b6e2:	333e      	adds	r3, #62	; 0x3e
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	e00b      	b.n	800b700 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b6e8:	78fb      	ldrb	r3, [r7, #3]
 800b6ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ee:	68f9      	ldr	r1, [r7, #12]
 800b6f0:	4613      	mov	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	1a9b      	subs	r3, r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b6fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b700:	4618      	mov	r0, r3
 800b702:	3714      	adds	r7, #20
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b718:	2300      	movs	r3, #0
 800b71a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f9 fdbf 	bl	80052ae <HAL_PCD_SetAddress>
 800b730:	4603      	mov	r3, r0
 800b732:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b734:	7bbb      	ldrb	r3, [r7, #14]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d816      	bhi.n	800b768 <USBD_LL_SetUSBAddress+0x5c>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <USBD_LL_SetUSBAddress+0x34>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b751 	.word	0x0800b751
 800b744:	0800b757 	.word	0x0800b757
 800b748:	0800b75d 	.word	0x0800b75d
 800b74c:	0800b763 	.word	0x0800b763
    case HAL_OK :
      usb_status = USBD_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
    break;
 800b754:	e00b      	b.n	800b76e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b756:	2303      	movs	r3, #3
 800b758:	73fb      	strb	r3, [r7, #15]
    break;
 800b75a:	e008      	b.n	800b76e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b75c:	2301      	movs	r3, #1
 800b75e:	73fb      	strb	r3, [r7, #15]
    break;
 800b760:	e005      	b.n	800b76e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b762:	2303      	movs	r3, #3
 800b764:	73fb      	strb	r3, [r7, #15]
    break;
 800b766:	e002      	b.n	800b76e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b768:	2303      	movs	r3, #3
 800b76a:	73fb      	strb	r3, [r7, #15]
    break;
 800b76c:	bf00      	nop
  }
  return usb_status;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b086      	sub	sp, #24
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	607a      	str	r2, [r7, #4]
 800b782:	603b      	str	r3, [r7, #0]
 800b784:	460b      	mov	r3, r1
 800b786:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b796:	7af9      	ldrb	r1, [r7, #11]
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	f7f9 feb4 	bl	8005508 <HAL_PCD_EP_Transmit>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b7a4:	7dbb      	ldrb	r3, [r7, #22]
 800b7a6:	2b03      	cmp	r3, #3
 800b7a8:	d816      	bhi.n	800b7d8 <USBD_LL_Transmit+0x60>
 800b7aa:	a201      	add	r2, pc, #4	; (adr r2, 800b7b0 <USBD_LL_Transmit+0x38>)
 800b7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b0:	0800b7c1 	.word	0x0800b7c1
 800b7b4:	0800b7c7 	.word	0x0800b7c7
 800b7b8:	0800b7cd 	.word	0x0800b7cd
 800b7bc:	0800b7d3 	.word	0x0800b7d3
    case HAL_OK :
      usb_status = USBD_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	75fb      	strb	r3, [r7, #23]
    break;
 800b7c4:	e00b      	b.n	800b7de <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	75fb      	strb	r3, [r7, #23]
    break;
 800b7ca:	e008      	b.n	800b7de <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	75fb      	strb	r3, [r7, #23]
    break;
 800b7d0:	e005      	b.n	800b7de <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	75fb      	strb	r3, [r7, #23]
    break;
 800b7d6:	e002      	b.n	800b7de <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b7d8:	2303      	movs	r3, #3
 800b7da:	75fb      	strb	r3, [r7, #23]
    break;
 800b7dc:	bf00      	nop
  }
  return usb_status;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b086      	sub	sp, #24
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	607a      	str	r2, [r7, #4]
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b806:	7af9      	ldrb	r1, [r7, #11]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	f7f9 fe26 	bl	800545c <HAL_PCD_EP_Receive>
 800b810:	4603      	mov	r3, r0
 800b812:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b814:	7dbb      	ldrb	r3, [r7, #22]
 800b816:	2b03      	cmp	r3, #3
 800b818:	d816      	bhi.n	800b848 <USBD_LL_PrepareReceive+0x60>
 800b81a:	a201      	add	r2, pc, #4	; (adr r2, 800b820 <USBD_LL_PrepareReceive+0x38>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b837 	.word	0x0800b837
 800b828:	0800b83d 	.word	0x0800b83d
 800b82c:	0800b843 	.word	0x0800b843
    case HAL_OK :
      usb_status = USBD_OK;
 800b830:	2300      	movs	r3, #0
 800b832:	75fb      	strb	r3, [r7, #23]
    break;
 800b834:	e00b      	b.n	800b84e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b836:	2303      	movs	r3, #3
 800b838:	75fb      	strb	r3, [r7, #23]
    break;
 800b83a:	e008      	b.n	800b84e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b83c:	2301      	movs	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]
    break;
 800b840:	e005      	b.n	800b84e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b842:	2303      	movs	r3, #3
 800b844:	75fb      	strb	r3, [r7, #23]
    break;
 800b846:	e002      	b.n	800b84e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	75fb      	strb	r3, [r7, #23]
    break;
 800b84c:	bf00      	nop
  }
  return usb_status;
 800b84e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b850:	4618      	mov	r0, r3
 800b852:	3718      	adds	r7, #24
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	460b      	mov	r3, r1
 800b862:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b86a:	78fa      	ldrb	r2, [r7, #3]
 800b86c:	4611      	mov	r1, r2
 800b86e:	4618      	mov	r0, r3
 800b870:	f7f9 fe32 	bl	80054d8 <HAL_PCD_EP_GetRxCount>
 800b874:	4603      	mov	r3, r0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	460b      	mov	r3, r1
 800b88a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <HAL_PCDEx_LPM_Callback+0x18>
 800b892:	2b01      	cmp	r3, #1
 800b894:	d01f      	beq.n	800b8d6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b896:	e03b      	b.n	800b910 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a1b      	ldr	r3, [r3, #32]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d007      	beq.n	800b8b0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b8a0:	f000 f83c 	bl	800b91c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8a4:	4b1c      	ldr	r3, [pc, #112]	; (800b918 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	4a1b      	ldr	r2, [pc, #108]	; (800b918 <HAL_PCDEx_LPM_Callback+0x98>)
 800b8aa:	f023 0306 	bic.w	r3, r3, #6
 800b8ae:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	6812      	ldr	r2, [r2, #0]
 800b8be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8c2:	f023 0301 	bic.w	r3, r3, #1
 800b8c6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe fb5e 	bl	8009f90 <USBD_LL_Resume>
    break;
 800b8d4:	e01c      	b.n	800b910 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	6812      	ldr	r2, [r2, #0]
 800b8e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8e8:	f043 0301 	orr.w	r3, r3, #1
 800b8ec:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7fe fb36 	bl	8009f66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d005      	beq.n	800b90e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <HAL_PCDEx_LPM_Callback+0x98>)
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	4a04      	ldr	r2, [pc, #16]	; (800b918 <HAL_PCDEx_LPM_Callback+0x98>)
 800b908:	f043 0306 	orr.w	r3, r3, #6
 800b90c:	6113      	str	r3, [r2, #16]
    break;
 800b90e:	bf00      	nop
}
 800b910:	bf00      	nop
 800b912:	3708      	adds	r7, #8
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	e000ed00 	.word	0xe000ed00

0800b91c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b920:	f7f6 f950 	bl	8001bc4 <SystemClock_Config>
}
 800b924:	bf00      	nop
 800b926:	bd80      	pop	{r7, pc}

0800b928 <arm_rfft_fast_init_f32>:
 800b928:	084b      	lsrs	r3, r1, #1
 800b92a:	2b80      	cmp	r3, #128	; 0x80
 800b92c:	b410      	push	{r4}
 800b92e:	8201      	strh	r1, [r0, #16]
 800b930:	8003      	strh	r3, [r0, #0]
 800b932:	d047      	beq.n	800b9c4 <arm_rfft_fast_init_f32+0x9c>
 800b934:	d917      	bls.n	800b966 <arm_rfft_fast_init_f32+0x3e>
 800b936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93a:	d03d      	beq.n	800b9b8 <arm_rfft_fast_init_f32+0x90>
 800b93c:	d929      	bls.n	800b992 <arm_rfft_fast_init_f32+0x6a>
 800b93e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b942:	d020      	beq.n	800b986 <arm_rfft_fast_init_f32+0x5e>
 800b944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b948:	d113      	bne.n	800b972 <arm_rfft_fast_init_f32+0x4a>
 800b94a:	4921      	ldr	r1, [pc, #132]	; (800b9d0 <arm_rfft_fast_init_f32+0xa8>)
 800b94c:	4a21      	ldr	r2, [pc, #132]	; (800b9d4 <arm_rfft_fast_init_f32+0xac>)
 800b94e:	4b22      	ldr	r3, [pc, #136]	; (800b9d8 <arm_rfft_fast_init_f32+0xb0>)
 800b950:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800b954:	8184      	strh	r4, [r0, #12]
 800b956:	6081      	str	r1, [r0, #8]
 800b958:	6042      	str	r2, [r0, #4]
 800b95a:	6143      	str	r3, [r0, #20]
 800b95c:	2000      	movs	r0, #0
 800b95e:	b240      	sxtb	r0, r0
 800b960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	2b20      	cmp	r3, #32
 800b968:	d01c      	beq.n	800b9a4 <arm_rfft_fast_init_f32+0x7c>
 800b96a:	2b40      	cmp	r3, #64	; 0x40
 800b96c:	d006      	beq.n	800b97c <arm_rfft_fast_init_f32+0x54>
 800b96e:	2b10      	cmp	r3, #16
 800b970:	d01d      	beq.n	800b9ae <arm_rfft_fast_init_f32+0x86>
 800b972:	20ff      	movs	r0, #255	; 0xff
 800b974:	b240      	sxtb	r0, r0
 800b976:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	2438      	movs	r4, #56	; 0x38
 800b97e:	4917      	ldr	r1, [pc, #92]	; (800b9dc <arm_rfft_fast_init_f32+0xb4>)
 800b980:	4a17      	ldr	r2, [pc, #92]	; (800b9e0 <arm_rfft_fast_init_f32+0xb8>)
 800b982:	4b18      	ldr	r3, [pc, #96]	; (800b9e4 <arm_rfft_fast_init_f32+0xbc>)
 800b984:	e7e6      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b986:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800b98a:	4917      	ldr	r1, [pc, #92]	; (800b9e8 <arm_rfft_fast_init_f32+0xc0>)
 800b98c:	4a17      	ldr	r2, [pc, #92]	; (800b9ec <arm_rfft_fast_init_f32+0xc4>)
 800b98e:	4b18      	ldr	r3, [pc, #96]	; (800b9f0 <arm_rfft_fast_init_f32+0xc8>)
 800b990:	e7e0      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b996:	d1ec      	bne.n	800b972 <arm_rfft_fast_init_f32+0x4a>
 800b998:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800b99c:	4915      	ldr	r1, [pc, #84]	; (800b9f4 <arm_rfft_fast_init_f32+0xcc>)
 800b99e:	4a16      	ldr	r2, [pc, #88]	; (800b9f8 <arm_rfft_fast_init_f32+0xd0>)
 800b9a0:	4b16      	ldr	r3, [pc, #88]	; (800b9fc <arm_rfft_fast_init_f32+0xd4>)
 800b9a2:	e7d7      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b9a4:	2430      	movs	r4, #48	; 0x30
 800b9a6:	4916      	ldr	r1, [pc, #88]	; (800ba00 <arm_rfft_fast_init_f32+0xd8>)
 800b9a8:	4a16      	ldr	r2, [pc, #88]	; (800ba04 <arm_rfft_fast_init_f32+0xdc>)
 800b9aa:	4b17      	ldr	r3, [pc, #92]	; (800ba08 <arm_rfft_fast_init_f32+0xe0>)
 800b9ac:	e7d2      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b9ae:	2414      	movs	r4, #20
 800b9b0:	4916      	ldr	r1, [pc, #88]	; (800ba0c <arm_rfft_fast_init_f32+0xe4>)
 800b9b2:	4a17      	ldr	r2, [pc, #92]	; (800ba10 <arm_rfft_fast_init_f32+0xe8>)
 800b9b4:	4b17      	ldr	r3, [pc, #92]	; (800ba14 <arm_rfft_fast_init_f32+0xec>)
 800b9b6:	e7cd      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b9b8:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800b9bc:	4916      	ldr	r1, [pc, #88]	; (800ba18 <arm_rfft_fast_init_f32+0xf0>)
 800b9be:	4a17      	ldr	r2, [pc, #92]	; (800ba1c <arm_rfft_fast_init_f32+0xf4>)
 800b9c0:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <arm_rfft_fast_init_f32+0xf8>)
 800b9c2:	e7c7      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b9c4:	24d0      	movs	r4, #208	; 0xd0
 800b9c6:	4917      	ldr	r1, [pc, #92]	; (800ba24 <arm_rfft_fast_init_f32+0xfc>)
 800b9c8:	4a17      	ldr	r2, [pc, #92]	; (800ba28 <arm_rfft_fast_init_f32+0x100>)
 800b9ca:	4b18      	ldr	r3, [pc, #96]	; (800ba2c <arm_rfft_fast_init_f32+0x104>)
 800b9cc:	e7c2      	b.n	800b954 <arm_rfft_fast_init_f32+0x2c>
 800b9ce:	bf00      	nop
 800b9d0:	0801cc58 	.word	0x0801cc58
 800b9d4:	0800de50 	.word	0x0800de50
 800b9d8:	08013fc0 	.word	0x08013fc0
 800b9dc:	08011f50 	.word	0x08011f50
 800b9e0:	0801ea18 	.word	0x0801ea18
 800b9e4:	08020f08 	.word	0x08020f08
 800b9e8:	0801a940 	.word	0x0801a940
 800b9ec:	08018840 	.word	0x08018840
 800b9f0:	08011fc0 	.word	0x08011fc0
 800b9f4:	08020b98 	.word	0x08020b98
 800b9f8:	08017fc0 	.word	0x08017fc0
 800b9fc:	0801ec18 	.word	0x0801ec18
 800ba00:	0801b7f8 	.word	0x0801b7f8
 800ba04:	0801a840 	.word	0x0801a840
 800ba08:	08011e50 	.word	0x08011e50
 800ba0c:	0801b750 	.word	0x0801b750
 800ba10:	080187c0 	.word	0x080187c0
 800ba14:	0801b778 	.word	0x0801b778
 800ba18:	0801f418 	.word	0x0801f418
 800ba1c:	0801bc58 	.word	0x0801bc58
 800ba20:	0801f798 	.word	0x0801f798
 800ba24:	08021108 	.word	0x08021108
 800ba28:	0801b858 	.word	0x0801b858
 800ba2c:	08020798 	.word	0x08020798

0800ba30 <arm_rfft_fast_f32>:
 800ba30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba34:	8a06      	ldrh	r6, [r0, #16]
 800ba36:	0876      	lsrs	r6, r6, #1
 800ba38:	4607      	mov	r7, r0
 800ba3a:	4615      	mov	r5, r2
 800ba3c:	8006      	strh	r6, [r0, #0]
 800ba3e:	460c      	mov	r4, r1
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d15c      	bne.n	800bafe <arm_rfft_fast_f32+0xce>
 800ba44:	461a      	mov	r2, r3
 800ba46:	2301      	movs	r3, #1
 800ba48:	f000 fbe6 	bl	800c218 <arm_cfft_f32>
 800ba4c:	edd4 7a00 	vldr	s15, [r4]
 800ba50:	ed94 7a01 	vldr	s14, [r4, #4]
 800ba54:	883e      	ldrh	r6, [r7, #0]
 800ba56:	6978      	ldr	r0, [r7, #20]
 800ba58:	ee37 7a07 	vadd.f32	s14, s14, s14
 800ba5c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ba60:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800ba64:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ba68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba6c:	3e01      	subs	r6, #1
 800ba6e:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800ba72:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800ba76:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800ba7a:	ed85 7a00 	vstr	s14, [r5]
 800ba7e:	edc5 7a01 	vstr	s15, [r5, #4]
 800ba82:	3010      	adds	r0, #16
 800ba84:	f105 0210 	add.w	r2, r5, #16
 800ba88:	3b08      	subs	r3, #8
 800ba8a:	f104 0110 	add.w	r1, r4, #16
 800ba8e:	ed51 4a02 	vldr	s9, [r1, #-8]
 800ba92:	ed93 5a02 	vldr	s10, [r3, #8]
 800ba96:	ed11 7a01 	vldr	s14, [r1, #-4]
 800ba9a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800ba9e:	edd3 5a03 	vldr	s11, [r3, #12]
 800baa2:	ed50 6a01 	vldr	s13, [r0, #-4]
 800baa6:	ee75 7a64 	vsub.f32	s15, s10, s9
 800baaa:	ee35 4a87 	vadd.f32	s8, s11, s14
 800baae:	ee35 5a24 	vadd.f32	s10, s10, s9
 800bab2:	ee77 5a65 	vsub.f32	s11, s14, s11
 800bab6:	ee66 4a27 	vmul.f32	s9, s12, s15
 800baba:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800babe:	ee34 5a85 	vadd.f32	s10, s9, s10
 800bac2:	ee26 6a04 	vmul.f32	s12, s12, s8
 800bac6:	ee66 6a84 	vmul.f32	s13, s13, s8
 800baca:	ee77 7a25 	vadd.f32	s15, s14, s11
 800bace:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bad2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bad6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800bada:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bade:	3e01      	subs	r6, #1
 800bae0:	ed42 6a02 	vstr	s13, [r2, #-8]
 800bae4:	ed42 7a01 	vstr	s15, [r2, #-4]
 800bae8:	f1a3 0308 	sub.w	r3, r3, #8
 800baec:	f101 0108 	add.w	r1, r1, #8
 800baf0:	f100 0008 	add.w	r0, r0, #8
 800baf4:	f102 0208 	add.w	r2, r2, #8
 800baf8:	d1c9      	bne.n	800ba8e <arm_rfft_fast_f32+0x5e>
 800bafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bafe:	edd1 7a00 	vldr	s15, [r1]
 800bb02:	edd1 6a01 	vldr	s13, [r1, #4]
 800bb06:	6941      	ldr	r1, [r0, #20]
 800bb08:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb0c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb10:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800bb14:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bb18:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bb1c:	3e01      	subs	r6, #1
 800bb1e:	ed82 7a00 	vstr	s14, [r2]
 800bb22:	edc2 7a01 	vstr	s15, [r2, #4]
 800bb26:	00f0      	lsls	r0, r6, #3
 800bb28:	b3ee      	cbz	r6, 800bba6 <arm_rfft_fast_f32+0x176>
 800bb2a:	3808      	subs	r0, #8
 800bb2c:	f101 0e10 	add.w	lr, r1, #16
 800bb30:	4420      	add	r0, r4
 800bb32:	f104 0110 	add.w	r1, r4, #16
 800bb36:	f102 0c10 	add.w	ip, r2, #16
 800bb3a:	ed90 7a02 	vldr	s14, [r0, #8]
 800bb3e:	ed51 6a02 	vldr	s13, [r1, #-8]
 800bb42:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800bb46:	ed90 4a03 	vldr	s8, [r0, #12]
 800bb4a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800bb4e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800bb52:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800bb56:	ee74 4a05 	vadd.f32	s9, s8, s10
 800bb5a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800bb5e:	ee77 6a26 	vadd.f32	s13, s14, s13
 800bb62:	ee35 5a44 	vsub.f32	s10, s10, s8
 800bb66:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800bb6a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bb6e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800bb72:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bb76:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800bb7a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bb7e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800bb82:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800bb86:	ee27 7a23 	vmul.f32	s14, s14, s7
 800bb8a:	3e01      	subs	r6, #1
 800bb8c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800bb90:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800bb94:	f1a0 0008 	sub.w	r0, r0, #8
 800bb98:	f101 0108 	add.w	r1, r1, #8
 800bb9c:	f10e 0e08 	add.w	lr, lr, #8
 800bba0:	f10c 0c08 	add.w	ip, ip, #8
 800bba4:	d1c9      	bne.n	800bb3a <arm_rfft_fast_f32+0x10a>
 800bba6:	4638      	mov	r0, r7
 800bba8:	4629      	mov	r1, r5
 800bbaa:	461a      	mov	r2, r3
 800bbac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	f000 bb31 	b.w	800c218 <arm_cfft_f32>
 800bbb6:	bf00      	nop

0800bbb8 <arm_cfft_radix8by2_f32>:
 800bbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbbc:	ed2d 8b08 	vpush	{d8-d11}
 800bbc0:	f8b0 e000 	ldrh.w	lr, [r0]
 800bbc4:	6842      	ldr	r2, [r0, #4]
 800bbc6:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800bbca:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800bbce:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800bbd8:	f000 80af 	beq.w	800bd3a <arm_cfft_radix8by2_f32+0x182>
 800bbdc:	3310      	adds	r3, #16
 800bbde:	18ce      	adds	r6, r1, r3
 800bbe0:	3210      	adds	r2, #16
 800bbe2:	4443      	add	r3, r8
 800bbe4:	f101 0510 	add.w	r5, r1, #16
 800bbe8:	f108 0410 	add.w	r4, r8, #16
 800bbec:	ed54 1a04 	vldr	s3, [r4, #-16]
 800bbf0:	ed13 4a04 	vldr	s8, [r3, #-16]
 800bbf4:	ed53 3a03 	vldr	s7, [r3, #-12]
 800bbf8:	ed53 5a02 	vldr	s11, [r3, #-8]
 800bbfc:	ed13 5a01 	vldr	s10, [r3, #-4]
 800bc00:	ed54 6a03 	vldr	s13, [r4, #-12]
 800bc04:	ed14 0a02 	vldr	s0, [r4, #-8]
 800bc08:	ed16 2a04 	vldr	s4, [r6, #-16]
 800bc0c:	ed56 2a03 	vldr	s5, [r6, #-12]
 800bc10:	ed15 6a03 	vldr	s12, [r5, #-12]
 800bc14:	ed15 7a01 	vldr	s14, [r5, #-4]
 800bc18:	ed15 3a04 	vldr	s6, [r5, #-16]
 800bc1c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800bc20:	ed56 0a02 	vldr	s1, [r6, #-8]
 800bc24:	ed16 1a01 	vldr	s2, [r6, #-4]
 800bc28:	ed55 4a02 	vldr	s9, [r5, #-8]
 800bc2c:	ee73 ba21 	vadd.f32	s23, s6, s3
 800bc30:	ee36 ba26 	vadd.f32	s22, s12, s13
 800bc34:	ee37 aa27 	vadd.f32	s20, s14, s15
 800bc38:	ee72 9a04 	vadd.f32	s19, s4, s8
 800bc3c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800bc40:	ee31 8a05 	vadd.f32	s16, s2, s10
 800bc44:	ee74 aa80 	vadd.f32	s21, s9, s0
 800bc48:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800bc4c:	ed45 ba04 	vstr	s23, [r5, #-16]
 800bc50:	ed05 ba03 	vstr	s22, [r5, #-12]
 800bc54:	ed45 aa02 	vstr	s21, [r5, #-8]
 800bc58:	ed05 aa01 	vstr	s20, [r5, #-4]
 800bc5c:	ed06 8a01 	vstr	s16, [r6, #-4]
 800bc60:	ed46 9a04 	vstr	s19, [r6, #-16]
 800bc64:	ed06 9a03 	vstr	s18, [r6, #-12]
 800bc68:	ed46 8a02 	vstr	s17, [r6, #-8]
 800bc6c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bc70:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800bc74:	ed12 6a03 	vldr	s12, [r2, #-12]
 800bc78:	ed52 2a04 	vldr	s5, [r2, #-16]
 800bc7c:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bc80:	ee34 4a42 	vsub.f32	s8, s8, s4
 800bc84:	ee26 8a86 	vmul.f32	s16, s13, s12
 800bc88:	ee24 2a06 	vmul.f32	s4, s8, s12
 800bc8c:	ee63 1a22 	vmul.f32	s3, s6, s5
 800bc90:	ee24 4a22 	vmul.f32	s8, s8, s5
 800bc94:	ee23 3a06 	vmul.f32	s6, s6, s12
 800bc98:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800bc9c:	ee23 6a86 	vmul.f32	s12, s7, s12
 800bca0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800bca4:	ee36 6a04 	vadd.f32	s12, s12, s8
 800bca8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800bcac:	ee72 3a63 	vsub.f32	s7, s4, s7
 800bcb0:	ee71 2a88 	vadd.f32	s5, s3, s16
 800bcb4:	ed44 6a03 	vstr	s13, [r4, #-12]
 800bcb8:	ed44 2a04 	vstr	s5, [r4, #-16]
 800bcbc:	ed43 3a04 	vstr	s7, [r3, #-16]
 800bcc0:	ed03 6a03 	vstr	s12, [r3, #-12]
 800bcc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800bccc:	ed12 7a01 	vldr	s14, [r2, #-4]
 800bcd0:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bcd4:	ee35 6a41 	vsub.f32	s12, s10, s2
 800bcd8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800bcdc:	ee67 3a87 	vmul.f32	s7, s15, s14
 800bce0:	ee26 5a87 	vmul.f32	s10, s13, s14
 800bce4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800bce8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800bcec:	ee64 4a87 	vmul.f32	s9, s9, s14
 800bcf0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800bcf4:	ee26 7a07 	vmul.f32	s14, s12, s14
 800bcf8:	ee26 6a25 	vmul.f32	s12, s12, s11
 800bcfc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800bd00:	ee74 5a23 	vadd.f32	s11, s8, s7
 800bd04:	ee35 6a46 	vsub.f32	s12, s10, s12
 800bd08:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bd0c:	f1be 0e01 	subs.w	lr, lr, #1
 800bd10:	ed44 5a02 	vstr	s11, [r4, #-8]
 800bd14:	f105 0510 	add.w	r5, r5, #16
 800bd18:	ed44 7a01 	vstr	s15, [r4, #-4]
 800bd1c:	f106 0610 	add.w	r6, r6, #16
 800bd20:	ed03 6a02 	vstr	s12, [r3, #-8]
 800bd24:	ed03 7a01 	vstr	s14, [r3, #-4]
 800bd28:	f102 0210 	add.w	r2, r2, #16
 800bd2c:	f104 0410 	add.w	r4, r4, #16
 800bd30:	f103 0310 	add.w	r3, r3, #16
 800bd34:	f47f af5a 	bne.w	800bbec <arm_cfft_radix8by2_f32+0x34>
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	fa1f f48c 	uxth.w	r4, ip
 800bd3e:	4608      	mov	r0, r1
 800bd40:	2302      	movs	r3, #2
 800bd42:	4621      	mov	r1, r4
 800bd44:	f000 fc10 	bl	800c568 <arm_radix8_butterfly_f32>
 800bd48:	ecbd 8b08 	vpop	{d8-d11}
 800bd4c:	4640      	mov	r0, r8
 800bd4e:	4621      	mov	r1, r4
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	2302      	movs	r3, #2
 800bd54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd58:	f000 bc06 	b.w	800c568 <arm_radix8_butterfly_f32>

0800bd5c <arm_cfft_radix8by4_f32>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	ed2d 8b0a 	vpush	{d8-d12}
 800bd64:	8802      	ldrh	r2, [r0, #0]
 800bd66:	ed91 6a00 	vldr	s12, [r1]
 800bd6a:	b08f      	sub	sp, #60	; 0x3c
 800bd6c:	460f      	mov	r7, r1
 800bd6e:	0852      	lsrs	r2, r2, #1
 800bd70:	0093      	lsls	r3, r2, #2
 800bd72:	900c      	str	r0, [sp, #48]	; 0x30
 800bd74:	9103      	str	r1, [sp, #12]
 800bd76:	6841      	ldr	r1, [r0, #4]
 800bd78:	ed97 7a01 	vldr	s14, [r7, #4]
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	4418      	add	r0, r3
 800bd80:	4606      	mov	r6, r0
 800bd82:	9009      	str	r0, [sp, #36]	; 0x24
 800bd84:	4418      	add	r0, r3
 800bd86:	edd0 6a00 	vldr	s13, [r0]
 800bd8a:	edd6 3a00 	vldr	s7, [r6]
 800bd8e:	edd6 2a01 	vldr	s5, [r6, #4]
 800bd92:	edd0 7a01 	vldr	s15, [r0, #4]
 800bd96:	900a      	str	r0, [sp, #40]	; 0x28
 800bd98:	ee76 5a26 	vadd.f32	s11, s12, s13
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4625      	mov	r5, r4
 800bda0:	441c      	add	r4, r3
 800bda2:	ed94 4a00 	vldr	s8, [r4]
 800bda6:	ed94 5a01 	vldr	s10, [r4, #4]
 800bdaa:	9401      	str	r4, [sp, #4]
 800bdac:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	ee74 4a24 	vadd.f32	s9, s8, s9
 800bdb6:	463e      	mov	r6, r7
 800bdb8:	ee14 ea90 	vmov	lr, s9
 800bdbc:	ee76 6a66 	vsub.f32	s13, s12, s13
 800bdc0:	f846 eb08 	str.w	lr, [r6], #8
 800bdc4:	ee37 6a27 	vadd.f32	s12, s14, s15
 800bdc8:	edd0 4a01 	vldr	s9, [r0, #4]
 800bdcc:	9604      	str	r6, [sp, #16]
 800bdce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdd2:	9e01      	ldr	r6, [sp, #4]
 800bdd4:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800bdd8:	ed96 2a01 	vldr	s4, [r6, #4]
 800bddc:	ee36 7a24 	vadd.f32	s14, s12, s9
 800bde0:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800bde4:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800bde8:	ee36 6a62 	vsub.f32	s12, s12, s5
 800bdec:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800bdf0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bdf4:	ee73 3a45 	vsub.f32	s7, s6, s10
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	ee36 6a45 	vsub.f32	s12, s12, s10
 800bdfe:	ee75 6a26 	vadd.f32	s13, s10, s13
 800be02:	46a3      	mov	fp, r4
 800be04:	ee37 7a02 	vadd.f32	s14, s14, s4
 800be08:	ee34 5a84 	vadd.f32	s10, s9, s8
 800be0c:	ee13 8a90 	vmov	r8, s7
 800be10:	46a4      	mov	ip, r4
 800be12:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800be16:	ed87 7a01 	vstr	s14, [r7, #4]
 800be1a:	f84b 8b08 	str.w	r8, [fp], #8
 800be1e:	f1ac 0704 	sub.w	r7, ip, #4
 800be22:	ed8c 5a01 	vstr	s10, [ip, #4]
 800be26:	f101 0c08 	add.w	ip, r1, #8
 800be2a:	462c      	mov	r4, r5
 800be2c:	f8cd c014 	str.w	ip, [sp, #20]
 800be30:	ee15 ca90 	vmov	ip, s11
 800be34:	f844 cb08 	str.w	ip, [r4], #8
 800be38:	9407      	str	r4, [sp, #28]
 800be3a:	f101 0410 	add.w	r4, r1, #16
 800be3e:	ed85 6a01 	vstr	s12, [r5, #4]
 800be42:	0852      	lsrs	r2, r2, #1
 800be44:	9402      	str	r4, [sp, #8]
 800be46:	462c      	mov	r4, r5
 800be48:	f101 0518 	add.w	r5, r1, #24
 800be4c:	920b      	str	r2, [sp, #44]	; 0x2c
 800be4e:	46b2      	mov	sl, r6
 800be50:	9506      	str	r5, [sp, #24]
 800be52:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800be56:	3a02      	subs	r2, #2
 800be58:	ee16 5a90 	vmov	r5, s13
 800be5c:	46b6      	mov	lr, r6
 800be5e:	4630      	mov	r0, r6
 800be60:	0852      	lsrs	r2, r2, #1
 800be62:	f84a 5b08 	str.w	r5, [sl], #8
 800be66:	f1a0 0604 	sub.w	r6, r0, #4
 800be6a:	edce 7a01 	vstr	s15, [lr, #4]
 800be6e:	9208      	str	r2, [sp, #32]
 800be70:	f000 8130 	beq.w	800c0d4 <arm_cfft_radix8by4_f32+0x378>
 800be74:	4691      	mov	r9, r2
 800be76:	9a03      	ldr	r2, [sp, #12]
 800be78:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800be7c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800be80:	3b08      	subs	r3, #8
 800be82:	f102 0510 	add.w	r5, r2, #16
 800be86:	f101 0c20 	add.w	ip, r1, #32
 800be8a:	f1a4 020c 	sub.w	r2, r4, #12
 800be8e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800be92:	4433      	add	r3, r6
 800be94:	3410      	adds	r4, #16
 800be96:	4650      	mov	r0, sl
 800be98:	4659      	mov	r1, fp
 800be9a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800be9e:	ed14 5a02 	vldr	s10, [r4, #-8]
 800bea2:	ed91 7a00 	vldr	s14, [r1]
 800bea6:	edd0 7a00 	vldr	s15, [r0]
 800beaa:	ed15 4a01 	vldr	s8, [r5, #-4]
 800beae:	ed54 5a01 	vldr	s11, [r4, #-4]
 800beb2:	edd0 6a01 	vldr	s13, [r0, #4]
 800beb6:	ed91 6a01 	vldr	s12, [r1, #4]
 800beba:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bebe:	ee34 0a25 	vadd.f32	s0, s8, s11
 800bec2:	ee78 4a07 	vadd.f32	s9, s16, s14
 800bec6:	ee74 5a65 	vsub.f32	s11, s8, s11
 800beca:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800bece:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800bed2:	ed45 4a02 	vstr	s9, [r5, #-8]
 800bed6:	edd1 4a01 	vldr	s9, [r1, #4]
 800beda:	ed90 4a01 	vldr	s8, [r0, #4]
 800bede:	ee70 4a24 	vadd.f32	s9, s0, s9
 800bee2:	ee76 aa05 	vadd.f32	s21, s12, s10
 800bee6:	ee74 4a84 	vadd.f32	s9, s9, s8
 800beea:	ee35 aac7 	vsub.f32	s20, s11, s14
 800beee:	ed45 4a01 	vstr	s9, [r5, #-4]
 800bef2:	edd6 1a00 	vldr	s3, [r6]
 800bef6:	edd7 0a00 	vldr	s1, [r7]
 800befa:	ed92 4a02 	vldr	s8, [r2, #8]
 800befe:	edd3 3a02 	vldr	s7, [r3, #8]
 800bf02:	ed93 2a01 	vldr	s4, [r3, #4]
 800bf06:	ed16 1a01 	vldr	s2, [r6, #-4]
 800bf0a:	edd2 2a01 	vldr	s5, [r2, #4]
 800bf0e:	ed57 9a01 	vldr	s19, [r7, #-4]
 800bf12:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800bf16:	ee39 3a81 	vadd.f32	s6, s19, s2
 800bf1a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800bf1e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800bf22:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800bf26:	ee7a aae6 	vsub.f32	s21, s21, s13
 800bf2a:	ee18 aa90 	vmov	sl, s17
 800bf2e:	f847 a908 	str.w	sl, [r7], #-8
 800bf32:	edd2 8a01 	vldr	s17, [r2, #4]
 800bf36:	ed93 9a01 	vldr	s18, [r3, #4]
 800bf3a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800bf3e:	ee3a aa27 	vadd.f32	s20, s20, s15
 800bf42:	ee78 8a89 	vadd.f32	s17, s17, s18
 800bf46:	ee74 0a63 	vsub.f32	s1, s8, s7
 800bf4a:	edc7 8a01 	vstr	s17, [r7, #4]
 800bf4e:	ed18 ba02 	vldr	s22, [r8, #-8]
 800bf52:	ed58 8a01 	vldr	s17, [r8, #-4]
 800bf56:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800bf5a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800bf5e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800bf62:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800bf66:	ee30 9a81 	vadd.f32	s18, s1, s2
 800bf6a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800bf6e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800bf72:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800bf76:	ee69 baa8 	vmul.f32	s23, s19, s17
 800bf7a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800bf7e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800bf82:	ee69 8a28 	vmul.f32	s17, s18, s17
 800bf86:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800bf8a:	ee1c aa10 	vmov	sl, s24
 800bf8e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800bf92:	f841 ab08 	str.w	sl, [r1], #8
 800bf96:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800bf9a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800bf9e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800bfa2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800bfa6:	ed01 aa01 	vstr	s20, [r1, #-4]
 800bfaa:	edc2 8a01 	vstr	s17, [r2, #4]
 800bfae:	ed82 ba02 	vstr	s22, [r2, #8]
 800bfb2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800bfb6:	ee74 3a63 	vsub.f32	s7, s8, s7
 800bfba:	ee38 8a47 	vsub.f32	s16, s16, s14
 800bfbe:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800bfc2:	ee30 0a46 	vsub.f32	s0, s0, s12
 800bfc6:	ee33 3a42 	vsub.f32	s6, s6, s4
 800bfca:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bfce:	ee30 0a66 	vsub.f32	s0, s0, s13
 800bfd2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800bfd6:	ee63 8a04 	vmul.f32	s17, s6, s8
 800bfda:	ee28 aa24 	vmul.f32	s20, s16, s9
 800bfde:	ee60 9a04 	vmul.f32	s19, s0, s8
 800bfe2:	ee28 8a04 	vmul.f32	s16, s16, s8
 800bfe6:	ee20 0a24 	vmul.f32	s0, s0, s9
 800bfea:	ee63 3a84 	vmul.f32	s7, s7, s8
 800bfee:	ee39 4a68 	vsub.f32	s8, s18, s17
 800bff2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800bff6:	ee14 aa10 	vmov	sl, s8
 800bffa:	ee30 0a48 	vsub.f32	s0, s0, s16
 800bffe:	ee63 4a24 	vmul.f32	s9, s6, s9
 800c002:	ed44 9a02 	vstr	s19, [r4, #-8]
 800c006:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800c00a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800c00e:	f846 a908 	str.w	sl, [r6], #-8
 800c012:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c016:	ee35 7a87 	vadd.f32	s14, s11, s14
 800c01a:	edc6 3a01 	vstr	s7, [r6, #4]
 800c01e:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c022:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c026:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800c02a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800c02e:	ee67 5a86 	vmul.f32	s11, s15, s12
 800c032:	ee26 5a87 	vmul.f32	s10, s13, s14
 800c036:	ee72 2a62 	vsub.f32	s5, s4, s5
 800c03a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800c03e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800c042:	ee75 5a25 	vadd.f32	s11, s10, s11
 800c046:	ee62 0a86 	vmul.f32	s1, s5, s12
 800c04a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c04e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c052:	ee21 6a06 	vmul.f32	s12, s2, s12
 800c056:	ee62 2a87 	vmul.f32	s5, s5, s14
 800c05a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800c05e:	ee15 aa90 	vmov	sl, s11
 800c062:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c066:	f840 ab08 	str.w	sl, [r0], #8
 800c06a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800c06e:	ee76 2a22 	vadd.f32	s5, s12, s5
 800c072:	f1b9 0901 	subs.w	r9, r9, #1
 800c076:	ed40 7a01 	vstr	s15, [r0, #-4]
 800c07a:	f105 0508 	add.w	r5, r5, #8
 800c07e:	ed83 1a02 	vstr	s2, [r3, #8]
 800c082:	edc3 2a01 	vstr	s5, [r3, #4]
 800c086:	f108 0808 	add.w	r8, r8, #8
 800c08a:	f1a2 0208 	sub.w	r2, r2, #8
 800c08e:	f10c 0c10 	add.w	ip, ip, #16
 800c092:	f104 0408 	add.w	r4, r4, #8
 800c096:	f10e 0e18 	add.w	lr, lr, #24
 800c09a:	f1a3 0308 	sub.w	r3, r3, #8
 800c09e:	f47f aefc 	bne.w	800be9a <arm_cfft_radix8by4_f32+0x13e>
 800c0a2:	9908      	ldr	r1, [sp, #32]
 800c0a4:	9802      	ldr	r0, [sp, #8]
 800c0a6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800c0aa:	00cb      	lsls	r3, r1, #3
 800c0ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800c0b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800c0b4:	9102      	str	r1, [sp, #8]
 800c0b6:	9904      	ldr	r1, [sp, #16]
 800c0b8:	4419      	add	r1, r3
 800c0ba:	9104      	str	r1, [sp, #16]
 800c0bc:	9905      	ldr	r1, [sp, #20]
 800c0be:	4419      	add	r1, r3
 800c0c0:	9105      	str	r1, [sp, #20]
 800c0c2:	9907      	ldr	r1, [sp, #28]
 800c0c4:	449b      	add	fp, r3
 800c0c6:	4419      	add	r1, r3
 800c0c8:	449a      	add	sl, r3
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	9107      	str	r1, [sp, #28]
 800c0ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0d2:	9306      	str	r3, [sp, #24]
 800c0d4:	9a04      	ldr	r2, [sp, #16]
 800c0d6:	9807      	ldr	r0, [sp, #28]
 800c0d8:	edd2 3a00 	vldr	s7, [r2]
 800c0dc:	ed90 4a00 	vldr	s8, [r0]
 800c0e0:	eddb 7a00 	vldr	s15, [fp]
 800c0e4:	ed9a 3a00 	vldr	s6, [sl]
 800c0e8:	edd2 4a01 	vldr	s9, [r2, #4]
 800c0ec:	ed90 7a01 	vldr	s14, [r0, #4]
 800c0f0:	ed9b 2a01 	vldr	s4, [fp, #4]
 800c0f4:	edda 5a01 	vldr	s11, [sl, #4]
 800c0f8:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800c0fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c0fe:	ee73 6a84 	vadd.f32	s13, s7, s8
 800c102:	ee34 6a87 	vadd.f32	s12, s9, s14
 800c106:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800c10a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800c10e:	ee33 5a05 	vadd.f32	s10, s6, s10
 800c112:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800c116:	ed82 5a00 	vstr	s10, [r2]
 800c11a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800c11e:	edda 4a01 	vldr	s9, [sl, #4]
 800c122:	ee36 5a05 	vadd.f32	s10, s12, s10
 800c126:	ee72 3a04 	vadd.f32	s7, s4, s8
 800c12a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800c12e:	ee77 4a67 	vsub.f32	s9, s14, s15
 800c132:	ed82 5a01 	vstr	s10, [r2, #4]
 800c136:	9a05      	ldr	r2, [sp, #20]
 800c138:	ee34 5a83 	vadd.f32	s10, s9, s6
 800c13c:	edd2 1a00 	vldr	s3, [r2]
 800c140:	edd2 2a01 	vldr	s5, [r2, #4]
 800c144:	9a02      	ldr	r2, [sp, #8]
 800c146:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800c14a:	ee36 6a42 	vsub.f32	s12, s12, s4
 800c14e:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800c152:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800c156:	ee65 2a22 	vmul.f32	s5, s10, s5
 800c15a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800c15e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800c162:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c166:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c16a:	edcb 2a00 	vstr	s5, [fp]
 800c16e:	ed8b 5a01 	vstr	s10, [fp, #4]
 800c172:	edd2 3a01 	vldr	s7, [r2, #4]
 800c176:	ed92 5a00 	vldr	s10, [r2]
 800c17a:	9a06      	ldr	r2, [sp, #24]
 800c17c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c180:	ee36 6a65 	vsub.f32	s12, s12, s11
 800c184:	ee66 4a85 	vmul.f32	s9, s13, s10
 800c188:	ee26 5a05 	vmul.f32	s10, s12, s10
 800c18c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800c190:	ee26 6a23 	vmul.f32	s12, s12, s7
 800c194:	ee75 6a66 	vsub.f32	s13, s10, s13
 800c198:	ee34 6a86 	vadd.f32	s12, s9, s12
 800c19c:	ee34 4a42 	vsub.f32	s8, s8, s4
 800c1a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1a4:	edc0 6a01 	vstr	s13, [r0, #4]
 800c1a8:	ed80 6a00 	vstr	s12, [r0]
 800c1ac:	ed92 6a01 	vldr	s12, [r2, #4]
 800c1b0:	9803      	ldr	r0, [sp, #12]
 800c1b2:	ee77 7a43 	vsub.f32	s15, s14, s6
 800c1b6:	ee75 5a84 	vadd.f32	s11, s11, s8
 800c1ba:	ed92 7a00 	vldr	s14, [r2]
 800c1be:	ee65 6a87 	vmul.f32	s13, s11, s14
 800c1c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c1c6:	ee65 5a86 	vmul.f32	s11, s11, s12
 800c1ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c1ce:	ee77 5a65 	vsub.f32	s11, s14, s11
 800c1d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1d6:	edca 5a01 	vstr	s11, [sl, #4]
 800c1da:	edca 7a00 	vstr	s15, [sl]
 800c1de:	6872      	ldr	r2, [r6, #4]
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	f000 f9c0 	bl	800c568 <arm_radix8_butterfly_f32>
 800c1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1ea:	6872      	ldr	r2, [r6, #4]
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	2304      	movs	r3, #4
 800c1f0:	f000 f9ba 	bl	800c568 <arm_radix8_butterfly_f32>
 800c1f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1f6:	6872      	ldr	r2, [r6, #4]
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	2304      	movs	r3, #4
 800c1fc:	f000 f9b4 	bl	800c568 <arm_radix8_butterfly_f32>
 800c200:	9801      	ldr	r0, [sp, #4]
 800c202:	6872      	ldr	r2, [r6, #4]
 800c204:	4621      	mov	r1, r4
 800c206:	2304      	movs	r3, #4
 800c208:	b00f      	add	sp, #60	; 0x3c
 800c20a:	ecbd 8b0a 	vpop	{d8-d12}
 800c20e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c212:	f000 b9a9 	b.w	800c568 <arm_radix8_butterfly_f32>
 800c216:	bf00      	nop

0800c218 <arm_cfft_f32>:
 800c218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21c:	2a01      	cmp	r2, #1
 800c21e:	4606      	mov	r6, r0
 800c220:	4617      	mov	r7, r2
 800c222:	460c      	mov	r4, r1
 800c224:	4698      	mov	r8, r3
 800c226:	8805      	ldrh	r5, [r0, #0]
 800c228:	d054      	beq.n	800c2d4 <arm_cfft_f32+0xbc>
 800c22a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c22e:	d04c      	beq.n	800c2ca <arm_cfft_f32+0xb2>
 800c230:	d916      	bls.n	800c260 <arm_cfft_f32+0x48>
 800c232:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800c236:	d01a      	beq.n	800c26e <arm_cfft_f32+0x56>
 800c238:	d95c      	bls.n	800c2f4 <arm_cfft_f32+0xdc>
 800c23a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800c23e:	d044      	beq.n	800c2ca <arm_cfft_f32+0xb2>
 800c240:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800c244:	d105      	bne.n	800c252 <arm_cfft_f32+0x3a>
 800c246:	4620      	mov	r0, r4
 800c248:	4629      	mov	r1, r5
 800c24a:	6872      	ldr	r2, [r6, #4]
 800c24c:	2301      	movs	r3, #1
 800c24e:	f000 f98b 	bl	800c568 <arm_radix8_butterfly_f32>
 800c252:	f1b8 0f00 	cmp.w	r8, #0
 800c256:	d111      	bne.n	800c27c <arm_cfft_f32+0x64>
 800c258:	2f01      	cmp	r7, #1
 800c25a:	d016      	beq.n	800c28a <arm_cfft_f32+0x72>
 800c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c260:	2d20      	cmp	r5, #32
 800c262:	d032      	beq.n	800c2ca <arm_cfft_f32+0xb2>
 800c264:	d94a      	bls.n	800c2fc <arm_cfft_f32+0xe4>
 800c266:	2d40      	cmp	r5, #64	; 0x40
 800c268:	d0ed      	beq.n	800c246 <arm_cfft_f32+0x2e>
 800c26a:	2d80      	cmp	r5, #128	; 0x80
 800c26c:	d1f1      	bne.n	800c252 <arm_cfft_f32+0x3a>
 800c26e:	4630      	mov	r0, r6
 800c270:	4621      	mov	r1, r4
 800c272:	f7ff fca1 	bl	800bbb8 <arm_cfft_radix8by2_f32>
 800c276:	f1b8 0f00 	cmp.w	r8, #0
 800c27a:	d0ed      	beq.n	800c258 <arm_cfft_f32+0x40>
 800c27c:	4620      	mov	r0, r4
 800c27e:	89b1      	ldrh	r1, [r6, #12]
 800c280:	68b2      	ldr	r2, [r6, #8]
 800c282:	f7f3 ffbd 	bl	8000200 <arm_bitreversal_32>
 800c286:	2f01      	cmp	r7, #1
 800c288:	d1e8      	bne.n	800c25c <arm_cfft_f32+0x44>
 800c28a:	ee07 5a90 	vmov	s15, r5
 800c28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c292:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c296:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800c29a:	2d00      	cmp	r5, #0
 800c29c:	d0de      	beq.n	800c25c <arm_cfft_f32+0x44>
 800c29e:	f104 0108 	add.w	r1, r4, #8
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	429d      	cmp	r5, r3
 800c2a8:	f101 0108 	add.w	r1, r1, #8
 800c2ac:	ed11 7a04 	vldr	s14, [r1, #-16]
 800c2b0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800c2b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c2b8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800c2bc:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c2c0:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c2c4:	d1ee      	bne.n	800c2a4 <arm_cfft_f32+0x8c>
 800c2c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ca:	4630      	mov	r0, r6
 800c2cc:	4621      	mov	r1, r4
 800c2ce:	f7ff fd45 	bl	800bd5c <arm_cfft_radix8by4_f32>
 800c2d2:	e7be      	b.n	800c252 <arm_cfft_f32+0x3a>
 800c2d4:	b1ad      	cbz	r5, 800c302 <arm_cfft_f32+0xea>
 800c2d6:	f101 030c 	add.w	r3, r1, #12
 800c2da:	2200      	movs	r2, #0
 800c2dc:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c2e0:	3201      	adds	r2, #1
 800c2e2:	eef1 7a67 	vneg.f32	s15, s15
 800c2e6:	4295      	cmp	r5, r2
 800c2e8:	ed43 7a02 	vstr	s15, [r3, #-8]
 800c2ec:	f103 0308 	add.w	r3, r3, #8
 800c2f0:	d1f4      	bne.n	800c2dc <arm_cfft_f32+0xc4>
 800c2f2:	e79a      	b.n	800c22a <arm_cfft_f32+0x12>
 800c2f4:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800c2f8:	d0a5      	beq.n	800c246 <arm_cfft_f32+0x2e>
 800c2fa:	e7aa      	b.n	800c252 <arm_cfft_f32+0x3a>
 800c2fc:	2d10      	cmp	r5, #16
 800c2fe:	d0b6      	beq.n	800c26e <arm_cfft_f32+0x56>
 800c300:	e7a7      	b.n	800c252 <arm_cfft_f32+0x3a>
 800c302:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800c306:	d894      	bhi.n	800c232 <arm_cfft_f32+0x1a>
 800c308:	e7aa      	b.n	800c260 <arm_cfft_f32+0x48>
 800c30a:	bf00      	nop

0800c30c <arm_cmplx_mag_f32>:
 800c30c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c310:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800c314:	b084      	sub	sp, #16
 800c316:	d07f      	beq.n	800c418 <arm_cmplx_mag_f32+0x10c>
 800c318:	2700      	movs	r7, #0
 800c31a:	f100 0420 	add.w	r4, r0, #32
 800c31e:	f101 0510 	add.w	r5, r1, #16
 800c322:	4646      	mov	r6, r8
 800c324:	e05a      	b.n	800c3dc <arm_cmplx_mag_f32+0xd0>
 800c326:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c32a:	eeb4 0a40 	vcmp.f32	s0, s0
 800c32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c332:	f040 80a4 	bne.w	800c47e <arm_cmplx_mag_f32+0x172>
 800c336:	ed05 0a04 	vstr	s0, [r5, #-16]
 800c33a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800c33e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800c342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c346:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c34a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c34e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c356:	f2c0 808f 	blt.w	800c478 <arm_cmplx_mag_f32+0x16c>
 800c35a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c35e:	eeb4 0a40 	vcmp.f32	s0, s0
 800c362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c366:	f040 80af 	bne.w	800c4c8 <arm_cmplx_mag_f32+0x1bc>
 800c36a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800c36e:	ed54 7a04 	vldr	s15, [r4, #-16]
 800c372:	ed14 0a03 	vldr	s0, [r4, #-12]
 800c376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c37a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c37e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38a:	db72      	blt.n	800c472 <arm_cmplx_mag_f32+0x166>
 800c38c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c390:	eeb4 0a40 	vcmp.f32	s0, s0
 800c394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c398:	f040 808c 	bne.w	800c4b4 <arm_cmplx_mag_f32+0x1a8>
 800c39c:	ed05 0a02 	vstr	s0, [r5, #-8]
 800c3a0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c3a4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800c3a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c3ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c3b0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c3b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3bc:	db20      	blt.n	800c400 <arm_cmplx_mag_f32+0xf4>
 800c3be:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c3c2:	eeb4 0a40 	vcmp.f32	s0, s0
 800c3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ca:	d169      	bne.n	800c4a0 <arm_cmplx_mag_f32+0x194>
 800c3cc:	3e01      	subs	r6, #1
 800c3ce:	ed05 0a01 	vstr	s0, [r5, #-4]
 800c3d2:	f104 0420 	add.w	r4, r4, #32
 800c3d6:	f105 0510 	add.w	r5, r5, #16
 800c3da:	d019      	beq.n	800c410 <arm_cmplx_mag_f32+0x104>
 800c3dc:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800c3e0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800c3e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c3e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c3ec:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c3f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f8:	da95      	bge.n	800c326 <arm_cmplx_mag_f32+0x1a>
 800c3fa:	f845 7c10 	str.w	r7, [r5, #-16]
 800c3fe:	e79c      	b.n	800c33a <arm_cmplx_mag_f32+0x2e>
 800c400:	3e01      	subs	r6, #1
 800c402:	f845 7c04 	str.w	r7, [r5, #-4]
 800c406:	f104 0420 	add.w	r4, r4, #32
 800c40a:	f105 0510 	add.w	r5, r5, #16
 800c40e:	d1e5      	bne.n	800c3dc <arm_cmplx_mag_f32+0xd0>
 800c410:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800c414:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800c418:	f012 0503 	ands.w	r5, r2, #3
 800c41c:	d026      	beq.n	800c46c <arm_cmplx_mag_f32+0x160>
 800c41e:	2600      	movs	r6, #0
 800c420:	f100 0408 	add.w	r4, r0, #8
 800c424:	e00c      	b.n	800c440 <arm_cmplx_mag_f32+0x134>
 800c426:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c42a:	eeb4 0a40 	vcmp.f32	s0, s0
 800c42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c432:	d12e      	bne.n	800c492 <arm_cmplx_mag_f32+0x186>
 800c434:	3d01      	subs	r5, #1
 800c436:	ed01 0a01 	vstr	s0, [r1, #-4]
 800c43a:	f104 0408 	add.w	r4, r4, #8
 800c43e:	d015      	beq.n	800c46c <arm_cmplx_mag_f32+0x160>
 800c440:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c444:	ed14 0a01 	vldr	s0, [r4, #-4]
 800c448:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c44c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c450:	3104      	adds	r1, #4
 800c452:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c45e:	dae2      	bge.n	800c426 <arm_cmplx_mag_f32+0x11a>
 800c460:	3d01      	subs	r5, #1
 800c462:	f841 6c04 	str.w	r6, [r1, #-4]
 800c466:	f104 0408 	add.w	r4, r4, #8
 800c46a:	d1e9      	bne.n	800c440 <arm_cmplx_mag_f32+0x134>
 800c46c:	b004      	add	sp, #16
 800c46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c472:	f845 7c08 	str.w	r7, [r5, #-8]
 800c476:	e793      	b.n	800c3a0 <arm_cmplx_mag_f32+0x94>
 800c478:	f845 7c0c 	str.w	r7, [r5, #-12]
 800c47c:	e777      	b.n	800c36e <arm_cmplx_mag_f32+0x62>
 800c47e:	eeb0 0a67 	vmov.f32	s0, s15
 800c482:	9203      	str	r2, [sp, #12]
 800c484:	9102      	str	r1, [sp, #8]
 800c486:	9001      	str	r0, [sp, #4]
 800c488:	f000 fd2e 	bl	800cee8 <sqrtf>
 800c48c:	a801      	add	r0, sp, #4
 800c48e:	c807      	ldmia	r0, {r0, r1, r2}
 800c490:	e751      	b.n	800c336 <arm_cmplx_mag_f32+0x2a>
 800c492:	eeb0 0a67 	vmov.f32	s0, s15
 800c496:	9101      	str	r1, [sp, #4]
 800c498:	f000 fd26 	bl	800cee8 <sqrtf>
 800c49c:	9901      	ldr	r1, [sp, #4]
 800c49e:	e7c9      	b.n	800c434 <arm_cmplx_mag_f32+0x128>
 800c4a0:	eeb0 0a67 	vmov.f32	s0, s15
 800c4a4:	9203      	str	r2, [sp, #12]
 800c4a6:	9102      	str	r1, [sp, #8]
 800c4a8:	9001      	str	r0, [sp, #4]
 800c4aa:	f000 fd1d 	bl	800cee8 <sqrtf>
 800c4ae:	a801      	add	r0, sp, #4
 800c4b0:	c807      	ldmia	r0, {r0, r1, r2}
 800c4b2:	e78b      	b.n	800c3cc <arm_cmplx_mag_f32+0xc0>
 800c4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800c4b8:	9203      	str	r2, [sp, #12]
 800c4ba:	9102      	str	r1, [sp, #8]
 800c4bc:	9001      	str	r0, [sp, #4]
 800c4be:	f000 fd13 	bl	800cee8 <sqrtf>
 800c4c2:	a801      	add	r0, sp, #4
 800c4c4:	c807      	ldmia	r0, {r0, r1, r2}
 800c4c6:	e769      	b.n	800c39c <arm_cmplx_mag_f32+0x90>
 800c4c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c4cc:	9203      	str	r2, [sp, #12]
 800c4ce:	9102      	str	r1, [sp, #8]
 800c4d0:	9001      	str	r0, [sp, #4]
 800c4d2:	f000 fd09 	bl	800cee8 <sqrtf>
 800c4d6:	a801      	add	r0, sp, #4
 800c4d8:	c807      	ldmia	r0, {r0, r1, r2}
 800c4da:	e746      	b.n	800c36a <arm_cmplx_mag_f32+0x5e>

0800c4dc <arm_mult_f32>:
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4de:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800c4e2:	d033      	beq.n	800c54c <arm_mult_f32+0x70>
 800c4e4:	f100 0610 	add.w	r6, r0, #16
 800c4e8:	f101 0510 	add.w	r5, r1, #16
 800c4ec:	f102 0410 	add.w	r4, r2, #16
 800c4f0:	4677      	mov	r7, lr
 800c4f2:	ed16 6a04 	vldr	s12, [r6, #-16]
 800c4f6:	ed55 4a04 	vldr	s9, [r5, #-16]
 800c4fa:	ed56 6a02 	vldr	s13, [r6, #-8]
 800c4fe:	ed15 5a02 	vldr	s10, [r5, #-8]
 800c502:	ed16 7a03 	vldr	s14, [r6, #-12]
 800c506:	ed55 5a03 	vldr	s11, [r5, #-12]
 800c50a:	ed56 7a01 	vldr	s15, [r6, #-4]
 800c50e:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c512:	ee66 6a85 	vmul.f32	s13, s13, s10
 800c516:	ed04 6a04 	vstr	s12, [r4, #-16]
 800c51a:	ed15 6a01 	vldr	s12, [r5, #-4]
 800c51e:	ed44 6a02 	vstr	s13, [r4, #-8]
 800c522:	ee27 7a25 	vmul.f32	s14, s14, s11
 800c526:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c52a:	3f01      	subs	r7, #1
 800c52c:	ed04 7a03 	vstr	s14, [r4, #-12]
 800c530:	ed44 7a01 	vstr	s15, [r4, #-4]
 800c534:	f106 0610 	add.w	r6, r6, #16
 800c538:	f105 0510 	add.w	r5, r5, #16
 800c53c:	f104 0410 	add.w	r4, r4, #16
 800c540:	d1d7      	bne.n	800c4f2 <arm_mult_f32+0x16>
 800c542:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800c546:	4420      	add	r0, r4
 800c548:	4421      	add	r1, r4
 800c54a:	4422      	add	r2, r4
 800c54c:	f013 0303 	ands.w	r3, r3, #3
 800c550:	d009      	beq.n	800c566 <arm_mult_f32+0x8a>
 800c552:	ecf0 7a01 	vldmia	r0!, {s15}
 800c556:	ecb1 7a01 	vldmia	r1!, {s14}
 800c55a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c55e:	3b01      	subs	r3, #1
 800c560:	ece2 7a01 	vstmia	r2!, {s15}
 800c564:	d1f5      	bne.n	800c552 <arm_mult_f32+0x76>
 800c566:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c568 <arm_radix8_butterfly_f32>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	ed2d 8b10 	vpush	{d8-d15}
 800c570:	b09d      	sub	sp, #116	; 0x74
 800c572:	461c      	mov	r4, r3
 800c574:	ed9f bac8 	vldr	s22, [pc, #800]	; 800c898 <arm_radix8_butterfly_f32+0x330>
 800c578:	921a      	str	r2, [sp, #104]	; 0x68
 800c57a:	1d03      	adds	r3, r0, #4
 800c57c:	4682      	mov	sl, r0
 800c57e:	4689      	mov	r9, r1
 800c580:	468b      	mov	fp, r1
 800c582:	931b      	str	r3, [sp, #108]	; 0x6c
 800c584:	9400      	str	r4, [sp, #0]
 800c586:	469e      	mov	lr, r3
 800c588:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800c58c:	005a      	lsls	r2, r3, #1
 800c58e:	18d6      	adds	r6, r2, r3
 800c590:	18f5      	adds	r5, r6, r3
 800c592:	9203      	str	r2, [sp, #12]
 800c594:	195a      	adds	r2, r3, r5
 800c596:	18d0      	adds	r0, r2, r3
 800c598:	00df      	lsls	r7, r3, #3
 800c59a:	1819      	adds	r1, r3, r0
 800c59c:	463c      	mov	r4, r7
 800c59e:	9701      	str	r7, [sp, #4]
 800c5a0:	4457      	add	r7, sl
 800c5a2:	930c      	str	r3, [sp, #48]	; 0x30
 800c5a4:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800c5a8:	011b      	lsls	r3, r3, #4
 800c5aa:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800c5ae:	eb07 0c04 	add.w	ip, r7, r4
 800c5b2:	9c00      	ldr	r4, [sp, #0]
 800c5b4:	9302      	str	r3, [sp, #8]
 800c5b6:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800c5ba:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800c5be:	3204      	adds	r2, #4
 800c5c0:	3104      	adds	r1, #4
 800c5c2:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800c5c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c5ca:	f04f 0800 	mov.w	r8, #0
 800c5ce:	eddc 7a00 	vldr	s15, [ip]
 800c5d2:	edd7 6a00 	vldr	s13, [r7]
 800c5d6:	edd6 3a00 	vldr	s7, [r6]
 800c5da:	ed5e aa01 	vldr	s21, [lr, #-4]
 800c5de:	edd5 4a00 	vldr	s9, [r5]
 800c5e2:	ed90 2a00 	vldr	s4, [r0]
 800c5e6:	ed12 7a01 	vldr	s14, [r2, #-4]
 800c5ea:	ed51 0a01 	vldr	s1, [r1, #-4]
 800c5ee:	ee77 8a82 	vadd.f32	s17, s15, s4
 800c5f2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800c5f6:	ee76 1a87 	vadd.f32	s3, s13, s14
 800c5fa:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800c5fe:	ee31 6a84 	vadd.f32	s12, s3, s8
 800c602:	ee33 5a28 	vadd.f32	s10, s6, s17
 800c606:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c60a:	ee75 6a06 	vadd.f32	s13, s10, s12
 800c60e:	ee35 5a46 	vsub.f32	s10, s10, s12
 800c612:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800c616:	ed85 5a00 	vstr	s10, [r5]
 800c61a:	ed96 1a01 	vldr	s2, [r6, #4]
 800c61e:	edd7 5a01 	vldr	s11, [r7, #4]
 800c622:	ed92 aa00 	vldr	s20, [r2]
 800c626:	ed91 6a00 	vldr	s12, [r1]
 800c62a:	ed9e 9a00 	vldr	s18, [lr]
 800c62e:	ed95 5a01 	vldr	s10, [r5, #4]
 800c632:	eddc 6a01 	vldr	s13, [ip, #4]
 800c636:	edd0 9a01 	vldr	s19, [r0, #4]
 800c63a:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800c63e:	ee71 2a46 	vsub.f32	s5, s2, s12
 800c642:	ee75 3aca 	vsub.f32	s7, s11, s20
 800c646:	ee37 0a60 	vsub.f32	s0, s14, s1
 800c64a:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800c64e:	ee37 7a20 	vadd.f32	s14, s14, s1
 800c652:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800c656:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800c65a:	ee79 3a05 	vadd.f32	s7, s18, s10
 800c65e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800c662:	ee39 5a45 	vsub.f32	s10, s18, s10
 800c666:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800c66a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800c66e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800c672:	ee31 6a06 	vadd.f32	s12, s2, s12
 800c676:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800c67a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800c67e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800c682:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800c686:	ee33 3a68 	vsub.f32	s6, s6, s17
 800c68a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800c68e:	ee75 8a86 	vadd.f32	s17, s11, s12
 800c692:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800c696:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800c69a:	ee75 6a62 	vsub.f32	s13, s10, s5
 800c69e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800c6a2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800c6a6:	ee33 1a89 	vadd.f32	s2, s7, s18
 800c6aa:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800c6ae:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800c6b2:	ee75 4a22 	vadd.f32	s9, s10, s5
 800c6b6:	ee32 5a27 	vadd.f32	s10, s4, s15
 800c6ba:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c6be:	ee33 8a06 	vadd.f32	s16, s6, s12
 800c6c2:	ee75 2a87 	vadd.f32	s5, s11, s14
 800c6c6:	ee31 9a28 	vadd.f32	s18, s2, s17
 800c6ca:	ee33 6a46 	vsub.f32	s12, s6, s12
 800c6ce:	ee74 0a61 	vsub.f32	s1, s8, s3
 800c6d2:	ee33 2a80 	vadd.f32	s4, s7, s0
 800c6d6:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800c6da:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800c6de:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c6e2:	ee31 1a68 	vsub.f32	s2, s2, s17
 800c6e6:	ee34 4a21 	vadd.f32	s8, s8, s3
 800c6ea:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800c6ee:	ee74 4a85 	vadd.f32	s9, s9, s10
 800c6f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c6f6:	44d8      	add	r8, fp
 800c6f8:	45c1      	cmp	r9, r8
 800c6fa:	ed8e 9a00 	vstr	s18, [lr]
 800c6fe:	ed85 1a01 	vstr	s2, [r5, #4]
 800c702:	449e      	add	lr, r3
 800c704:	ed8c 8a00 	vstr	s16, [ip]
 800c708:	441d      	add	r5, r3
 800c70a:	ed80 6a00 	vstr	s12, [r0]
 800c70e:	edcc 0a01 	vstr	s1, [ip, #4]
 800c712:	ed80 4a01 	vstr	s8, [r0, #4]
 800c716:	449c      	add	ip, r3
 800c718:	ed87 2a00 	vstr	s4, [r7]
 800c71c:	4418      	add	r0, r3
 800c71e:	ed41 3a01 	vstr	s7, [r1, #-4]
 800c722:	ed42 2a01 	vstr	s5, [r2, #-4]
 800c726:	ed86 7a00 	vstr	s14, [r6]
 800c72a:	ed87 3a01 	vstr	s6, [r7, #4]
 800c72e:	edc1 4a00 	vstr	s9, [r1]
 800c732:	441f      	add	r7, r3
 800c734:	edc2 5a00 	vstr	s11, [r2]
 800c738:	4419      	add	r1, r3
 800c73a:	edc6 6a01 	vstr	s13, [r6, #4]
 800c73e:	441a      	add	r2, r3
 800c740:	441e      	add	r6, r3
 800c742:	f63f af44 	bhi.w	800c5ce <arm_radix8_butterfly_f32+0x66>
 800c746:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c748:	2907      	cmp	r1, #7
 800c74a:	4620      	mov	r0, r4
 800c74c:	f240 81e9 	bls.w	800cb22 <arm_radix8_butterfly_f32+0x5ba>
 800c750:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800c754:	193e      	adds	r6, r7, r4
 800c756:	1935      	adds	r5, r6, r4
 800c758:	9c03      	ldr	r4, [sp, #12]
 800c75a:	9000      	str	r0, [sp, #0]
 800c75c:	4622      	mov	r2, r4
 800c75e:	3201      	adds	r2, #1
 800c760:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800c764:	9900      	ldr	r1, [sp, #0]
 800c766:	1828      	adds	r0, r5, r0
 800c768:	eb00 0e01 	add.w	lr, r0, r1
 800c76c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c76e:	440a      	add	r2, r1
 800c770:	eb04 0c01 	add.w	ip, r4, r1
 800c774:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800c778:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800c77c:	9a00      	ldr	r2, [sp, #0]
 800c77e:	940f      	str	r4, [sp, #60]	; 0x3c
 800c780:	00ed      	lsls	r5, r5, #3
 800c782:	9511      	str	r5, [sp, #68]	; 0x44
 800c784:	00d5      	lsls	r5, r2, #3
 800c786:	950d      	str	r5, [sp, #52]	; 0x34
 800c788:	9d01      	ldr	r5, [sp, #4]
 800c78a:	3508      	adds	r5, #8
 800c78c:	9516      	str	r5, [sp, #88]	; 0x58
 800c78e:	9d02      	ldr	r5, [sp, #8]
 800c790:	3508      	adds	r5, #8
 800c792:	0114      	lsls	r4, r2, #4
 800c794:	9517      	str	r5, [sp, #92]	; 0x5c
 800c796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c798:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800c79a:	940e      	str	r4, [sp, #56]	; 0x38
 800c79c:	00c0      	lsls	r0, r0, #3
 800c79e:	9010      	str	r0, [sp, #64]	; 0x40
 800c7a0:	18aa      	adds	r2, r5, r2
 800c7a2:	9207      	str	r2, [sp, #28]
 800c7a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7a6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800c7a8:	18aa      	adds	r2, r5, r2
 800c7aa:	9208      	str	r2, [sp, #32]
 800c7ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c7ae:	18aa      	adds	r2, r5, r2
 800c7b0:	9209      	str	r2, [sp, #36]	; 0x24
 800c7b2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800c7b6:	f10e 0204 	add.w	r2, lr, #4
 800c7ba:	920a      	str	r2, [sp, #40]	; 0x28
 800c7bc:	00c9      	lsls	r1, r1, #3
 800c7be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7c0:	310c      	adds	r1, #12
 800c7c2:	00f6      	lsls	r6, r6, #3
 800c7c4:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800c7c8:	9114      	str	r1, [sp, #80]	; 0x50
 800c7ca:	18a9      	adds	r1, r5, r2
 800c7cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7ce:	9612      	str	r6, [sp, #72]	; 0x48
 800c7d0:	00ff      	lsls	r7, r7, #3
 800c7d2:	19ae      	adds	r6, r5, r6
 800c7d4:	3008      	adds	r0, #8
 800c7d6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800c7da:	9606      	str	r6, [sp, #24]
 800c7dc:	9019      	str	r0, [sp, #100]	; 0x64
 800c7de:	18aa      	adds	r2, r5, r2
 800c7e0:	0164      	lsls	r4, r4, #5
 800c7e2:	19ee      	adds	r6, r5, r7
 800c7e4:	f10c 000c 	add.w	r0, ip, #12
 800c7e8:	9713      	str	r7, [sp, #76]	; 0x4c
 800c7ea:	9604      	str	r6, [sp, #16]
 800c7ec:	9015      	str	r0, [sp, #84]	; 0x54
 800c7ee:	9103      	str	r1, [sp, #12]
 800c7f0:	9205      	str	r2, [sp, #20]
 800c7f2:	f104 0208 	add.w	r2, r4, #8
 800c7f6:	9218      	str	r2, [sp, #96]	; 0x60
 800c7f8:	f04f 0801 	mov.w	r8, #1
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f102 0108 	add.w	r1, r2, #8
 800c802:	460f      	mov	r7, r1
 800c804:	910b      	str	r1, [sp, #44]	; 0x2c
 800c806:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c808:	188e      	adds	r6, r1, r2
 800c80a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c80c:	188d      	adds	r5, r1, r2
 800c80e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800c810:	188c      	adds	r4, r1, r2
 800c812:	9919      	ldr	r1, [sp, #100]	; 0x64
 800c814:	1888      	adds	r0, r1, r2
 800c816:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c818:	eb01 0c02 	add.w	ip, r1, r2
 800c81c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800c81e:	440a      	add	r2, r1
 800c820:	9903      	ldr	r1, [sp, #12]
 800c822:	edd1 fa00 	vldr	s31, [r1]
 800c826:	9905      	ldr	r1, [sp, #20]
 800c828:	ed91 fa00 	vldr	s30, [r1]
 800c82c:	9904      	ldr	r1, [sp, #16]
 800c82e:	edd1 ea00 	vldr	s29, [r1]
 800c832:	9906      	ldr	r1, [sp, #24]
 800c834:	ed91 ea00 	vldr	s28, [r1]
 800c838:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c83a:	edd1 da00 	vldr	s27, [r1]
 800c83e:	9908      	ldr	r1, [sp, #32]
 800c840:	ed91 da00 	vldr	s26, [r1]
 800c844:	9907      	ldr	r1, [sp, #28]
 800c846:	edd1 ca00 	vldr	s25, [r1]
 800c84a:	9903      	ldr	r1, [sp, #12]
 800c84c:	ed91 ca01 	vldr	s24, [r1, #4]
 800c850:	9905      	ldr	r1, [sp, #20]
 800c852:	edd1 ba01 	vldr	s23, [r1, #4]
 800c856:	9904      	ldr	r1, [sp, #16]
 800c858:	edd1 aa01 	vldr	s21, [r1, #4]
 800c85c:	9906      	ldr	r1, [sp, #24]
 800c85e:	ed91 aa01 	vldr	s20, [r1, #4]
 800c862:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c864:	edd1 7a01 	vldr	s15, [r1, #4]
 800c868:	9908      	ldr	r1, [sp, #32]
 800c86a:	edcd 7a00 	vstr	s15, [sp]
 800c86e:	edd1 7a01 	vldr	s15, [r1, #4]
 800c872:	9907      	ldr	r1, [sp, #28]
 800c874:	edcd 7a01 	vstr	s15, [sp, #4]
 800c878:	edd1 7a01 	vldr	s15, [r1, #4]
 800c87c:	eb0a 0e07 	add.w	lr, sl, r7
 800c880:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c882:	edcd 7a02 	vstr	s15, [sp, #8]
 800c886:	eb0c 010a 	add.w	r1, ip, sl
 800c88a:	4456      	add	r6, sl
 800c88c:	4455      	add	r5, sl
 800c88e:	4454      	add	r4, sl
 800c890:	4450      	add	r0, sl
 800c892:	4452      	add	r2, sl
 800c894:	46c4      	mov	ip, r8
 800c896:	e001      	b.n	800c89c <arm_radix8_butterfly_f32+0x334>
 800c898:	3f3504f3 	.word	0x3f3504f3
 800c89c:	ed96 5a00 	vldr	s10, [r6]
 800c8a0:	ed52 9a01 	vldr	s19, [r2, #-4]
 800c8a4:	ed11 6a01 	vldr	s12, [r1, #-4]
 800c8a8:	edd0 7a00 	vldr	s15, [r0]
 800c8ac:	ed17 7a01 	vldr	s14, [r7, #-4]
 800c8b0:	edde 3a00 	vldr	s7, [lr]
 800c8b4:	ed94 3a00 	vldr	s6, [r4]
 800c8b8:	ed95 2a00 	vldr	s4, [r5]
 800c8bc:	ed9e 0a01 	vldr	s0, [lr, #4]
 800c8c0:	ee33 8a85 	vadd.f32	s16, s7, s10
 800c8c4:	ee32 1a06 	vadd.f32	s2, s4, s12
 800c8c8:	ee33 4a29 	vadd.f32	s8, s6, s19
 800c8cc:	ee77 4a87 	vadd.f32	s9, s15, s14
 800c8d0:	ee78 1a04 	vadd.f32	s3, s16, s8
 800c8d4:	ee71 6a24 	vadd.f32	s13, s2, s9
 800c8d8:	ee32 2a46 	vsub.f32	s4, s4, s12
 800c8dc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800c8e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c8e4:	ed8e 6a00 	vstr	s12, [lr]
 800c8e8:	edd0 8a01 	vldr	s17, [r0, #4]
 800c8ec:	ed95 9a01 	vldr	s18, [r5, #4]
 800c8f0:	edd1 2a00 	vldr	s5, [r1]
 800c8f4:	ed97 7a00 	vldr	s14, [r7]
 800c8f8:	edd4 0a01 	vldr	s1, [r4, #4]
 800c8fc:	ed96 6a01 	vldr	s12, [r6, #4]
 800c900:	edd2 5a00 	vldr	s11, [r2]
 800c904:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800c908:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c90c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800c910:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800c914:	ee38 4a44 	vsub.f32	s8, s16, s8
 800c918:	ee38 7a87 	vadd.f32	s14, s17, s14
 800c91c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800c920:	ee79 2a22 	vadd.f32	s5, s18, s5
 800c924:	ee75 8a69 	vsub.f32	s17, s10, s19
 800c928:	ee32 9a27 	vadd.f32	s18, s4, s15
 800c92c:	ee35 5a29 	vadd.f32	s10, s10, s19
 800c930:	ee72 7a67 	vsub.f32	s15, s4, s15
 800c934:	ee30 2a06 	vadd.f32	s4, s0, s12
 800c938:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800c93c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c940:	ee32 9a08 	vadd.f32	s18, s4, s16
 800c944:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800c948:	ee32 2a48 	vsub.f32	s4, s4, s16
 800c94c:	ee71 4a64 	vsub.f32	s9, s2, s9
 800c950:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800c954:	ee32 1a87 	vadd.f32	s2, s5, s14
 800c958:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800c95c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800c960:	ee30 6a46 	vsub.f32	s12, s0, s12
 800c964:	ee73 0a29 	vadd.f32	s1, s6, s19
 800c968:	ee36 0a28 	vadd.f32	s0, s12, s17
 800c96c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800c970:	ee32 7a64 	vsub.f32	s14, s4, s9
 800c974:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800c978:	ee36 6a68 	vsub.f32	s12, s12, s17
 800c97c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800c980:	ee75 8a85 	vadd.f32	s17, s11, s10
 800c984:	ee74 3a22 	vadd.f32	s7, s8, s5
 800c988:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800c98c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800c990:	ee79 1a41 	vsub.f32	s3, s18, s2
 800c994:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800c998:	ee76 5a43 	vsub.f32	s11, s12, s6
 800c99c:	ee74 2a62 	vsub.f32	s5, s8, s5
 800c9a0:	ee72 4a24 	vadd.f32	s9, s4, s9
 800c9a4:	ee30 4a60 	vsub.f32	s8, s0, s1
 800c9a8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800c9ac:	ee30 0a20 	vadd.f32	s0, s0, s1
 800c9b0:	ee77 9a85 	vadd.f32	s19, s15, s10
 800c9b4:	ee36 6a03 	vadd.f32	s12, s12, s6
 800c9b8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c9bc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800c9c0:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800c9c4:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800c9c8:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800c9cc:	ee39 1a01 	vadd.f32	s2, s18, s2
 800c9d0:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800c9d4:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800c9d8:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800c9dc:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800c9e0:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800c9e4:	ee35 3a03 	vadd.f32	s6, s10, s6
 800c9e8:	ee72 6a66 	vsub.f32	s13, s4, s13
 800c9ec:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800c9f0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800c9f4:	ed9d 4a02 	vldr	s8, [sp, #8]
 800c9f8:	ed8e 1a01 	vstr	s2, [lr, #4]
 800c9fc:	ee77 3a63 	vsub.f32	s7, s14, s7
 800ca00:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ca04:	ed9d 7a01 	vldr	s14, [sp, #4]
 800ca08:	ed86 3a00 	vstr	s6, [r6]
 800ca0c:	ee30 9a89 	vadd.f32	s18, s1, s18
 800ca10:	ee32 2a05 	vadd.f32	s4, s4, s10
 800ca14:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800ca18:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800ca1c:	ee67 2a22 	vmul.f32	s5, s14, s5
 800ca20:	ee64 1a00 	vmul.f32	s3, s8, s0
 800ca24:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ca28:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800ca2c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800ca30:	ee64 8a28 	vmul.f32	s17, s8, s17
 800ca34:	ed9d 4a00 	vldr	s8, [sp]
 800ca38:	edc6 6a01 	vstr	s13, [r6, #4]
 800ca3c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800ca40:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800ca44:	ee64 9a29 	vmul.f32	s19, s8, s19
 800ca48:	ee24 4a25 	vmul.f32	s8, s8, s11
 800ca4c:	ee30 7a87 	vadd.f32	s14, s1, s14
 800ca50:	ee74 4a84 	vadd.f32	s9, s9, s8
 800ca54:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800ca58:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800ca5c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800ca60:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800ca64:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800ca68:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800ca6c:	ee75 1a21 	vadd.f32	s3, s10, s3
 800ca70:	ee30 0a68 	vsub.f32	s0, s0, s17
 800ca74:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800ca78:	ee70 0a84 	vadd.f32	s1, s1, s8
 800ca7c:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ca80:	44dc      	add	ip, fp
 800ca82:	45e1      	cmp	r9, ip
 800ca84:	ed84 9a00 	vstr	s18, [r4]
 800ca88:	edc4 3a01 	vstr	s7, [r4, #4]
 800ca8c:	449e      	add	lr, r3
 800ca8e:	ed02 7a01 	vstr	s14, [r2, #-4]
 800ca92:	edc2 2a00 	vstr	s5, [r2]
 800ca96:	441e      	add	r6, r3
 800ca98:	ed85 2a00 	vstr	s4, [r5]
 800ca9c:	ed85 8a01 	vstr	s16, [r5, #4]
 800caa0:	441c      	add	r4, r3
 800caa2:	ed47 1a01 	vstr	s3, [r7, #-4]
 800caa6:	ed87 0a00 	vstr	s0, [r7]
 800caaa:	441a      	add	r2, r3
 800caac:	ed41 4a01 	vstr	s9, [r1, #-4]
 800cab0:	edc1 9a00 	vstr	s19, [r1]
 800cab4:	441d      	add	r5, r3
 800cab6:	edc0 0a00 	vstr	s1, [r0]
 800caba:	441f      	add	r7, r3
 800cabc:	ed80 6a01 	vstr	s12, [r0, #4]
 800cac0:	4419      	add	r1, r3
 800cac2:	4418      	add	r0, r3
 800cac4:	f63f aeea 	bhi.w	800c89c <arm_radix8_butterfly_f32+0x334>
 800cac8:	9a03      	ldr	r2, [sp, #12]
 800caca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cacc:	440a      	add	r2, r1
 800cace:	9203      	str	r2, [sp, #12]
 800cad0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cad2:	9a05      	ldr	r2, [sp, #20]
 800cad4:	440a      	add	r2, r1
 800cad6:	9205      	str	r2, [sp, #20]
 800cad8:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800cada:	9a04      	ldr	r2, [sp, #16]
 800cadc:	440a      	add	r2, r1
 800cade:	9204      	str	r2, [sp, #16]
 800cae0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cae2:	9a06      	ldr	r2, [sp, #24]
 800cae4:	440a      	add	r2, r1
 800cae6:	9206      	str	r2, [sp, #24]
 800cae8:	9911      	ldr	r1, [sp, #68]	; 0x44
 800caea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caec:	440a      	add	r2, r1
 800caee:	9209      	str	r2, [sp, #36]	; 0x24
 800caf0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800caf2:	9a08      	ldr	r2, [sp, #32]
 800caf4:	440a      	add	r2, r1
 800caf6:	9208      	str	r2, [sp, #32]
 800caf8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cafa:	9a07      	ldr	r2, [sp, #28]
 800cafc:	440a      	add	r2, r1
 800cafe:	9207      	str	r2, [sp, #28]
 800cb00:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cb02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb04:	f108 0801 	add.w	r8, r8, #1
 800cb08:	3208      	adds	r2, #8
 800cb0a:	4588      	cmp	r8, r1
 800cb0c:	920a      	str	r2, [sp, #40]	; 0x28
 800cb0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cb10:	f47f ae75 	bne.w	800c7fe <arm_radix8_butterfly_f32+0x296>
 800cb14:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	46c3      	mov	fp, r8
 800cb1c:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800cb20:	e532      	b.n	800c588 <arm_radix8_butterfly_f32+0x20>
 800cb22:	b01d      	add	sp, #116	; 0x74
 800cb24:	ecbd 8b10 	vpop	{d8-d15}
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb2c <calloc>:
 800cb2c:	4b02      	ldr	r3, [pc, #8]	; (800cb38 <calloc+0xc>)
 800cb2e:	460a      	mov	r2, r1
 800cb30:	4601      	mov	r1, r0
 800cb32:	6818      	ldr	r0, [r3, #0]
 800cb34:	f000 b84f 	b.w	800cbd6 <_calloc_r>
 800cb38:	20000190 	.word	0x20000190

0800cb3c <__errno>:
 800cb3c:	4b01      	ldr	r3, [pc, #4]	; (800cb44 <__errno+0x8>)
 800cb3e:	6818      	ldr	r0, [r3, #0]
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20000190 	.word	0x20000190

0800cb48 <__libc_init_array>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	4e0d      	ldr	r6, [pc, #52]	; (800cb80 <__libc_init_array+0x38>)
 800cb4c:	4c0d      	ldr	r4, [pc, #52]	; (800cb84 <__libc_init_array+0x3c>)
 800cb4e:	1ba4      	subs	r4, r4, r6
 800cb50:	10a4      	asrs	r4, r4, #2
 800cb52:	2500      	movs	r5, #0
 800cb54:	42a5      	cmp	r5, r4
 800cb56:	d109      	bne.n	800cb6c <__libc_init_array+0x24>
 800cb58:	4e0b      	ldr	r6, [pc, #44]	; (800cb88 <__libc_init_array+0x40>)
 800cb5a:	4c0c      	ldr	r4, [pc, #48]	; (800cb8c <__libc_init_array+0x44>)
 800cb5c:	f001 f8de 	bl	800dd1c <_init>
 800cb60:	1ba4      	subs	r4, r4, r6
 800cb62:	10a4      	asrs	r4, r4, #2
 800cb64:	2500      	movs	r5, #0
 800cb66:	42a5      	cmp	r5, r4
 800cb68:	d105      	bne.n	800cb76 <__libc_init_array+0x2e>
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
 800cb6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb70:	4798      	blx	r3
 800cb72:	3501      	adds	r5, #1
 800cb74:	e7ee      	b.n	800cb54 <__libc_init_array+0xc>
 800cb76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cb7a:	4798      	blx	r3
 800cb7c:	3501      	adds	r5, #1
 800cb7e:	e7f2      	b.n	800cb66 <__libc_init_array+0x1e>
 800cb80:	0802168c 	.word	0x0802168c
 800cb84:	0802168c 	.word	0x0802168c
 800cb88:	0802168c 	.word	0x0802168c
 800cb8c:	08021690 	.word	0x08021690

0800cb90 <malloc>:
 800cb90:	4b02      	ldr	r3, [pc, #8]	; (800cb9c <malloc+0xc>)
 800cb92:	4601      	mov	r1, r0
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	f000 b87b 	b.w	800cc90 <_malloc_r>
 800cb9a:	bf00      	nop
 800cb9c:	20000190 	.word	0x20000190

0800cba0 <free>:
 800cba0:	4b02      	ldr	r3, [pc, #8]	; (800cbac <free+0xc>)
 800cba2:	4601      	mov	r1, r0
 800cba4:	6818      	ldr	r0, [r3, #0]
 800cba6:	f000 b825 	b.w	800cbf4 <_free_r>
 800cbaa:	bf00      	nop
 800cbac:	20000190 	.word	0x20000190

0800cbb0 <memcpy>:
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	1e43      	subs	r3, r0, #1
 800cbb4:	440a      	add	r2, r1
 800cbb6:	4291      	cmp	r1, r2
 800cbb8:	d100      	bne.n	800cbbc <memcpy+0xc>
 800cbba:	bd10      	pop	{r4, pc}
 800cbbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbc4:	e7f7      	b.n	800cbb6 <memcpy+0x6>

0800cbc6 <memset>:
 800cbc6:	4402      	add	r2, r0
 800cbc8:	4603      	mov	r3, r0
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d100      	bne.n	800cbd0 <memset+0xa>
 800cbce:	4770      	bx	lr
 800cbd0:	f803 1b01 	strb.w	r1, [r3], #1
 800cbd4:	e7f9      	b.n	800cbca <memset+0x4>

0800cbd6 <_calloc_r>:
 800cbd6:	b538      	push	{r3, r4, r5, lr}
 800cbd8:	fb02 f401 	mul.w	r4, r2, r1
 800cbdc:	4621      	mov	r1, r4
 800cbde:	f000 f857 	bl	800cc90 <_malloc_r>
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	b118      	cbz	r0, 800cbee <_calloc_r+0x18>
 800cbe6:	4622      	mov	r2, r4
 800cbe8:	2100      	movs	r1, #0
 800cbea:	f7ff ffec 	bl	800cbc6 <memset>
 800cbee:	4628      	mov	r0, r5
 800cbf0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800cbf4 <_free_r>:
 800cbf4:	b538      	push	{r3, r4, r5, lr}
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	2900      	cmp	r1, #0
 800cbfa:	d045      	beq.n	800cc88 <_free_r+0x94>
 800cbfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc00:	1f0c      	subs	r4, r1, #4
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	bfb8      	it	lt
 800cc06:	18e4      	addlt	r4, r4, r3
 800cc08:	f000 f8ac 	bl	800cd64 <__malloc_lock>
 800cc0c:	4a1f      	ldr	r2, [pc, #124]	; (800cc8c <_free_r+0x98>)
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	4610      	mov	r0, r2
 800cc12:	b933      	cbnz	r3, 800cc22 <_free_r+0x2e>
 800cc14:	6063      	str	r3, [r4, #4]
 800cc16:	6014      	str	r4, [r2, #0]
 800cc18:	4628      	mov	r0, r5
 800cc1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc1e:	f000 b8a2 	b.w	800cd66 <__malloc_unlock>
 800cc22:	42a3      	cmp	r3, r4
 800cc24:	d90c      	bls.n	800cc40 <_free_r+0x4c>
 800cc26:	6821      	ldr	r1, [r4, #0]
 800cc28:	1862      	adds	r2, r4, r1
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	bf04      	itt	eq
 800cc2e:	681a      	ldreq	r2, [r3, #0]
 800cc30:	685b      	ldreq	r3, [r3, #4]
 800cc32:	6063      	str	r3, [r4, #4]
 800cc34:	bf04      	itt	eq
 800cc36:	1852      	addeq	r2, r2, r1
 800cc38:	6022      	streq	r2, [r4, #0]
 800cc3a:	6004      	str	r4, [r0, #0]
 800cc3c:	e7ec      	b.n	800cc18 <_free_r+0x24>
 800cc3e:	4613      	mov	r3, r2
 800cc40:	685a      	ldr	r2, [r3, #4]
 800cc42:	b10a      	cbz	r2, 800cc48 <_free_r+0x54>
 800cc44:	42a2      	cmp	r2, r4
 800cc46:	d9fa      	bls.n	800cc3e <_free_r+0x4a>
 800cc48:	6819      	ldr	r1, [r3, #0]
 800cc4a:	1858      	adds	r0, r3, r1
 800cc4c:	42a0      	cmp	r0, r4
 800cc4e:	d10b      	bne.n	800cc68 <_free_r+0x74>
 800cc50:	6820      	ldr	r0, [r4, #0]
 800cc52:	4401      	add	r1, r0
 800cc54:	1858      	adds	r0, r3, r1
 800cc56:	4282      	cmp	r2, r0
 800cc58:	6019      	str	r1, [r3, #0]
 800cc5a:	d1dd      	bne.n	800cc18 <_free_r+0x24>
 800cc5c:	6810      	ldr	r0, [r2, #0]
 800cc5e:	6852      	ldr	r2, [r2, #4]
 800cc60:	605a      	str	r2, [r3, #4]
 800cc62:	4401      	add	r1, r0
 800cc64:	6019      	str	r1, [r3, #0]
 800cc66:	e7d7      	b.n	800cc18 <_free_r+0x24>
 800cc68:	d902      	bls.n	800cc70 <_free_r+0x7c>
 800cc6a:	230c      	movs	r3, #12
 800cc6c:	602b      	str	r3, [r5, #0]
 800cc6e:	e7d3      	b.n	800cc18 <_free_r+0x24>
 800cc70:	6820      	ldr	r0, [r4, #0]
 800cc72:	1821      	adds	r1, r4, r0
 800cc74:	428a      	cmp	r2, r1
 800cc76:	bf04      	itt	eq
 800cc78:	6811      	ldreq	r1, [r2, #0]
 800cc7a:	6852      	ldreq	r2, [r2, #4]
 800cc7c:	6062      	str	r2, [r4, #4]
 800cc7e:	bf04      	itt	eq
 800cc80:	1809      	addeq	r1, r1, r0
 800cc82:	6021      	streq	r1, [r4, #0]
 800cc84:	605c      	str	r4, [r3, #4]
 800cc86:	e7c7      	b.n	800cc18 <_free_r+0x24>
 800cc88:	bd38      	pop	{r3, r4, r5, pc}
 800cc8a:	bf00      	nop
 800cc8c:	20000220 	.word	0x20000220

0800cc90 <_malloc_r>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	1ccd      	adds	r5, r1, #3
 800cc94:	f025 0503 	bic.w	r5, r5, #3
 800cc98:	3508      	adds	r5, #8
 800cc9a:	2d0c      	cmp	r5, #12
 800cc9c:	bf38      	it	cc
 800cc9e:	250c      	movcc	r5, #12
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	4606      	mov	r6, r0
 800cca4:	db01      	blt.n	800ccaa <_malloc_r+0x1a>
 800cca6:	42a9      	cmp	r1, r5
 800cca8:	d903      	bls.n	800ccb2 <_malloc_r+0x22>
 800ccaa:	230c      	movs	r3, #12
 800ccac:	6033      	str	r3, [r6, #0]
 800ccae:	2000      	movs	r0, #0
 800ccb0:	bd70      	pop	{r4, r5, r6, pc}
 800ccb2:	f000 f857 	bl	800cd64 <__malloc_lock>
 800ccb6:	4a21      	ldr	r2, [pc, #132]	; (800cd3c <_malloc_r+0xac>)
 800ccb8:	6814      	ldr	r4, [r2, #0]
 800ccba:	4621      	mov	r1, r4
 800ccbc:	b991      	cbnz	r1, 800cce4 <_malloc_r+0x54>
 800ccbe:	4c20      	ldr	r4, [pc, #128]	; (800cd40 <_malloc_r+0xb0>)
 800ccc0:	6823      	ldr	r3, [r4, #0]
 800ccc2:	b91b      	cbnz	r3, 800cccc <_malloc_r+0x3c>
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	f000 f83d 	bl	800cd44 <_sbrk_r>
 800ccca:	6020      	str	r0, [r4, #0]
 800cccc:	4629      	mov	r1, r5
 800ccce:	4630      	mov	r0, r6
 800ccd0:	f000 f838 	bl	800cd44 <_sbrk_r>
 800ccd4:	1c43      	adds	r3, r0, #1
 800ccd6:	d124      	bne.n	800cd22 <_malloc_r+0x92>
 800ccd8:	230c      	movs	r3, #12
 800ccda:	6033      	str	r3, [r6, #0]
 800ccdc:	4630      	mov	r0, r6
 800ccde:	f000 f842 	bl	800cd66 <__malloc_unlock>
 800cce2:	e7e4      	b.n	800ccae <_malloc_r+0x1e>
 800cce4:	680b      	ldr	r3, [r1, #0]
 800cce6:	1b5b      	subs	r3, r3, r5
 800cce8:	d418      	bmi.n	800cd1c <_malloc_r+0x8c>
 800ccea:	2b0b      	cmp	r3, #11
 800ccec:	d90f      	bls.n	800cd0e <_malloc_r+0x7e>
 800ccee:	600b      	str	r3, [r1, #0]
 800ccf0:	50cd      	str	r5, [r1, r3]
 800ccf2:	18cc      	adds	r4, r1, r3
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f000 f836 	bl	800cd66 <__malloc_unlock>
 800ccfa:	f104 000b 	add.w	r0, r4, #11
 800ccfe:	1d23      	adds	r3, r4, #4
 800cd00:	f020 0007 	bic.w	r0, r0, #7
 800cd04:	1ac3      	subs	r3, r0, r3
 800cd06:	d0d3      	beq.n	800ccb0 <_malloc_r+0x20>
 800cd08:	425a      	negs	r2, r3
 800cd0a:	50e2      	str	r2, [r4, r3]
 800cd0c:	e7d0      	b.n	800ccb0 <_malloc_r+0x20>
 800cd0e:	428c      	cmp	r4, r1
 800cd10:	684b      	ldr	r3, [r1, #4]
 800cd12:	bf16      	itet	ne
 800cd14:	6063      	strne	r3, [r4, #4]
 800cd16:	6013      	streq	r3, [r2, #0]
 800cd18:	460c      	movne	r4, r1
 800cd1a:	e7eb      	b.n	800ccf4 <_malloc_r+0x64>
 800cd1c:	460c      	mov	r4, r1
 800cd1e:	6849      	ldr	r1, [r1, #4]
 800cd20:	e7cc      	b.n	800ccbc <_malloc_r+0x2c>
 800cd22:	1cc4      	adds	r4, r0, #3
 800cd24:	f024 0403 	bic.w	r4, r4, #3
 800cd28:	42a0      	cmp	r0, r4
 800cd2a:	d005      	beq.n	800cd38 <_malloc_r+0xa8>
 800cd2c:	1a21      	subs	r1, r4, r0
 800cd2e:	4630      	mov	r0, r6
 800cd30:	f000 f808 	bl	800cd44 <_sbrk_r>
 800cd34:	3001      	adds	r0, #1
 800cd36:	d0cf      	beq.n	800ccd8 <_malloc_r+0x48>
 800cd38:	6025      	str	r5, [r4, #0]
 800cd3a:	e7db      	b.n	800ccf4 <_malloc_r+0x64>
 800cd3c:	20000220 	.word	0x20000220
 800cd40:	20000224 	.word	0x20000224

0800cd44 <_sbrk_r>:
 800cd44:	b538      	push	{r3, r4, r5, lr}
 800cd46:	4c06      	ldr	r4, [pc, #24]	; (800cd60 <_sbrk_r+0x1c>)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4605      	mov	r5, r0
 800cd4c:	4608      	mov	r0, r1
 800cd4e:	6023      	str	r3, [r4, #0]
 800cd50:	f7f5 fcaa 	bl	80026a8 <_sbrk>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	d102      	bne.n	800cd5e <_sbrk_r+0x1a>
 800cd58:	6823      	ldr	r3, [r4, #0]
 800cd5a:	b103      	cbz	r3, 800cd5e <_sbrk_r+0x1a>
 800cd5c:	602b      	str	r3, [r5, #0]
 800cd5e:	bd38      	pop	{r3, r4, r5, pc}
 800cd60:	20002110 	.word	0x20002110

0800cd64 <__malloc_lock>:
 800cd64:	4770      	bx	lr

0800cd66 <__malloc_unlock>:
 800cd66:	4770      	bx	lr

0800cd68 <cosf>:
 800cd68:	ee10 3a10 	vmov	r3, s0
 800cd6c:	b507      	push	{r0, r1, r2, lr}
 800cd6e:	4a1c      	ldr	r2, [pc, #112]	; (800cde0 <cosf+0x78>)
 800cd70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd74:	4293      	cmp	r3, r2
 800cd76:	dc04      	bgt.n	800cd82 <cosf+0x1a>
 800cd78:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800cde4 <cosf+0x7c>
 800cd7c:	f000 fbe6 	bl	800d54c <__kernel_cosf>
 800cd80:	e004      	b.n	800cd8c <cosf+0x24>
 800cd82:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cd86:	db04      	blt.n	800cd92 <cosf+0x2a>
 800cd88:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cd8c:	b003      	add	sp, #12
 800cd8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd92:	4668      	mov	r0, sp
 800cd94:	f000 faaa 	bl	800d2ec <__ieee754_rem_pio2f>
 800cd98:	f000 0003 	and.w	r0, r0, #3
 800cd9c:	2801      	cmp	r0, #1
 800cd9e:	d007      	beq.n	800cdb0 <cosf+0x48>
 800cda0:	2802      	cmp	r0, #2
 800cda2:	d00e      	beq.n	800cdc2 <cosf+0x5a>
 800cda4:	b9a0      	cbnz	r0, 800cdd0 <cosf+0x68>
 800cda6:	eddd 0a01 	vldr	s1, [sp, #4]
 800cdaa:	ed9d 0a00 	vldr	s0, [sp]
 800cdae:	e7e5      	b.n	800cd7c <cosf+0x14>
 800cdb0:	eddd 0a01 	vldr	s1, [sp, #4]
 800cdb4:	ed9d 0a00 	vldr	s0, [sp]
 800cdb8:	f000 fea8 	bl	800db0c <__kernel_sinf>
 800cdbc:	eeb1 0a40 	vneg.f32	s0, s0
 800cdc0:	e7e4      	b.n	800cd8c <cosf+0x24>
 800cdc2:	eddd 0a01 	vldr	s1, [sp, #4]
 800cdc6:	ed9d 0a00 	vldr	s0, [sp]
 800cdca:	f000 fbbf 	bl	800d54c <__kernel_cosf>
 800cdce:	e7f5      	b.n	800cdbc <cosf+0x54>
 800cdd0:	2001      	movs	r0, #1
 800cdd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800cdd6:	ed9d 0a00 	vldr	s0, [sp]
 800cdda:	f000 fe97 	bl	800db0c <__kernel_sinf>
 800cdde:	e7d5      	b.n	800cd8c <cosf+0x24>
 800cde0:	3f490fd8 	.word	0x3f490fd8
 800cde4:	00000000 	.word	0x00000000

0800cde8 <log>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	ed2d 8b02 	vpush	{d8}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	ec55 4b10 	vmov	r4, r5, d0
 800cdf4:	f000 f8c8 	bl	800cf88 <__ieee754_log>
 800cdf8:	4b36      	ldr	r3, [pc, #216]	; (800ced4 <log+0xec>)
 800cdfa:	eeb0 8a40 	vmov.f32	s16, s0
 800cdfe:	eef0 8a60 	vmov.f32	s17, s1
 800ce02:	f993 6000 	ldrsb.w	r6, [r3]
 800ce06:	1c73      	adds	r3, r6, #1
 800ce08:	d05b      	beq.n	800cec2 <log+0xda>
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	462b      	mov	r3, r5
 800ce0e:	4620      	mov	r0, r4
 800ce10:	4629      	mov	r1, r5
 800ce12:	f7f3 feab 	bl	8000b6c <__aeabi_dcmpun>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	d153      	bne.n	800cec2 <log+0xda>
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fe99 	bl	8000b58 <__aeabi_dcmpgt>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	d14b      	bne.n	800cec2 <log+0xda>
 800ce2a:	4b2b      	ldr	r3, [pc, #172]	; (800ced8 <log+0xf0>)
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	9008      	str	r0, [sp, #32]
 800ce30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ce34:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ce38:	b9a6      	cbnz	r6, 800ce64 <log+0x7c>
 800ce3a:	4b28      	ldr	r3, [pc, #160]	; (800cedc <log+0xf4>)
 800ce3c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ce40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce44:	4620      	mov	r0, r4
 800ce46:	2200      	movs	r2, #0
 800ce48:	2300      	movs	r3, #0
 800ce4a:	4629      	mov	r1, r5
 800ce4c:	f7f3 fe5c 	bl	8000b08 <__aeabi_dcmpeq>
 800ce50:	bb40      	cbnz	r0, 800cea4 <log+0xbc>
 800ce52:	2301      	movs	r3, #1
 800ce54:	2e02      	cmp	r6, #2
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	d119      	bne.n	800ce8e <log+0xa6>
 800ce5a:	f7ff fe6f 	bl	800cb3c <__errno>
 800ce5e:	2321      	movs	r3, #33	; 0x21
 800ce60:	6003      	str	r3, [r0, #0]
 800ce62:	e019      	b.n	800ce98 <log+0xb0>
 800ce64:	4b1e      	ldr	r3, [pc, #120]	; (800cee0 <log+0xf8>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ce6c:	4620      	mov	r0, r4
 800ce6e:	2200      	movs	r2, #0
 800ce70:	2300      	movs	r3, #0
 800ce72:	4629      	mov	r1, r5
 800ce74:	f7f3 fe48 	bl	8000b08 <__aeabi_dcmpeq>
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d0ea      	beq.n	800ce52 <log+0x6a>
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	429e      	cmp	r6, r3
 800ce80:	9300      	str	r3, [sp, #0]
 800ce82:	d111      	bne.n	800cea8 <log+0xc0>
 800ce84:	f7ff fe5a 	bl	800cb3c <__errno>
 800ce88:	2322      	movs	r3, #34	; 0x22
 800ce8a:	6003      	str	r3, [r0, #0]
 800ce8c:	e011      	b.n	800ceb2 <log+0xca>
 800ce8e:	4668      	mov	r0, sp
 800ce90:	f000 fe84 	bl	800db9c <matherr>
 800ce94:	2800      	cmp	r0, #0
 800ce96:	d0e0      	beq.n	800ce5a <log+0x72>
 800ce98:	4812      	ldr	r0, [pc, #72]	; (800cee4 <log+0xfc>)
 800ce9a:	f000 fe81 	bl	800dba0 <nan>
 800ce9e:	ed8d 0b06 	vstr	d0, [sp, #24]
 800cea2:	e006      	b.n	800ceb2 <log+0xca>
 800cea4:	2302      	movs	r3, #2
 800cea6:	9300      	str	r3, [sp, #0]
 800cea8:	4668      	mov	r0, sp
 800ceaa:	f000 fe77 	bl	800db9c <matherr>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	d0e8      	beq.n	800ce84 <log+0x9c>
 800ceb2:	9b08      	ldr	r3, [sp, #32]
 800ceb4:	b11b      	cbz	r3, 800cebe <log+0xd6>
 800ceb6:	f7ff fe41 	bl	800cb3c <__errno>
 800ceba:	9b08      	ldr	r3, [sp, #32]
 800cebc:	6003      	str	r3, [r0, #0]
 800cebe:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cec2:	eeb0 0a48 	vmov.f32	s0, s16
 800cec6:	eef0 0a68 	vmov.f32	s1, s17
 800ceca:	b00a      	add	sp, #40	; 0x28
 800cecc:	ecbd 8b02 	vpop	{d8}
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	bf00      	nop
 800ced4:	200001f4 	.word	0x200001f4
 800ced8:	080212a8 	.word	0x080212a8
 800cedc:	c7efffff 	.word	0xc7efffff
 800cee0:	fff00000 	.word	0xfff00000
 800cee4:	080212b1 	.word	0x080212b1

0800cee8 <sqrtf>:
 800cee8:	b510      	push	{r4, lr}
 800ceea:	ed2d 8b02 	vpush	{d8}
 800ceee:	b08a      	sub	sp, #40	; 0x28
 800cef0:	eeb0 8a40 	vmov.f32	s16, s0
 800cef4:	f000 fb26 	bl	800d544 <__ieee754_sqrtf>
 800cef8:	4b21      	ldr	r3, [pc, #132]	; (800cf80 <sqrtf+0x98>)
 800cefa:	f993 4000 	ldrsb.w	r4, [r3]
 800cefe:	1c63      	adds	r3, r4, #1
 800cf00:	d02c      	beq.n	800cf5c <sqrtf+0x74>
 800cf02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cf06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0a:	d627      	bvs.n	800cf5c <sqrtf+0x74>
 800cf0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cf10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf14:	d522      	bpl.n	800cf5c <sqrtf+0x74>
 800cf16:	2301      	movs	r3, #1
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	4b1a      	ldr	r3, [pc, #104]	; (800cf84 <sqrtf+0x9c>)
 800cf1c:	9301      	str	r3, [sp, #4]
 800cf1e:	ee18 0a10 	vmov	r0, s16
 800cf22:	2300      	movs	r3, #0
 800cf24:	9308      	str	r3, [sp, #32]
 800cf26:	f7f3 fb2f 	bl	8000588 <__aeabi_f2d>
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf34:	2300      	movs	r3, #0
 800cf36:	b9ac      	cbnz	r4, 800cf64 <sqrtf+0x7c>
 800cf38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cf3c:	4668      	mov	r0, sp
 800cf3e:	f000 fe2d 	bl	800db9c <matherr>
 800cf42:	b1b8      	cbz	r0, 800cf74 <sqrtf+0x8c>
 800cf44:	9b08      	ldr	r3, [sp, #32]
 800cf46:	b11b      	cbz	r3, 800cf50 <sqrtf+0x68>
 800cf48:	f7ff fdf8 	bl	800cb3c <__errno>
 800cf4c:	9b08      	ldr	r3, [sp, #32]
 800cf4e:	6003      	str	r3, [r0, #0]
 800cf50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cf54:	f7f3 fe48 	bl	8000be8 <__aeabi_d2f>
 800cf58:	ee00 0a10 	vmov	s0, r0
 800cf5c:	b00a      	add	sp, #40	; 0x28
 800cf5e:	ecbd 8b02 	vpop	{d8}
 800cf62:	bd10      	pop	{r4, pc}
 800cf64:	4610      	mov	r0, r2
 800cf66:	4619      	mov	r1, r3
 800cf68:	f7f3 fc90 	bl	800088c <__aeabi_ddiv>
 800cf6c:	2c02      	cmp	r4, #2
 800cf6e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cf72:	d1e3      	bne.n	800cf3c <sqrtf+0x54>
 800cf74:	f7ff fde2 	bl	800cb3c <__errno>
 800cf78:	2321      	movs	r3, #33	; 0x21
 800cf7a:	6003      	str	r3, [r0, #0]
 800cf7c:	e7e2      	b.n	800cf44 <sqrtf+0x5c>
 800cf7e:	bf00      	nop
 800cf80:	200001f4 	.word	0x200001f4
 800cf84:	080212ac 	.word	0x080212ac

0800cf88 <__ieee754_log>:
 800cf88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf8c:	ec51 0b10 	vmov	r0, r1, d0
 800cf90:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cf94:	b087      	sub	sp, #28
 800cf96:	460d      	mov	r5, r1
 800cf98:	da27      	bge.n	800cfea <__ieee754_log+0x62>
 800cf9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cf9e:	4303      	orrs	r3, r0
 800cfa0:	ee10 2a10 	vmov	r2, s0
 800cfa4:	d10a      	bne.n	800cfbc <__ieee754_log+0x34>
 800cfa6:	49cc      	ldr	r1, [pc, #816]	; (800d2d8 <__ieee754_log+0x350>)
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2000      	movs	r0, #0
 800cfae:	f7f3 fc6d 	bl	800088c <__aeabi_ddiv>
 800cfb2:	ec41 0b10 	vmov	d0, r0, r1
 800cfb6:	b007      	add	sp, #28
 800cfb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfbc:	2900      	cmp	r1, #0
 800cfbe:	da05      	bge.n	800cfcc <__ieee754_log+0x44>
 800cfc0:	460b      	mov	r3, r1
 800cfc2:	f7f3 f981 	bl	80002c8 <__aeabi_dsub>
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e7f0      	b.n	800cfae <__ieee754_log+0x26>
 800cfcc:	4bc3      	ldr	r3, [pc, #780]	; (800d2dc <__ieee754_log+0x354>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	f7f3 fb32 	bl	8000638 <__aeabi_dmul>
 800cfd4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cfd8:	460d      	mov	r5, r1
 800cfda:	4ac1      	ldr	r2, [pc, #772]	; (800d2e0 <__ieee754_log+0x358>)
 800cfdc:	4295      	cmp	r5, r2
 800cfde:	dd06      	ble.n	800cfee <__ieee754_log+0x66>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	f7f3 f972 	bl	80002cc <__adddf3>
 800cfe8:	e7e3      	b.n	800cfb2 <__ieee754_log+0x2a>
 800cfea:	2300      	movs	r3, #0
 800cfec:	e7f5      	b.n	800cfda <__ieee754_log+0x52>
 800cfee:	152c      	asrs	r4, r5, #20
 800cff0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cff4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cff8:	441c      	add	r4, r3
 800cffa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cffe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d006:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d00a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d00e:	ea42 0105 	orr.w	r1, r2, r5
 800d012:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d016:	2200      	movs	r2, #0
 800d018:	4bb2      	ldr	r3, [pc, #712]	; (800d2e4 <__ieee754_log+0x35c>)
 800d01a:	f7f3 f955 	bl	80002c8 <__aeabi_dsub>
 800d01e:	1cab      	adds	r3, r5, #2
 800d020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d024:	2b02      	cmp	r3, #2
 800d026:	4682      	mov	sl, r0
 800d028:	468b      	mov	fp, r1
 800d02a:	f04f 0200 	mov.w	r2, #0
 800d02e:	dc53      	bgt.n	800d0d8 <__ieee754_log+0x150>
 800d030:	2300      	movs	r3, #0
 800d032:	f7f3 fd69 	bl	8000b08 <__aeabi_dcmpeq>
 800d036:	b1d0      	cbz	r0, 800d06e <__ieee754_log+0xe6>
 800d038:	2c00      	cmp	r4, #0
 800d03a:	f000 8120 	beq.w	800d27e <__ieee754_log+0x2f6>
 800d03e:	4620      	mov	r0, r4
 800d040:	f7f3 fa90 	bl	8000564 <__aeabi_i2d>
 800d044:	a390      	add	r3, pc, #576	; (adr r3, 800d288 <__ieee754_log+0x300>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	4606      	mov	r6, r0
 800d04c:	460f      	mov	r7, r1
 800d04e:	f7f3 faf3 	bl	8000638 <__aeabi_dmul>
 800d052:	a38f      	add	r3, pc, #572	; (adr r3, 800d290 <__ieee754_log+0x308>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	4604      	mov	r4, r0
 800d05a:	460d      	mov	r5, r1
 800d05c:	4630      	mov	r0, r6
 800d05e:	4639      	mov	r1, r7
 800d060:	f7f3 faea 	bl	8000638 <__aeabi_dmul>
 800d064:	4602      	mov	r2, r0
 800d066:	460b      	mov	r3, r1
 800d068:	4620      	mov	r0, r4
 800d06a:	4629      	mov	r1, r5
 800d06c:	e7ba      	b.n	800cfe4 <__ieee754_log+0x5c>
 800d06e:	a38a      	add	r3, pc, #552	; (adr r3, 800d298 <__ieee754_log+0x310>)
 800d070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d074:	4650      	mov	r0, sl
 800d076:	4659      	mov	r1, fp
 800d078:	f7f3 fade 	bl	8000638 <__aeabi_dmul>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	2000      	movs	r0, #0
 800d082:	4999      	ldr	r1, [pc, #612]	; (800d2e8 <__ieee754_log+0x360>)
 800d084:	f7f3 f920 	bl	80002c8 <__aeabi_dsub>
 800d088:	4652      	mov	r2, sl
 800d08a:	4606      	mov	r6, r0
 800d08c:	460f      	mov	r7, r1
 800d08e:	465b      	mov	r3, fp
 800d090:	4650      	mov	r0, sl
 800d092:	4659      	mov	r1, fp
 800d094:	f7f3 fad0 	bl	8000638 <__aeabi_dmul>
 800d098:	4602      	mov	r2, r0
 800d09a:	460b      	mov	r3, r1
 800d09c:	4630      	mov	r0, r6
 800d09e:	4639      	mov	r1, r7
 800d0a0:	f7f3 faca 	bl	8000638 <__aeabi_dmul>
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	460f      	mov	r7, r1
 800d0a8:	b914      	cbnz	r4, 800d0b0 <__ieee754_log+0x128>
 800d0aa:	4632      	mov	r2, r6
 800d0ac:	463b      	mov	r3, r7
 800d0ae:	e0a0      	b.n	800d1f2 <__ieee754_log+0x26a>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f7f3 fa57 	bl	8000564 <__aeabi_i2d>
 800d0b6:	a374      	add	r3, pc, #464	; (adr r3, 800d288 <__ieee754_log+0x300>)
 800d0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0bc:	4680      	mov	r8, r0
 800d0be:	4689      	mov	r9, r1
 800d0c0:	f7f3 faba 	bl	8000638 <__aeabi_dmul>
 800d0c4:	a372      	add	r3, pc, #456	; (adr r3, 800d290 <__ieee754_log+0x308>)
 800d0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	460d      	mov	r5, r1
 800d0ce:	4640      	mov	r0, r8
 800d0d0:	4649      	mov	r1, r9
 800d0d2:	f7f3 fab1 	bl	8000638 <__aeabi_dmul>
 800d0d6:	e0a5      	b.n	800d224 <__ieee754_log+0x29c>
 800d0d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0dc:	f7f3 f8f6 	bl	80002cc <__adddf3>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	f7f3 fbd0 	bl	800088c <__aeabi_ddiv>
 800d0ec:	e9cd 0100 	strd	r0, r1, [sp]
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f7f3 fa37 	bl	8000564 <__aeabi_i2d>
 800d0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0fe:	4610      	mov	r0, r2
 800d100:	4619      	mov	r1, r3
 800d102:	f7f3 fa99 	bl	8000638 <__aeabi_dmul>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d10e:	f7f3 fa93 	bl	8000638 <__aeabi_dmul>
 800d112:	a363      	add	r3, pc, #396	; (adr r3, 800d2a0 <__ieee754_log+0x318>)
 800d114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d118:	4680      	mov	r8, r0
 800d11a:	4689      	mov	r9, r1
 800d11c:	f7f3 fa8c 	bl	8000638 <__aeabi_dmul>
 800d120:	a361      	add	r3, pc, #388	; (adr r3, 800d2a8 <__ieee754_log+0x320>)
 800d122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d126:	f7f3 f8d1 	bl	80002cc <__adddf3>
 800d12a:	4642      	mov	r2, r8
 800d12c:	464b      	mov	r3, r9
 800d12e:	f7f3 fa83 	bl	8000638 <__aeabi_dmul>
 800d132:	a35f      	add	r3, pc, #380	; (adr r3, 800d2b0 <__ieee754_log+0x328>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 f8c8 	bl	80002cc <__adddf3>
 800d13c:	4642      	mov	r2, r8
 800d13e:	464b      	mov	r3, r9
 800d140:	f7f3 fa7a 	bl	8000638 <__aeabi_dmul>
 800d144:	a35c      	add	r3, pc, #368	; (adr r3, 800d2b8 <__ieee754_log+0x330>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 f8bf 	bl	80002cc <__adddf3>
 800d14e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d152:	f7f3 fa71 	bl	8000638 <__aeabi_dmul>
 800d156:	a35a      	add	r3, pc, #360	; (adr r3, 800d2c0 <__ieee754_log+0x338>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d160:	4640      	mov	r0, r8
 800d162:	4649      	mov	r1, r9
 800d164:	f7f3 fa68 	bl	8000638 <__aeabi_dmul>
 800d168:	a357      	add	r3, pc, #348	; (adr r3, 800d2c8 <__ieee754_log+0x340>)
 800d16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16e:	f7f3 f8ad 	bl	80002cc <__adddf3>
 800d172:	4642      	mov	r2, r8
 800d174:	464b      	mov	r3, r9
 800d176:	f7f3 fa5f 	bl	8000638 <__aeabi_dmul>
 800d17a:	a355      	add	r3, pc, #340	; (adr r3, 800d2d0 <__ieee754_log+0x348>)
 800d17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d180:	f7f3 f8a4 	bl	80002cc <__adddf3>
 800d184:	4642      	mov	r2, r8
 800d186:	464b      	mov	r3, r9
 800d188:	f7f3 fa56 	bl	8000638 <__aeabi_dmul>
 800d18c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800d190:	4602      	mov	r2, r0
 800d192:	460b      	mov	r3, r1
 800d194:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d198:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d19c:	f7f3 f896 	bl	80002cc <__adddf3>
 800d1a0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800d1a4:	3551      	adds	r5, #81	; 0x51
 800d1a6:	4335      	orrs	r5, r6
 800d1a8:	2d00      	cmp	r5, #0
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	4689      	mov	r9, r1
 800d1ae:	dd48      	ble.n	800d242 <__ieee754_log+0x2ba>
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	4b4d      	ldr	r3, [pc, #308]	; (800d2e8 <__ieee754_log+0x360>)
 800d1b4:	4650      	mov	r0, sl
 800d1b6:	4659      	mov	r1, fp
 800d1b8:	f7f3 fa3e 	bl	8000638 <__aeabi_dmul>
 800d1bc:	4652      	mov	r2, sl
 800d1be:	465b      	mov	r3, fp
 800d1c0:	f7f3 fa3a 	bl	8000638 <__aeabi_dmul>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4606      	mov	r6, r0
 800d1ca:	460f      	mov	r7, r1
 800d1cc:	4640      	mov	r0, r8
 800d1ce:	4649      	mov	r1, r9
 800d1d0:	f7f3 f87c 	bl	80002cc <__adddf3>
 800d1d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1d8:	f7f3 fa2e 	bl	8000638 <__aeabi_dmul>
 800d1dc:	4680      	mov	r8, r0
 800d1de:	4689      	mov	r9, r1
 800d1e0:	b964      	cbnz	r4, 800d1fc <__ieee754_log+0x274>
 800d1e2:	4602      	mov	r2, r0
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	f7f3 f86d 	bl	80002c8 <__aeabi_dsub>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	4650      	mov	r0, sl
 800d1f4:	4659      	mov	r1, fp
 800d1f6:	f7f3 f867 	bl	80002c8 <__aeabi_dsub>
 800d1fa:	e6da      	b.n	800cfb2 <__ieee754_log+0x2a>
 800d1fc:	a322      	add	r3, pc, #136	; (adr r3, 800d288 <__ieee754_log+0x300>)
 800d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d206:	f7f3 fa17 	bl	8000638 <__aeabi_dmul>
 800d20a:	a321      	add	r3, pc, #132	; (adr r3, 800d290 <__ieee754_log+0x308>)
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	4604      	mov	r4, r0
 800d212:	460d      	mov	r5, r1
 800d214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d218:	f7f3 fa0e 	bl	8000638 <__aeabi_dmul>
 800d21c:	4642      	mov	r2, r8
 800d21e:	464b      	mov	r3, r9
 800d220:	f7f3 f854 	bl	80002cc <__adddf3>
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	4630      	mov	r0, r6
 800d22a:	4639      	mov	r1, r7
 800d22c:	f7f3 f84c 	bl	80002c8 <__aeabi_dsub>
 800d230:	4652      	mov	r2, sl
 800d232:	465b      	mov	r3, fp
 800d234:	f7f3 f848 	bl	80002c8 <__aeabi_dsub>
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	4620      	mov	r0, r4
 800d23e:	4629      	mov	r1, r5
 800d240:	e7d9      	b.n	800d1f6 <__ieee754_log+0x26e>
 800d242:	4602      	mov	r2, r0
 800d244:	460b      	mov	r3, r1
 800d246:	4650      	mov	r0, sl
 800d248:	4659      	mov	r1, fp
 800d24a:	f7f3 f83d 	bl	80002c8 <__aeabi_dsub>
 800d24e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d252:	f7f3 f9f1 	bl	8000638 <__aeabi_dmul>
 800d256:	4606      	mov	r6, r0
 800d258:	460f      	mov	r7, r1
 800d25a:	2c00      	cmp	r4, #0
 800d25c:	f43f af25 	beq.w	800d0aa <__ieee754_log+0x122>
 800d260:	a309      	add	r3, pc, #36	; (adr r3, 800d288 <__ieee754_log+0x300>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d26a:	f7f3 f9e5 	bl	8000638 <__aeabi_dmul>
 800d26e:	a308      	add	r3, pc, #32	; (adr r3, 800d290 <__ieee754_log+0x308>)
 800d270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d274:	4604      	mov	r4, r0
 800d276:	460d      	mov	r5, r1
 800d278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d27c:	e729      	b.n	800d0d2 <__ieee754_log+0x14a>
 800d27e:	2000      	movs	r0, #0
 800d280:	2100      	movs	r1, #0
 800d282:	e696      	b.n	800cfb2 <__ieee754_log+0x2a>
 800d284:	f3af 8000 	nop.w
 800d288:	fee00000 	.word	0xfee00000
 800d28c:	3fe62e42 	.word	0x3fe62e42
 800d290:	35793c76 	.word	0x35793c76
 800d294:	3dea39ef 	.word	0x3dea39ef
 800d298:	55555555 	.word	0x55555555
 800d29c:	3fd55555 	.word	0x3fd55555
 800d2a0:	df3e5244 	.word	0xdf3e5244
 800d2a4:	3fc2f112 	.word	0x3fc2f112
 800d2a8:	96cb03de 	.word	0x96cb03de
 800d2ac:	3fc74664 	.word	0x3fc74664
 800d2b0:	94229359 	.word	0x94229359
 800d2b4:	3fd24924 	.word	0x3fd24924
 800d2b8:	55555593 	.word	0x55555593
 800d2bc:	3fe55555 	.word	0x3fe55555
 800d2c0:	d078c69f 	.word	0xd078c69f
 800d2c4:	3fc39a09 	.word	0x3fc39a09
 800d2c8:	1d8e78af 	.word	0x1d8e78af
 800d2cc:	3fcc71c5 	.word	0x3fcc71c5
 800d2d0:	9997fa04 	.word	0x9997fa04
 800d2d4:	3fd99999 	.word	0x3fd99999
 800d2d8:	c3500000 	.word	0xc3500000
 800d2dc:	43500000 	.word	0x43500000
 800d2e0:	7fefffff 	.word	0x7fefffff
 800d2e4:	3ff00000 	.word	0x3ff00000
 800d2e8:	3fe00000 	.word	0x3fe00000

0800d2ec <__ieee754_rem_pio2f>:
 800d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ee:	ee10 6a10 	vmov	r6, s0
 800d2f2:	4b86      	ldr	r3, [pc, #536]	; (800d50c <__ieee754_rem_pio2f+0x220>)
 800d2f4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800d2f8:	429c      	cmp	r4, r3
 800d2fa:	b087      	sub	sp, #28
 800d2fc:	4605      	mov	r5, r0
 800d2fe:	dc05      	bgt.n	800d30c <__ieee754_rem_pio2f+0x20>
 800d300:	2300      	movs	r3, #0
 800d302:	ed85 0a00 	vstr	s0, [r5]
 800d306:	6043      	str	r3, [r0, #4]
 800d308:	2000      	movs	r0, #0
 800d30a:	e020      	b.n	800d34e <__ieee754_rem_pio2f+0x62>
 800d30c:	4b80      	ldr	r3, [pc, #512]	; (800d510 <__ieee754_rem_pio2f+0x224>)
 800d30e:	429c      	cmp	r4, r3
 800d310:	dc38      	bgt.n	800d384 <__ieee754_rem_pio2f+0x98>
 800d312:	2e00      	cmp	r6, #0
 800d314:	f024 040f 	bic.w	r4, r4, #15
 800d318:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800d514 <__ieee754_rem_pio2f+0x228>
 800d31c:	4b7e      	ldr	r3, [pc, #504]	; (800d518 <__ieee754_rem_pio2f+0x22c>)
 800d31e:	dd18      	ble.n	800d352 <__ieee754_rem_pio2f+0x66>
 800d320:	429c      	cmp	r4, r3
 800d322:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d326:	bf09      	itett	eq
 800d328:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800d51c <__ieee754_rem_pio2f+0x230>
 800d32c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800d520 <__ieee754_rem_pio2f+0x234>
 800d330:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d334:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800d524 <__ieee754_rem_pio2f+0x238>
 800d338:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d33c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d340:	edc0 6a00 	vstr	s13, [r0]
 800d344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d348:	edc0 7a01 	vstr	s15, [r0, #4]
 800d34c:	2001      	movs	r0, #1
 800d34e:	b007      	add	sp, #28
 800d350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d352:	429c      	cmp	r4, r3
 800d354:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d358:	bf09      	itett	eq
 800d35a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800d51c <__ieee754_rem_pio2f+0x230>
 800d35e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800d520 <__ieee754_rem_pio2f+0x234>
 800d362:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d366:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800d524 <__ieee754_rem_pio2f+0x238>
 800d36a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d36e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d372:	edc0 6a00 	vstr	s13, [r0]
 800d376:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d37a:	edc0 7a01 	vstr	s15, [r0, #4]
 800d37e:	f04f 30ff 	mov.w	r0, #4294967295
 800d382:	e7e4      	b.n	800d34e <__ieee754_rem_pio2f+0x62>
 800d384:	4b68      	ldr	r3, [pc, #416]	; (800d528 <__ieee754_rem_pio2f+0x23c>)
 800d386:	429c      	cmp	r4, r3
 800d388:	dc71      	bgt.n	800d46e <__ieee754_rem_pio2f+0x182>
 800d38a:	f000 fc11 	bl	800dbb0 <fabsf>
 800d38e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d52c <__ieee754_rem_pio2f+0x240>
 800d392:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d396:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d39a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d39e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d3a2:	ee17 0a90 	vmov	r0, s15
 800d3a6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d514 <__ieee754_rem_pio2f+0x228>
 800d3aa:	eeb1 7a46 	vneg.f32	s14, s12
 800d3ae:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d3b2:	281f      	cmp	r0, #31
 800d3b4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d520 <__ieee754_rem_pio2f+0x234>
 800d3b8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d3bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d3c0:	ee16 3a90 	vmov	r3, s13
 800d3c4:	dc1c      	bgt.n	800d400 <__ieee754_rem_pio2f+0x114>
 800d3c6:	1e47      	subs	r7, r0, #1
 800d3c8:	4959      	ldr	r1, [pc, #356]	; (800d530 <__ieee754_rem_pio2f+0x244>)
 800d3ca:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d3ce:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d3d2:	428a      	cmp	r2, r1
 800d3d4:	d014      	beq.n	800d400 <__ieee754_rem_pio2f+0x114>
 800d3d6:	602b      	str	r3, [r5, #0]
 800d3d8:	ed95 7a00 	vldr	s14, [r5]
 800d3dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d3e0:	2e00      	cmp	r6, #0
 800d3e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d3e6:	ed85 0a01 	vstr	s0, [r5, #4]
 800d3ea:	dab0      	bge.n	800d34e <__ieee754_rem_pio2f+0x62>
 800d3ec:	eeb1 7a47 	vneg.f32	s14, s14
 800d3f0:	eeb1 0a40 	vneg.f32	s0, s0
 800d3f4:	ed85 7a00 	vstr	s14, [r5]
 800d3f8:	ed85 0a01 	vstr	s0, [r5, #4]
 800d3fc:	4240      	negs	r0, r0
 800d3fe:	e7a6      	b.n	800d34e <__ieee754_rem_pio2f+0x62>
 800d400:	15e4      	asrs	r4, r4, #23
 800d402:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d406:	1aa2      	subs	r2, r4, r2
 800d408:	2a08      	cmp	r2, #8
 800d40a:	dde4      	ble.n	800d3d6 <__ieee754_rem_pio2f+0xea>
 800d40c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d51c <__ieee754_rem_pio2f+0x230>
 800d410:	eef0 6a40 	vmov.f32	s13, s0
 800d414:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d418:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d41c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d420:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d524 <__ieee754_rem_pio2f+0x238>
 800d424:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800d428:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d42c:	eef0 7a40 	vmov.f32	s15, s0
 800d430:	ee15 3a90 	vmov	r3, s11
 800d434:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d438:	1aa4      	subs	r4, r4, r2
 800d43a:	2c19      	cmp	r4, #25
 800d43c:	dc04      	bgt.n	800d448 <__ieee754_rem_pio2f+0x15c>
 800d43e:	edc5 5a00 	vstr	s11, [r5]
 800d442:	eeb0 0a66 	vmov.f32	s0, s13
 800d446:	e7c7      	b.n	800d3d8 <__ieee754_rem_pio2f+0xec>
 800d448:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d534 <__ieee754_rem_pio2f+0x248>
 800d44c:	eeb0 0a66 	vmov.f32	s0, s13
 800d450:	eea7 0a25 	vfma.f32	s0, s14, s11
 800d454:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d458:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d45c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d538 <__ieee754_rem_pio2f+0x24c>
 800d460:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800d464:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d468:	ed85 7a00 	vstr	s14, [r5]
 800d46c:	e7b4      	b.n	800d3d8 <__ieee754_rem_pio2f+0xec>
 800d46e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d472:	db06      	blt.n	800d482 <__ieee754_rem_pio2f+0x196>
 800d474:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d478:	edc0 7a01 	vstr	s15, [r0, #4]
 800d47c:	edc0 7a00 	vstr	s15, [r0]
 800d480:	e742      	b.n	800d308 <__ieee754_rem_pio2f+0x1c>
 800d482:	15e2      	asrs	r2, r4, #23
 800d484:	3a86      	subs	r2, #134	; 0x86
 800d486:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800d48a:	ee07 3a90 	vmov	s15, r3
 800d48e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d492:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d53c <__ieee754_rem_pio2f+0x250>
 800d496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d49e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d4a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d4aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d4ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d4b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d4b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d4ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4c2:	edcd 7a05 	vstr	s15, [sp, #20]
 800d4c6:	d11e      	bne.n	800d506 <__ieee754_rem_pio2f+0x21a>
 800d4c8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d0:	bf0c      	ite	eq
 800d4d2:	2301      	moveq	r3, #1
 800d4d4:	2302      	movne	r3, #2
 800d4d6:	491a      	ldr	r1, [pc, #104]	; (800d540 <__ieee754_rem_pio2f+0x254>)
 800d4d8:	9101      	str	r1, [sp, #4]
 800d4da:	2102      	movs	r1, #2
 800d4dc:	9100      	str	r1, [sp, #0]
 800d4de:	a803      	add	r0, sp, #12
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f000 f891 	bl	800d608 <__kernel_rem_pio2f>
 800d4e6:	2e00      	cmp	r6, #0
 800d4e8:	f6bf af31 	bge.w	800d34e <__ieee754_rem_pio2f+0x62>
 800d4ec:	edd5 7a00 	vldr	s15, [r5]
 800d4f0:	eef1 7a67 	vneg.f32	s15, s15
 800d4f4:	edc5 7a00 	vstr	s15, [r5]
 800d4f8:	edd5 7a01 	vldr	s15, [r5, #4]
 800d4fc:	eef1 7a67 	vneg.f32	s15, s15
 800d500:	edc5 7a01 	vstr	s15, [r5, #4]
 800d504:	e77a      	b.n	800d3fc <__ieee754_rem_pio2f+0x110>
 800d506:	2303      	movs	r3, #3
 800d508:	e7e5      	b.n	800d4d6 <__ieee754_rem_pio2f+0x1ea>
 800d50a:	bf00      	nop
 800d50c:	3f490fd8 	.word	0x3f490fd8
 800d510:	4016cbe3 	.word	0x4016cbe3
 800d514:	3fc90f80 	.word	0x3fc90f80
 800d518:	3fc90fd0 	.word	0x3fc90fd0
 800d51c:	37354400 	.word	0x37354400
 800d520:	37354443 	.word	0x37354443
 800d524:	2e85a308 	.word	0x2e85a308
 800d528:	43490f80 	.word	0x43490f80
 800d52c:	3f22f984 	.word	0x3f22f984
 800d530:	080212b4 	.word	0x080212b4
 800d534:	2e85a300 	.word	0x2e85a300
 800d538:	248d3132 	.word	0x248d3132
 800d53c:	43800000 	.word	0x43800000
 800d540:	08021334 	.word	0x08021334

0800d544 <__ieee754_sqrtf>:
 800d544:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d548:	4770      	bx	lr
	...

0800d54c <__kernel_cosf>:
 800d54c:	ee10 3a10 	vmov	r3, s0
 800d550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d554:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d558:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d55c:	da05      	bge.n	800d56a <__kernel_cosf+0x1e>
 800d55e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d562:	ee17 2a90 	vmov	r2, s15
 800d566:	2a00      	cmp	r2, #0
 800d568:	d03b      	beq.n	800d5e2 <__kernel_cosf+0x96>
 800d56a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d56e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d572:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d5e8 <__kernel_cosf+0x9c>
 800d576:	4a1d      	ldr	r2, [pc, #116]	; (800d5ec <__kernel_cosf+0xa0>)
 800d578:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d57c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d5f0 <__kernel_cosf+0xa4>
 800d580:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d584:	4293      	cmp	r3, r2
 800d586:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d5f4 <__kernel_cosf+0xa8>
 800d58a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d58e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d5f8 <__kernel_cosf+0xac>
 800d592:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d596:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d5fc <__kernel_cosf+0xb0>
 800d59a:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d59e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d600 <__kernel_cosf+0xb4>
 800d5a2:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d5a6:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d5aa:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d5ae:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d5b2:	dc04      	bgt.n	800d5be <__kernel_cosf+0x72>
 800d5b4:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d5b8:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d5bc:	4770      	bx	lr
 800d5be:	4a11      	ldr	r2, [pc, #68]	; (800d604 <__kernel_cosf+0xb8>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	bfda      	itte	le
 800d5c4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d5c8:	ee07 3a10 	vmovle	s14, r3
 800d5cc:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d5d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5d4:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d5d8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d5dc:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d5e0:	4770      	bx	lr
 800d5e2:	eeb0 0a66 	vmov.f32	s0, s13
 800d5e6:	4770      	bx	lr
 800d5e8:	ad47d74e 	.word	0xad47d74e
 800d5ec:	3e999999 	.word	0x3e999999
 800d5f0:	310f74f6 	.word	0x310f74f6
 800d5f4:	b493f27c 	.word	0xb493f27c
 800d5f8:	37d00d01 	.word	0x37d00d01
 800d5fc:	bab60b61 	.word	0xbab60b61
 800d600:	3d2aaaab 	.word	0x3d2aaaab
 800d604:	3f480000 	.word	0x3f480000

0800d608 <__kernel_rem_pio2f>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	ed2d 8b04 	vpush	{d8-d9}
 800d610:	b0d7      	sub	sp, #348	; 0x15c
 800d612:	469b      	mov	fp, r3
 800d614:	460e      	mov	r6, r1
 800d616:	4bbe      	ldr	r3, [pc, #760]	; (800d910 <__kernel_rem_pio2f+0x308>)
 800d618:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d61a:	9002      	str	r0, [sp, #8]
 800d61c:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d620:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d622:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d920 <__kernel_rem_pio2f+0x318>
 800d626:	1ed1      	subs	r1, r2, #3
 800d628:	2308      	movs	r3, #8
 800d62a:	fb91 f1f3 	sdiv	r1, r1, r3
 800d62e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d632:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d636:	1c4c      	adds	r4, r1, #1
 800d638:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d63c:	eba1 050a 	sub.w	r5, r1, sl
 800d640:	aa1a      	add	r2, sp, #104	; 0x68
 800d642:	eb09 070a 	add.w	r7, r9, sl
 800d646:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d64a:	4696      	mov	lr, r2
 800d64c:	2300      	movs	r3, #0
 800d64e:	42bb      	cmp	r3, r7
 800d650:	dd0f      	ble.n	800d672 <__kernel_rem_pio2f+0x6a>
 800d652:	af42      	add	r7, sp, #264	; 0x108
 800d654:	2200      	movs	r2, #0
 800d656:	454a      	cmp	r2, r9
 800d658:	dc27      	bgt.n	800d6aa <__kernel_rem_pio2f+0xa2>
 800d65a:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d65e:	eb0b 0302 	add.w	r3, fp, r2
 800d662:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d666:	9d02      	ldr	r5, [sp, #8]
 800d668:	eddf 7aad 	vldr	s15, [pc, #692]	; 800d920 <__kernel_rem_pio2f+0x318>
 800d66c:	f04f 0c00 	mov.w	ip, #0
 800d670:	e015      	b.n	800d69e <__kernel_rem_pio2f+0x96>
 800d672:	42dd      	cmn	r5, r3
 800d674:	bf5d      	ittte	pl
 800d676:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d67a:	ee07 2a90 	vmovpl	s15, r2
 800d67e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d682:	eef0 7a47 	vmovmi.f32	s15, s14
 800d686:	ecee 7a01 	vstmia	lr!, {s15}
 800d68a:	3301      	adds	r3, #1
 800d68c:	e7df      	b.n	800d64e <__kernel_rem_pio2f+0x46>
 800d68e:	ecf5 6a01 	vldmia	r5!, {s13}
 800d692:	ed33 7a01 	vldmdb	r3!, {s14}
 800d696:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d69a:	f10c 0c01 	add.w	ip, ip, #1
 800d69e:	45d4      	cmp	ip, sl
 800d6a0:	ddf5      	ble.n	800d68e <__kernel_rem_pio2f+0x86>
 800d6a2:	ece7 7a01 	vstmia	r7!, {s15}
 800d6a6:	3201      	adds	r2, #1
 800d6a8:	e7d5      	b.n	800d656 <__kernel_rem_pio2f+0x4e>
 800d6aa:	ab06      	add	r3, sp, #24
 800d6ac:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d6b0:	9304      	str	r3, [sp, #16]
 800d6b2:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800d91c <__kernel_rem_pio2f+0x314>
 800d6b6:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800d918 <__kernel_rem_pio2f+0x310>
 800d6ba:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d6be:	9303      	str	r3, [sp, #12]
 800d6c0:	464d      	mov	r5, r9
 800d6c2:	ab56      	add	r3, sp, #344	; 0x158
 800d6c4:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d6c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d6cc:	3f01      	subs	r7, #1
 800d6ce:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d6d2:	00bf      	lsls	r7, r7, #2
 800d6d4:	ab56      	add	r3, sp, #344	; 0x158
 800d6d6:	19da      	adds	r2, r3, r7
 800d6d8:	3a4c      	subs	r2, #76	; 0x4c
 800d6da:	2300      	movs	r3, #0
 800d6dc:	1ae9      	subs	r1, r5, r3
 800d6de:	2900      	cmp	r1, #0
 800d6e0:	dc4c      	bgt.n	800d77c <__kernel_rem_pio2f+0x174>
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	f000 faae 	bl	800dc44 <scalbnf>
 800d6e8:	eeb0 8a40 	vmov.f32	s16, s0
 800d6ec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d6f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d6f4:	f000 fa64 	bl	800dbc0 <floorf>
 800d6f8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d6fc:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d700:	2c00      	cmp	r4, #0
 800d702:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d706:	edcd 7a01 	vstr	s15, [sp, #4]
 800d70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d70e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d712:	dd48      	ble.n	800d7a6 <__kernel_rem_pio2f+0x19e>
 800d714:	1e69      	subs	r1, r5, #1
 800d716:	ab06      	add	r3, sp, #24
 800d718:	f1c4 0008 	rsb	r0, r4, #8
 800d71c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d720:	9a01      	ldr	r2, [sp, #4]
 800d722:	fa4c f300 	asr.w	r3, ip, r0
 800d726:	441a      	add	r2, r3
 800d728:	4083      	lsls	r3, r0
 800d72a:	9201      	str	r2, [sp, #4]
 800d72c:	ebac 0203 	sub.w	r2, ip, r3
 800d730:	ab06      	add	r3, sp, #24
 800d732:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d736:	f1c4 0307 	rsb	r3, r4, #7
 800d73a:	fa42 f803 	asr.w	r8, r2, r3
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	dd41      	ble.n	800d7c8 <__kernel_rem_pio2f+0x1c0>
 800d744:	9b01      	ldr	r3, [sp, #4]
 800d746:	2000      	movs	r0, #0
 800d748:	3301      	adds	r3, #1
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	4601      	mov	r1, r0
 800d74e:	4285      	cmp	r5, r0
 800d750:	dc6d      	bgt.n	800d82e <__kernel_rem_pio2f+0x226>
 800d752:	2c00      	cmp	r4, #0
 800d754:	dd04      	ble.n	800d760 <__kernel_rem_pio2f+0x158>
 800d756:	2c01      	cmp	r4, #1
 800d758:	d07e      	beq.n	800d858 <__kernel_rem_pio2f+0x250>
 800d75a:	2c02      	cmp	r4, #2
 800d75c:	f000 8086 	beq.w	800d86c <__kernel_rem_pio2f+0x264>
 800d760:	f1b8 0f02 	cmp.w	r8, #2
 800d764:	d130      	bne.n	800d7c8 <__kernel_rem_pio2f+0x1c0>
 800d766:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d76a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d76e:	b359      	cbz	r1, 800d7c8 <__kernel_rem_pio2f+0x1c0>
 800d770:	4620      	mov	r0, r4
 800d772:	f000 fa67 	bl	800dc44 <scalbnf>
 800d776:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d77a:	e025      	b.n	800d7c8 <__kernel_rem_pio2f+0x1c0>
 800d77c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d780:	a806      	add	r0, sp, #24
 800d782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d78a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d78e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d792:	ee10 1a10 	vmov	r1, s0
 800d796:	ed32 0a01 	vldmdb	r2!, {s0}
 800d79a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d79e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	e79a      	b.n	800d6dc <__kernel_rem_pio2f+0xd4>
 800d7a6:	d106      	bne.n	800d7b6 <__kernel_rem_pio2f+0x1ae>
 800d7a8:	1e6b      	subs	r3, r5, #1
 800d7aa:	aa06      	add	r2, sp, #24
 800d7ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d7b0:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d7b4:	e7c3      	b.n	800d73e <__kernel_rem_pio2f+0x136>
 800d7b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d7ba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c2:	da31      	bge.n	800d828 <__kernel_rem_pio2f+0x220>
 800d7c4:	f04f 0800 	mov.w	r8, #0
 800d7c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d7cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7d0:	f040 80a8 	bne.w	800d924 <__kernel_rem_pio2f+0x31c>
 800d7d4:	1e6b      	subs	r3, r5, #1
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	2200      	movs	r2, #0
 800d7da:	4548      	cmp	r0, r9
 800d7dc:	da4d      	bge.n	800d87a <__kernel_rem_pio2f+0x272>
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	f000 8087 	beq.w	800d8f2 <__kernel_rem_pio2f+0x2ea>
 800d7e4:	aa06      	add	r2, sp, #24
 800d7e6:	3c08      	subs	r4, #8
 800d7e8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d7ec:	2900      	cmp	r1, #0
 800d7ee:	f000 808d 	beq.w	800d90c <__kernel_rem_pio2f+0x304>
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d7f8:	9302      	str	r3, [sp, #8]
 800d7fa:	f000 fa23 	bl	800dc44 <scalbnf>
 800d7fe:	9b02      	ldr	r3, [sp, #8]
 800d800:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d91c <__kernel_rem_pio2f+0x314>
 800d804:	0099      	lsls	r1, r3, #2
 800d806:	aa42      	add	r2, sp, #264	; 0x108
 800d808:	1850      	adds	r0, r2, r1
 800d80a:	1d05      	adds	r5, r0, #4
 800d80c:	461c      	mov	r4, r3
 800d80e:	2c00      	cmp	r4, #0
 800d810:	f280 80b8 	bge.w	800d984 <__kernel_rem_pio2f+0x37c>
 800d814:	2500      	movs	r5, #0
 800d816:	1b5c      	subs	r4, r3, r5
 800d818:	2c00      	cmp	r4, #0
 800d81a:	f2c0 80d8 	blt.w	800d9ce <__kernel_rem_pio2f+0x3c6>
 800d81e:	4f3d      	ldr	r7, [pc, #244]	; (800d914 <__kernel_rem_pio2f+0x30c>)
 800d820:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d920 <__kernel_rem_pio2f+0x318>
 800d824:	2400      	movs	r4, #0
 800d826:	e0c6      	b.n	800d9b6 <__kernel_rem_pio2f+0x3ae>
 800d828:	f04f 0802 	mov.w	r8, #2
 800d82c:	e78a      	b.n	800d744 <__kernel_rem_pio2f+0x13c>
 800d82e:	ab06      	add	r3, sp, #24
 800d830:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d834:	b949      	cbnz	r1, 800d84a <__kernel_rem_pio2f+0x242>
 800d836:	b12b      	cbz	r3, 800d844 <__kernel_rem_pio2f+0x23c>
 800d838:	aa06      	add	r2, sp, #24
 800d83a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d83e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d842:	2301      	movs	r3, #1
 800d844:	3001      	adds	r0, #1
 800d846:	4619      	mov	r1, r3
 800d848:	e781      	b.n	800d74e <__kernel_rem_pio2f+0x146>
 800d84a:	aa06      	add	r2, sp, #24
 800d84c:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d850:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d854:	460b      	mov	r3, r1
 800d856:	e7f5      	b.n	800d844 <__kernel_rem_pio2f+0x23c>
 800d858:	1e68      	subs	r0, r5, #1
 800d85a:	ab06      	add	r3, sp, #24
 800d85c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d864:	aa06      	add	r2, sp, #24
 800d866:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d86a:	e779      	b.n	800d760 <__kernel_rem_pio2f+0x158>
 800d86c:	1e68      	subs	r0, r5, #1
 800d86e:	ab06      	add	r3, sp, #24
 800d870:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d878:	e7f4      	b.n	800d864 <__kernel_rem_pio2f+0x25c>
 800d87a:	a906      	add	r1, sp, #24
 800d87c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d880:	3801      	subs	r0, #1
 800d882:	430a      	orrs	r2, r1
 800d884:	e7a9      	b.n	800d7da <__kernel_rem_pio2f+0x1d2>
 800d886:	f10c 0c01 	add.w	ip, ip, #1
 800d88a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d88e:	2a00      	cmp	r2, #0
 800d890:	d0f9      	beq.n	800d886 <__kernel_rem_pio2f+0x27e>
 800d892:	eb0b 0305 	add.w	r3, fp, r5
 800d896:	aa1a      	add	r2, sp, #104	; 0x68
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	1898      	adds	r0, r3, r2
 800d89c:	3004      	adds	r0, #4
 800d89e:	1c69      	adds	r1, r5, #1
 800d8a0:	3704      	adds	r7, #4
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	4465      	add	r5, ip
 800d8a6:	9005      	str	r0, [sp, #20]
 800d8a8:	428d      	cmp	r5, r1
 800d8aa:	f6ff af0a 	blt.w	800d6c2 <__kernel_rem_pio2f+0xba>
 800d8ae:	a81a      	add	r0, sp, #104	; 0x68
 800d8b0:	eb02 0c03 	add.w	ip, r2, r3
 800d8b4:	4484      	add	ip, r0
 800d8b6:	9803      	ldr	r0, [sp, #12]
 800d8b8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d8bc:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d8c0:	9001      	str	r0, [sp, #4]
 800d8c2:	ee07 0a90 	vmov	s15, r0
 800d8c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8ca:	9805      	ldr	r0, [sp, #20]
 800d8cc:	edcc 7a00 	vstr	s15, [ip]
 800d8d0:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d920 <__kernel_rem_pio2f+0x318>
 800d8d4:	eb00 0802 	add.w	r8, r0, r2
 800d8d8:	f04f 0c00 	mov.w	ip, #0
 800d8dc:	45d4      	cmp	ip, sl
 800d8de:	dd0c      	ble.n	800d8fa <__kernel_rem_pio2f+0x2f2>
 800d8e0:	eb02 0c07 	add.w	ip, r2, r7
 800d8e4:	a842      	add	r0, sp, #264	; 0x108
 800d8e6:	4484      	add	ip, r0
 800d8e8:	edcc 7a01 	vstr	s15, [ip, #4]
 800d8ec:	3101      	adds	r1, #1
 800d8ee:	3204      	adds	r2, #4
 800d8f0:	e7da      	b.n	800d8a8 <__kernel_rem_pio2f+0x2a0>
 800d8f2:	9b04      	ldr	r3, [sp, #16]
 800d8f4:	f04f 0c01 	mov.w	ip, #1
 800d8f8:	e7c7      	b.n	800d88a <__kernel_rem_pio2f+0x282>
 800d8fa:	ecfe 6a01 	vldmia	lr!, {s13}
 800d8fe:	ed38 7a01 	vldmdb	r8!, {s14}
 800d902:	f10c 0c01 	add.w	ip, ip, #1
 800d906:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d90a:	e7e7      	b.n	800d8dc <__kernel_rem_pio2f+0x2d4>
 800d90c:	3b01      	subs	r3, #1
 800d90e:	e769      	b.n	800d7e4 <__kernel_rem_pio2f+0x1dc>
 800d910:	08021678 	.word	0x08021678
 800d914:	0802164c 	.word	0x0802164c
 800d918:	43800000 	.word	0x43800000
 800d91c:	3b800000 	.word	0x3b800000
 800d920:	00000000 	.word	0x00000000
 800d924:	4260      	negs	r0, r4
 800d926:	eeb0 0a48 	vmov.f32	s0, s16
 800d92a:	f000 f98b 	bl	800dc44 <scalbnf>
 800d92e:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800d918 <__kernel_rem_pio2f+0x310>
 800d932:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	db1a      	blt.n	800d972 <__kernel_rem_pio2f+0x36a>
 800d93c:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d91c <__kernel_rem_pio2f+0x314>
 800d940:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d944:	aa06      	add	r2, sp, #24
 800d946:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d94a:	a906      	add	r1, sp, #24
 800d94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d950:	3408      	adds	r4, #8
 800d952:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d95a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d95e:	ee10 3a10 	vmov	r3, s0
 800d962:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d966:	1c6b      	adds	r3, r5, #1
 800d968:	ee17 2a90 	vmov	r2, s15
 800d96c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d970:	e73f      	b.n	800d7f2 <__kernel_rem_pio2f+0x1ea>
 800d972:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d976:	aa06      	add	r2, sp, #24
 800d978:	ee10 3a10 	vmov	r3, s0
 800d97c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d980:	462b      	mov	r3, r5
 800d982:	e736      	b.n	800d7f2 <__kernel_rem_pio2f+0x1ea>
 800d984:	aa06      	add	r2, sp, #24
 800d986:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d98a:	9202      	str	r2, [sp, #8]
 800d98c:	ee07 2a90 	vmov	s15, r2
 800d990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d994:	3c01      	subs	r4, #1
 800d996:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d99a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d99e:	ed65 7a01 	vstmdb	r5!, {s15}
 800d9a2:	e734      	b.n	800d80e <__kernel_rem_pio2f+0x206>
 800d9a4:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800d9a8:	ecf7 6a01 	vldmia	r7!, {s13}
 800d9ac:	ed9c 7a00 	vldr	s14, [ip]
 800d9b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d9b4:	3401      	adds	r4, #1
 800d9b6:	454c      	cmp	r4, r9
 800d9b8:	dc01      	bgt.n	800d9be <__kernel_rem_pio2f+0x3b6>
 800d9ba:	42a5      	cmp	r5, r4
 800d9bc:	daf2      	bge.n	800d9a4 <__kernel_rem_pio2f+0x39c>
 800d9be:	aa56      	add	r2, sp, #344	; 0x158
 800d9c0:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800d9c4:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800d9c8:	3501      	adds	r5, #1
 800d9ca:	3804      	subs	r0, #4
 800d9cc:	e723      	b.n	800d816 <__kernel_rem_pio2f+0x20e>
 800d9ce:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d9d0:	2a03      	cmp	r2, #3
 800d9d2:	d84d      	bhi.n	800da70 <__kernel_rem_pio2f+0x468>
 800d9d4:	e8df f002 	tbb	[pc, r2]
 800d9d8:	021f1f3e 	.word	0x021f1f3e
 800d9dc:	aa56      	add	r2, sp, #344	; 0x158
 800d9de:	4411      	add	r1, r2
 800d9e0:	399c      	subs	r1, #156	; 0x9c
 800d9e2:	4608      	mov	r0, r1
 800d9e4:	461c      	mov	r4, r3
 800d9e6:	2c00      	cmp	r4, #0
 800d9e8:	dc5f      	bgt.n	800daaa <__kernel_rem_pio2f+0x4a2>
 800d9ea:	4608      	mov	r0, r1
 800d9ec:	461c      	mov	r4, r3
 800d9ee:	2c01      	cmp	r4, #1
 800d9f0:	dc6b      	bgt.n	800daca <__kernel_rem_pio2f+0x4c2>
 800d9f2:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800d920 <__kernel_rem_pio2f+0x318>
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	dc77      	bgt.n	800daea <__kernel_rem_pio2f+0x4e2>
 800d9fa:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d9fe:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800da02:	f1b8 0f00 	cmp.w	r8, #0
 800da06:	d176      	bne.n	800daf6 <__kernel_rem_pio2f+0x4ee>
 800da08:	edc6 6a00 	vstr	s13, [r6]
 800da0c:	ed86 7a01 	vstr	s14, [r6, #4]
 800da10:	edc6 7a02 	vstr	s15, [r6, #8]
 800da14:	e02c      	b.n	800da70 <__kernel_rem_pio2f+0x468>
 800da16:	aa56      	add	r2, sp, #344	; 0x158
 800da18:	4411      	add	r1, r2
 800da1a:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800d920 <__kernel_rem_pio2f+0x318>
 800da1e:	399c      	subs	r1, #156	; 0x9c
 800da20:	4618      	mov	r0, r3
 800da22:	2800      	cmp	r0, #0
 800da24:	da32      	bge.n	800da8c <__kernel_rem_pio2f+0x484>
 800da26:	f1b8 0f00 	cmp.w	r8, #0
 800da2a:	d035      	beq.n	800da98 <__kernel_rem_pio2f+0x490>
 800da2c:	eef1 7a47 	vneg.f32	s15, s14
 800da30:	edc6 7a00 	vstr	s15, [r6]
 800da34:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800da38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da3c:	a82f      	add	r0, sp, #188	; 0xbc
 800da3e:	2101      	movs	r1, #1
 800da40:	428b      	cmp	r3, r1
 800da42:	da2c      	bge.n	800da9e <__kernel_rem_pio2f+0x496>
 800da44:	f1b8 0f00 	cmp.w	r8, #0
 800da48:	d001      	beq.n	800da4e <__kernel_rem_pio2f+0x446>
 800da4a:	eef1 7a67 	vneg.f32	s15, s15
 800da4e:	edc6 7a01 	vstr	s15, [r6, #4]
 800da52:	e00d      	b.n	800da70 <__kernel_rem_pio2f+0x468>
 800da54:	aa56      	add	r2, sp, #344	; 0x158
 800da56:	4411      	add	r1, r2
 800da58:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d920 <__kernel_rem_pio2f+0x318>
 800da5c:	399c      	subs	r1, #156	; 0x9c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	da0e      	bge.n	800da80 <__kernel_rem_pio2f+0x478>
 800da62:	f1b8 0f00 	cmp.w	r8, #0
 800da66:	d001      	beq.n	800da6c <__kernel_rem_pio2f+0x464>
 800da68:	eef1 7a67 	vneg.f32	s15, s15
 800da6c:	edc6 7a00 	vstr	s15, [r6]
 800da70:	9b01      	ldr	r3, [sp, #4]
 800da72:	f003 0007 	and.w	r0, r3, #7
 800da76:	b057      	add	sp, #348	; 0x15c
 800da78:	ecbd 8b04 	vpop	{d8-d9}
 800da7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da80:	ed31 7a01 	vldmdb	r1!, {s14}
 800da84:	3b01      	subs	r3, #1
 800da86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da8a:	e7e8      	b.n	800da5e <__kernel_rem_pio2f+0x456>
 800da8c:	ed71 7a01 	vldmdb	r1!, {s15}
 800da90:	3801      	subs	r0, #1
 800da92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da96:	e7c4      	b.n	800da22 <__kernel_rem_pio2f+0x41a>
 800da98:	eef0 7a47 	vmov.f32	s15, s14
 800da9c:	e7c8      	b.n	800da30 <__kernel_rem_pio2f+0x428>
 800da9e:	ecb0 7a01 	vldmia	r0!, {s14}
 800daa2:	3101      	adds	r1, #1
 800daa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daa8:	e7ca      	b.n	800da40 <__kernel_rem_pio2f+0x438>
 800daaa:	ed50 7a02 	vldr	s15, [r0, #-8]
 800daae:	ed70 6a01 	vldmdb	r0!, {s13}
 800dab2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dab6:	3c01      	subs	r4, #1
 800dab8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dabc:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac4:	edc0 7a00 	vstr	s15, [r0]
 800dac8:	e78d      	b.n	800d9e6 <__kernel_rem_pio2f+0x3de>
 800daca:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dace:	ed70 6a01 	vldmdb	r0!, {s13}
 800dad2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dad6:	3c01      	subs	r4, #1
 800dad8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dadc:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dae4:	edc0 7a00 	vstr	s15, [r0]
 800dae8:	e781      	b.n	800d9ee <__kernel_rem_pio2f+0x3e6>
 800daea:	ed31 7a01 	vldmdb	r1!, {s14}
 800daee:	3b01      	subs	r3, #1
 800daf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800daf4:	e77f      	b.n	800d9f6 <__kernel_rem_pio2f+0x3ee>
 800daf6:	eef1 6a66 	vneg.f32	s13, s13
 800dafa:	eeb1 7a47 	vneg.f32	s14, s14
 800dafe:	edc6 6a00 	vstr	s13, [r6]
 800db02:	ed86 7a01 	vstr	s14, [r6, #4]
 800db06:	eef1 7a67 	vneg.f32	s15, s15
 800db0a:	e781      	b.n	800da10 <__kernel_rem_pio2f+0x408>

0800db0c <__kernel_sinf>:
 800db0c:	ee10 3a10 	vmov	r3, s0
 800db10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800db18:	da04      	bge.n	800db24 <__kernel_sinf+0x18>
 800db1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800db1e:	ee17 3a90 	vmov	r3, s15
 800db22:	b35b      	cbz	r3, 800db7c <__kernel_sinf+0x70>
 800db24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800db28:	eddf 7a15 	vldr	s15, [pc, #84]	; 800db80 <__kernel_sinf+0x74>
 800db2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800db84 <__kernel_sinf+0x78>
 800db30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800db34:	eddf 7a14 	vldr	s15, [pc, #80]	; 800db88 <__kernel_sinf+0x7c>
 800db38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800db3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800db8c <__kernel_sinf+0x80>
 800db40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800db44:	eddf 7a12 	vldr	s15, [pc, #72]	; 800db90 <__kernel_sinf+0x84>
 800db48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800db4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800db50:	b930      	cbnz	r0, 800db60 <__kernel_sinf+0x54>
 800db52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800db94 <__kernel_sinf+0x88>
 800db56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800db5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800db5e:	4770      	bx	lr
 800db60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800db64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800db68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800db6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800db70:	eddf 7a09 	vldr	s15, [pc, #36]	; 800db98 <__kernel_sinf+0x8c>
 800db74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800db78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	2f2ec9d3 	.word	0x2f2ec9d3
 800db84:	b2d72f34 	.word	0xb2d72f34
 800db88:	3638ef1b 	.word	0x3638ef1b
 800db8c:	b9500d01 	.word	0xb9500d01
 800db90:	3c088889 	.word	0x3c088889
 800db94:	be2aaaab 	.word	0xbe2aaaab
 800db98:	3e2aaaab 	.word	0x3e2aaaab

0800db9c <matherr>:
 800db9c:	2000      	movs	r0, #0
 800db9e:	4770      	bx	lr

0800dba0 <nan>:
 800dba0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dba8 <nan+0x8>
 800dba4:	4770      	bx	lr
 800dba6:	bf00      	nop
 800dba8:	00000000 	.word	0x00000000
 800dbac:	7ff80000 	.word	0x7ff80000

0800dbb0 <fabsf>:
 800dbb0:	ee10 3a10 	vmov	r3, s0
 800dbb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbb8:	ee00 3a10 	vmov	s0, r3
 800dbbc:	4770      	bx	lr
	...

0800dbc0 <floorf>:
 800dbc0:	ee10 3a10 	vmov	r3, s0
 800dbc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbc8:	0dca      	lsrs	r2, r1, #23
 800dbca:	3a7f      	subs	r2, #127	; 0x7f
 800dbcc:	2a16      	cmp	r2, #22
 800dbce:	dc2a      	bgt.n	800dc26 <floorf+0x66>
 800dbd0:	2a00      	cmp	r2, #0
 800dbd2:	da11      	bge.n	800dbf8 <floorf+0x38>
 800dbd4:	eddf 7a18 	vldr	s15, [pc, #96]	; 800dc38 <floorf+0x78>
 800dbd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dbdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe4:	dd05      	ble.n	800dbf2 <floorf+0x32>
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da23      	bge.n	800dc32 <floorf+0x72>
 800dbea:	4a14      	ldr	r2, [pc, #80]	; (800dc3c <floorf+0x7c>)
 800dbec:	2900      	cmp	r1, #0
 800dbee:	bf18      	it	ne
 800dbf0:	4613      	movne	r3, r2
 800dbf2:	ee00 3a10 	vmov	s0, r3
 800dbf6:	4770      	bx	lr
 800dbf8:	4911      	ldr	r1, [pc, #68]	; (800dc40 <floorf+0x80>)
 800dbfa:	4111      	asrs	r1, r2
 800dbfc:	420b      	tst	r3, r1
 800dbfe:	d0fa      	beq.n	800dbf6 <floorf+0x36>
 800dc00:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800dc38 <floorf+0x78>
 800dc04:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dc08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dc0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc10:	ddef      	ble.n	800dbf2 <floorf+0x32>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	bfbe      	ittt	lt
 800dc16:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800dc1a:	fa40 f202 	asrlt.w	r2, r0, r2
 800dc1e:	189b      	addlt	r3, r3, r2
 800dc20:	ea23 0301 	bic.w	r3, r3, r1
 800dc24:	e7e5      	b.n	800dbf2 <floorf+0x32>
 800dc26:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dc2a:	d3e4      	bcc.n	800dbf6 <floorf+0x36>
 800dc2c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dc30:	4770      	bx	lr
 800dc32:	2300      	movs	r3, #0
 800dc34:	e7dd      	b.n	800dbf2 <floorf+0x32>
 800dc36:	bf00      	nop
 800dc38:	7149f2ca 	.word	0x7149f2ca
 800dc3c:	bf800000 	.word	0xbf800000
 800dc40:	007fffff 	.word	0x007fffff

0800dc44 <scalbnf>:
 800dc44:	b508      	push	{r3, lr}
 800dc46:	ee10 2a10 	vmov	r2, s0
 800dc4a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dc4e:	ed2d 8b02 	vpush	{d8}
 800dc52:	eef0 0a40 	vmov.f32	s1, s0
 800dc56:	d004      	beq.n	800dc62 <scalbnf+0x1e>
 800dc58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dc5c:	d306      	bcc.n	800dc6c <scalbnf+0x28>
 800dc5e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800dc62:	ecbd 8b02 	vpop	{d8}
 800dc66:	eeb0 0a60 	vmov.f32	s0, s1
 800dc6a:	bd08      	pop	{r3, pc}
 800dc6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc70:	d21c      	bcs.n	800dcac <scalbnf+0x68>
 800dc72:	4b1f      	ldr	r3, [pc, #124]	; (800dcf0 <scalbnf+0xac>)
 800dc74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800dcf4 <scalbnf+0xb0>
 800dc78:	4298      	cmp	r0, r3
 800dc7a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800dc7e:	db10      	blt.n	800dca2 <scalbnf+0x5e>
 800dc80:	ee10 2a90 	vmov	r2, s1
 800dc84:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800dc88:	3b19      	subs	r3, #25
 800dc8a:	4403      	add	r3, r0
 800dc8c:	2bfe      	cmp	r3, #254	; 0xfe
 800dc8e:	dd0f      	ble.n	800dcb0 <scalbnf+0x6c>
 800dc90:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800dcf8 <scalbnf+0xb4>
 800dc94:	eeb0 0a48 	vmov.f32	s0, s16
 800dc98:	f000 f834 	bl	800dd04 <copysignf>
 800dc9c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800dca0:	e7df      	b.n	800dc62 <scalbnf+0x1e>
 800dca2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800dcfc <scalbnf+0xb8>
 800dca6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800dcaa:	e7da      	b.n	800dc62 <scalbnf+0x1e>
 800dcac:	0ddb      	lsrs	r3, r3, #23
 800dcae:	e7ec      	b.n	800dc8a <scalbnf+0x46>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dd06      	ble.n	800dcc2 <scalbnf+0x7e>
 800dcb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dcb8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dcbc:	ee00 3a90 	vmov	s1, r3
 800dcc0:	e7cf      	b.n	800dc62 <scalbnf+0x1e>
 800dcc2:	f113 0f16 	cmn.w	r3, #22
 800dcc6:	da06      	bge.n	800dcd6 <scalbnf+0x92>
 800dcc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dccc:	4298      	cmp	r0, r3
 800dcce:	dcdf      	bgt.n	800dc90 <scalbnf+0x4c>
 800dcd0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800dcfc <scalbnf+0xb8>
 800dcd4:	e7de      	b.n	800dc94 <scalbnf+0x50>
 800dcd6:	3319      	adds	r3, #25
 800dcd8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800dcdc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800dce0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dd00 <scalbnf+0xbc>
 800dce4:	ee07 3a10 	vmov	s14, r3
 800dce8:	ee67 0a27 	vmul.f32	s1, s14, s15
 800dcec:	e7b9      	b.n	800dc62 <scalbnf+0x1e>
 800dcee:	bf00      	nop
 800dcf0:	ffff3cb0 	.word	0xffff3cb0
 800dcf4:	4c000000 	.word	0x4c000000
 800dcf8:	7149f2ca 	.word	0x7149f2ca
 800dcfc:	0da24260 	.word	0x0da24260
 800dd00:	33000000 	.word	0x33000000

0800dd04 <copysignf>:
 800dd04:	ee10 3a10 	vmov	r3, s0
 800dd08:	ee10 2a90 	vmov	r2, s1
 800dd0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd10:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800dd14:	4313      	orrs	r3, r2
 800dd16:	ee00 3a10 	vmov	s0, r3
 800dd1a:	4770      	bx	lr

0800dd1c <_init>:
 800dd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1e:	bf00      	nop
 800dd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd22:	bc08      	pop	{r3}
 800dd24:	469e      	mov	lr, r3
 800dd26:	4770      	bx	lr

0800dd28 <_fini>:
 800dd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2a:	bf00      	nop
 800dd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2e:	bc08      	pop	{r3}
 800dd30:	469e      	mov	lr, r3
 800dd32:	4770      	bx	lr
